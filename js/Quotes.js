app.controller('QuotesCtrl', ["$scope", "globals", "$rootScope", "$http", "$timeout", "$interval", "$window", "$location", "$q", "$localStorage",
    "DataFactory", "CommonFactory", "HealthFactory", "QuoteService", "CarFactory", "TwowheelerFactory", "FeatureService", "TermFactory",
    "TravelFactory", "EmailFactory", "anchorSmoothScroll", "$analytics", "CriticalFactory", "$filter", "ValidationFactory", "CommonService", "NonTermFactory", "$mdToast", "deviceDetector", "$sce", "browserInfo",
    function ($scope, globals, $rootScope, $http, $timeout, $interval, $window, $location, $q, $localStorage, DataFactory, CommonFactory, HealthFactory, QuoteService,
        CarFactory, TwowheelerFactory, FeatureService, TermFactory, TravelFactory, EmailFactory, anchorSmoothScroll, $analytics, CriticalFactory, $filter, ValidationFactory, CommonService, NonTermFactory, $mdToast, deviceDetector, $sce, browserInfo) {
        $rootScope.showHeader = "hide";
        $scope.$root.showonproposal = false;
        $scope.selectedfeature = [];
        $scope.HealthTab = 0;
        var filterdisease = [];
        var healthaddonarray = [];
        $scope.mdrider = [];
        var apios;
        var apiBrowser;
        var apiBrowserSize;
        var apidevice;
        var rideritemTemp1;
        $scope.autocheck = true;
        var familyfloater = 0;
        var spouseselectedrider;
        var jointlifeparentplan;
        var PlanidFornetwork;
        var Insureridtemp;
        var Motorinsureid;
        var TataItem;
        var TataFlag;
        var Investmentquotes = [];
        var Openfeaturedetails = [];
        $rootScope.jointlifemodel = [];
        $scope.increasingSADisablemodel = [];
        $scope.ADDisablemodel = [];
        var cookieproductcode;
        $scope.plantypemodel = 1;
        $scope.GrowthModel = 1;
        $scope.healtheditmdrider = [];
        $scope.HealthExistCover = {};
        $scope.religareselection = "Yes";
        $rootScope.clisktoclflagnew = false;
        var timecancel;
        $scope.Lumpsummodel = 50;
        var riderselect = [];
        $scope.ridermodel = [];
        var cl1, cl2, cl3;
        $scope.ulippop = false;
        var plantype = null;
        $scope.activeMonTab = 1;
        var pageload = true;
        $scope.suggestedshow = true;
        var testdata;
        var UiVersion = 1;
        $scope.investmentChips = [];
        $scope.absUrlcopy = $location.absUrl;
        $scope.InvestmentRefineChips = [];
        $scope.InvestmentRiderArray = [];
        $scope.calfreq = "Yearly";
        $scope.commonclass = "CoverCss";
        $scope.totalcount1 = 10;
        $scope.DefaultMonthlyIncome = 40000;
        $scope.monthlypaymodeCss = "";
        $scope.yearlypaymodeCss = "yearctive";
        $scope.term1monthlypaymodeCss = "activeclass";
        $scope.term1yearlypaymodeCss = "";
        var wholeliferesponsedata2 = [];
        $scope.IncreasingSAValue = 10;
        $analytics.pageTrack('QUotes Page');
        $scope.FeatureDetailsShowMore = [];
        $scope.carquotesleadrequest = ValidationFactory.GetEncryptedString();
        $scope.leadcreaterequestdata = ValidationFactory.GetLeadCreationEncryptedString();
        $scope.otpcreaterequestdata = ValidationFactory.GetOTPString1();
        $scope.smoker == "no";
        $scope.orderByField1 = "Inception";
        $scope.sortfiltermobileshow = true;
        $scope.a1class = "lmbutton activebt";
        $scope.a2class = "lmbutton";
        $scope.chclass = ["childbt activebt", "childbt ", "childbt ", "childbt ", "childbt "];
        $scope.txtActualIncome = {};
        $scope.wrongMobilemsg = "Please enter correct number";
        $scope.$root.sharethepage = true;
        $scope.showcloseleadpop = true;
        $scope.servicetaxdivrate = globals.Servicetaxdivrate;
        $scope.onquotes = true;
        $scope.AgentMobile = undefined;
        $scope.onproposal = false;
        $rootScope.hideOnProposal = true;
        $scope.showbannertab = true;
        $scope.$root.showmainloader = false;
        $scope.$root.utm_Source = true;
        var lang = "en";
        $scope.funds = [];
        $scope.incomeMonthlypayout = [];
        $scope.showlaoder = true;
        $scope.carbreaking = 1;
        $scope.showexpirydate = true;
        $scope.shareurl = $location.absUrl();
        $scope.termsliderLoader = false;
        $scope.AssociationName = [{ id: 1, text: "AAEI" }, { id: 2, text: "AASI" }, { id: 3, text: "AAUI" }, { id: 4, text: "UPAA" }, { id: 5, text: "WIAA" }];
        $scope.plantypelist = [{ id: 1, name: "Guaranteed Plan" }, { id: 2, name: "ULIP Plan" }];
        $scope.InvestplanType = [];
        getlist = 0;
        $scope.riderCI = 0;
        $rootScope.exitfrompage = 1;
        $scope.insurancetype = "11";
        $scope.allcityflag = 0;
        $scope.$root.showotherpageheader = false;
        $scope.bool = false;
        $scope.showadultmess = false;
        $scope.showbtnNetloader = false;
        //timeout variables
        $scope.quotestimeout = 0;
        $scope.timeout3 = 0;
        $scope.SavePlanDatatime = 0;
        $scope.Saverequest = 0;
        $scope.quotestimeout1 = 0;
        $scope.quotestimeout2 = 0;
        $scope.quotestimeout3 = 0;
        $scope.getCPIDdatatime1 = 0;
        $scope.redirecturltime = 0;
        $scope.CityListtime = 0;
        var sortingvaluecount = 0;
        $scope.quoteHeader = true;
        $scope.currentpage = $location.absUrl();
        $scope.clicktocallpopshow = false;
        $scope.selected = true;
        $scope.imgbindUrl = globals.UIURL;
        $scope.lazyloadcycle = 0;
        $scope.moreadd = false;
        $scope.showbtnloader1 = [];
        $scope.agentphonenumber = false;
        $scope.userphone = true;
        $scope.selecteGrowth = "1";
        $scope.AditionalBenifit = [];
        // $scope.clickToCallShow = false;
        $scope.MinMaturityTerm = "5";
        $scope.$root.scrollhide = "whitebg"
        $scope.maleclass = "lmbutton activebt";
        $scope.sortTypeTerm1 = "Rank";
        $scope.femaleclass = "lmbutton";
        $scope.nosmokeclass = "lmbutton activebt";
        $scope.smokeclass = "lmbutton";
        $scope.gender = "M";
        $scope.DobMessage = "Parent's age should be (Min. 18 yrs & Max. 65 yrs)";
        $scope.dataValue = [];
        $scope.todayDate = new Date();
        $scope.travelStartDate = $scope.todayDate;
        $scope.TotalMembers = [];
        $scope.destinationList = [];
        $scope.date = new Date();
        $scope.year = $scope.date.getFullYear();
        $scope.thirdInsurance = false;
        $scope.liveInsurance = true;
        $scope.thirdParty = true;
        $scope.showOpt = true;
        $scope.Comprehensive = true;
        $scope.addonname = "";
        $scope.Optlimit = 2;
        $scope.suffer1 = [];
        $scope.TermDiyClaim = true;
        $scope.isClaimRatio = 1;
        $scope.responsenull = [];
        $scope.HitTime = {};
        $scope.GetTime = {};
        $scope.payemodepremium = "month";
        $scope.totaltime = {};
        $scope.opdshow = [];
        $scope.RiderPT = [];
        $scope.RiderPPT = [];
        $scope.RiderPTlist = [];
        $scope.RiderPPTlist = [];
        $localStorage.Isrefresh = false;
        $scope.hiddenForOneYearTP = true;
        $scope.MaxCriticalDisease_list = [{ 'text': 'Cancer of Specified Severity' }, { 'text': 'Angioplasty - Max Cover of 5 lacs only' }, { 'text': 'First Heart Attack – of Specified Severity' }, { 'text': 'Open Heart Replacement or Repair of Heart Valves' }, { 'text': 'Surgery toAorta Heart and Artery Benefit' }, { 'text': 'Cardiomyopathy' }
            , { 'text': 'Primary Pulmonary hypertension' }, { 'text': 'Open Chest CABG' }, { 'text': 'Blindness' }, { 'text': 'Chronic Lung Disease' }, { 'text': 'Chronic Liver Disease Major Organ Benefit' }, { 'text': 'Kidney Failure Requiring Regular Dialysis' }, { 'text': 'Major Organ/ Bone Marrow Transplant' }, { 'text': 'Apallic Syndrome' }
            , { 'text': 'Benign Brain Tumour' }, { 'text': 'Brain Surgery' }, { 'text': 'Coma of Specified Severity' }, { 'text': 'Major Head Trauma' }, { 'text': 'Permanent Paralysis of Limbs' }, { 'text': 'Stroke resulting in permanent symptoms Brain and Nervous System Benefit' }, { 'text': 'Alzheimers Disease' }, { 'text': 'Motor Neurone Disease with Permanent Symptoms' }
            , { 'text': 'Multiple Sclerosis with Persisting Symptoms' }, { 'text': 'Muscular Dystrophy' }, { 'text': 'Parkinson’s Disease*' }, { 'text': 'Loss of Independent Existence' }, { 'text': 'Loss of Limbs' }, { 'text': 'Deafness' }, { 'text': 'Loss of Speech Others' }, { 'text': 'Medullary Cystic Disease' }, { 'text': 'Systematic lupus Eryth with Renal Involvement' }
            , { 'text': 'Major Burns' }, { 'text': 'Aplastic Anaemia' }, { 'text': 'Poliomyelitis' }, { 'text': 'Bacterial Meningitis' }, { 'text': 'Encephalitis' }, { 'text': 'Progressive supranuclear pals' }, { 'text': 'Rheumatoid arthritis' }, { 'text': 'Creutzfeldt - Jakob disease' }, { 'text': 'Fulminant Hepatitis' }];

        $scope.MaxWaiverDisease_list = [{ 'text': 'Cancer of Specified Severity' }, { 'text': 'First Heart Attack – of Specified Severity' }, { 'text': 'Open Heart Replacement or Repair of Heart Valves' }, { 'text': 'Open Chest CABG' }, { 'text': 'Kidney Failure Requiring Regular Dialysis' }, { 'text': 'Major Organ/ Bone Marrow Transplant' },
        { 'text': 'Coma of Specified Severity' }, { 'text': 'Permanent Paralysis of Limbs' }, { 'text': 'Stroke resulting in permanent symptoms' }, { 'text': 'Motor Neurone Disease with Permanent Symptoms' }, { 'text': 'Multiple Sclerosis with Persisting Symptoms' }];

        var monthlist = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        var beforeexpirydate = new Date();
        beforeexpirydate.setDate(beforeexpirydate.getDate() - 87);
        var beforeDATE1 = beforeexpirydate.getDate();
        var beforeMONTH1 = monthlist[beforeexpirydate.getMonth()];
        var beforeYEAR1 = beforeexpirydate.getFullYear();
        $scope.motorafterexpirydate = "before " + beforeDATE1 + "-" + beforeMONTH1 + "-" + beforeYEAR1;
        $scope.minstartdatetravel = new Date().getMonth() + 1 + "/" + new Date().getDate() + "/" + new Date().getFullYear();
        var date1 = new Date();
        date1.setDate(date1.getDate() + 180);
        $scope.maxenddatetravel = date1.getMonth() + 1 + "/" + date1.getDate() + "/" + date1.getFullYear();
        var date2 = new Date();
        date2.setDate(date2.getDate() + 1);
        $scope.minenddatetravel = date2.getMonth() + 1 + "/" + date2.getDate() + "/" + date2.getFullYear();

        var date = "";
        var month = "";
        var year = "";
        var Termrideritem = "";
        var Termflag = "";
        var Termritem = "";
        var motorpolicyexpdate = "";
        var motorregdate = "";
        $scope.showMonthlyPremium = false;
        $scope.showAnnualPremium = true;
        $scope.BuyNowHelpPop = false;
        $scope.IncomePeriod = 15;
        $scope.IncreasingMonthlyIncome = 0;
        $scope.sId = 0;
        //For Previos Year For Vehicle
        $scope.vechicleForPreviousYear = false;
        $rootScope.showcsleadpopup = false;

        if (window.innerWidth >= 850) {
            $scope.device = "Desktop";
            $rootScope.device = "Desktop";
        }
        else {
            $scope.device = "Mobile";
            $rootScope.device = "Mobile";
            $scope.mobiletemplate = "../HomePage/Template/mobile.html";
            $scope.mobiletemplateshow = true;
        }
        //timeout end


        var previousScroll = 0;
        var scroll = 0;
        $scope.scrollanimate = true;

        //        $(window).scroll(function (event) {
        //            var scroll = $(this).scrollTop();
        //            if (scroll > previousScroll) {
        //                // downscroll code


        //                previousScroll = scroll;
        //                // $scope.scrollanimate = false;
        //                $scope.xyz = "ezMSf";
        //            } else if (scroll < previousScroll) {
        //                // upscroll code

        //                previousScroll = scroll;

        //                // $scope.scrollanimate = true;
        //                $scope.xyz = "";
        //            }

        //        });


        $scope.checkadult = function (flag) {
            $scope.selectedadult = flag;
            if (flag == 1) {
                $scope.a1class = "lmbutton activebt";
                $scope.a2class = "lmbutton";
            }
            else if (flag == 2) {
                $scope.a1class = "lmbutton ";
                $scope.a2class = "lmbutton activebt";
            }
            if ($scope.selectedadult > 1) {
                $scope.showadultmess = true;
            }
            else {
                if ($scope.selectedchild < 1 && $scope.selectedadult == 1)
                    $scope.showadultmess = false;
            }

            $scope.drop1 = "open";
        }

        $scope.checkchild = function (flag) {
            $scope.selectedchild = flag;
            $scope.chclass = ["childbt ", "childbt ", "childbt ", "childbt ", "childbt "];
            $scope.chclass[flag] = $scope.chclass[flag] + "activebt";
            if ($scope.selectedchild > 0) {
                $scope.showadultmess = true;
            }
            else {
                if ($scope.selectedchild < 1 && $scope.selectedadult == 1)
                    $scope.showadultmess = false;
            }
        }

        $scope.broadcast = function () {
            $timeout(function () {
                $scope.$broadcast('reCalcViewDimensions');
            });
        }

        $scope.openmobilefilter = function (flag) {
            $rootScope.scrollhide = 'scollClass';
            var a = 'Mobile' + flag + " " + $scope.gaProduct;

            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            if (flag == 'filter') {
                if ($scope.productID == 3) {
                    if ($scope.termrider == undefined || $scope.termrider.length == 0) {
                        var riderdata = FeatureService.GetRiderData($scope.AgeInMonths);
                        riderdata.then(function (getRiderData) {
                            $scope.termrider = angular.fromJson(getRiderData.data);
                        });
                    }
                    $scope.FilterSRC = '../HomePage/Template/Popfiltermobile.html';
                }
                else if ($scope.productID == 2) {
                    $scope.FilterSRC = '../HomePage/Template/HealthMobileFilterPopup.html';
                }
                else if ($scope.productID == 4) {
                    $scope.FilterSRC = '../HomePage/Template/CarMobileFilterPopup.html';
                }
                else if ($scope.productID == 8) {
                    $scope.FilterSRC = '../HomePage/Template/TWMobileFilterPopup.html';
                }
                else if ($scope.productID == 9) {
                    $scope.FilterSRC = '../HomePage/Template/criticalMobileFilterPopup.html';
                }
                else if ($scope.productID == 1) {
                    $scope.FilterSRC = '../HomePage/Template/TravelMobileFilterPopup.html';
                }
                else {
                    $scope.FilterSRC = '../HomePage/Template/NonTermMobileFilterPopup.html';
                }
                $scope.mobilefiltershow = true;
                $rootScope.popfiltermobile = true;
                $scope.filterBtnLoader = false;

                $rootScope.urlDefaultFlag = 1;
                RemoveSearchUrl();
                $location.search("filterpop", "true");
                $rootScope.filterviewflag = 1;
                if ($scope.product == "Term") {
                    $scope.TermleftpanelDissablefn();
                }
            }
            else if (flag == 'sort') {
                $scope.SortSRC = '../HomePage/Template/Popsortmobile.html';
                $scope.mobilesortshow = true;
                $rootScope.popsortmobile = true;
                $scope.sortBtnLoader = false;
                $scope.sortkeytemp = $scope.sortkey;

                $rootScope.urlDefaultFlag = 1;
                RemoveSearchUrl();

                $location.search("sortpop", "true");
                $rootScope.sortviewflag = 1;
            }
            else if (flag == 'plantype') {
                if ($scope.productID == 3) {
                    $scope.PlantypeSRC = '../HomePage/Template/PlantypePopupMobile.html';
                }
                else if ($scope.productID == 2) {
                    $scope.PlantypeSRC = '../HomePage/Template/HealthPlantypePopupMobile.html';
                }
                else if ($scope.productID == 6 || $scope.productID == 7) {
                    $scope.PlantypeSRC = '../HomePage/Template/NonTermPlantypePopupMobile.html';
                }
                $rootScope.popplantypemobile = true;
                $rootScope.plantypeviewflag = 1;
                $location.search("plantypepop", "true");
                if ($scope.product == "Term") {
                    $scope.TermleftpanelDissablefn();
                }
            }
        }
        $scope.closefilterpop = function (flag) {
            var currentpage = $location.absUrl();
            $rootScope.scrollhide = '';
            if (flag == 'filter') {
                $scope.historyback("filter");
                $rootScope.popfiltermobile = false;
                $scope.$root.scrollhide = '';
                $rootScope.urlDefaultFlag = 0;
                if (currentpage.indexOf('filterpop') != -1) {
                    if ($location.$$search.filterpop) {
                        delete $location.$$search.filterpop;
                        $location.$$compose();
                    }
                }
            }
            else if (flag == 'sort') {
                $rootScope.popsortmobile = false;
                $scope.historyback("sort");
                $scope.sortkey = $scope.sortkeytemp;
                $scope.$root.scrollhide = '';
                $rootScope.urlDefaultFlag = 0;
                if (currentpage.indexOf('sortpop') != -1) {
                    if ($location.$$search.sortpop) {
                        delete $location.$$search.sortpop;
                        $location.$$compose();
                    }
                }
            }
            else if (flag == 'plantype') {
                $rootScope.popplantypemobile = false;
                $scope.historyback("plantype");
                $scope.$root.scrollhide = '';
                if (currentpage.indexOf('plantypepop') != -1) {
                    if ($location.$$search.sortpop) {
                        delete $location.$$search.sortpop;
                        $location.$$compose();
                    }
                }
            }
        }
        function goodbye(e) {
            if ($scope.exitproposal != 1 && !$scope.showsharepopup && $rootScope.exitfrompage != 3) {
                if ($rootScope.exitfrompage == 1) {
                    RemoveSearchUrl();
                    exitfromhere(1);
                    // $scope.ExitPopup = true;
                    // return true;
                }
                else if ($rootScope.exitfrompage == 2) {
                    exitfromhere();
                }
            }
        }
        window.onbeforeunload = goodbye;



        window.dataLogging = function (flag1) { var e = "33f2b3d60f970c413ebd2b390287d550736faa691580708728e3a4153655f435b24b4b4421ebbd14198f02d16cfddc5e", t = "DIGIPARTNER002", n = window.location.pathname, o = (window.location.hostname, window.location.hostname), i = new XMLHttpRequest, a = (n.split("/")[1], { createCookie: function (e, n, i) { var a = "_" + t + "_" + e + "=" + escape(n) + ";"; i && (i instanceof Date ? isNaN(i.getTime()) && (i = new Date) : i = new Date((new Date).getTime() + 1e3 * parseInt(i) * 60 * 60 * 24), a += "expires=" + i.toGMTString() + ";"), o && (a += "domain=" + o + ";"), document.cookie = a }, getCookie: function (e) { var t = new RegExp("(?:^" + e + "|;s*" + e + ")=(.*?)(?:;|$)", "g"), n = t.exec(document.cookie); return null === n ? null : n[1] }, getCookies: function () { for (var e = document.cookie.split(";"), t = "", n = 1; n <= e.length; n++) t += n + " " + e[n - 1] + "\n"; return t }, deleteCookie: function (e) { this.getCookie(e) && this.createCookie(e, "", -1) }, sendLogObject: function (t) { t.source = e, this.createCookie("source", e, "10"), this.validate(t) && (i.withCredentials === !1 && (i.withCredentials = !0), i.onreadystatechange = function () { 4 == this.readyState && 200 == this.status && (document.getElementById("demo").innerHTML = this.responseText) }, i.open("POST", "https://pgibeta.iciciprulife.com/ULogger/api/errorObject", !0), i.setRequestHeader("Content-Type", "application/json"), i.send(JSON.stringify(t))) }, sendCLog: function (t) { var n = {}; n.source = e, n.message = t.message, n.properties = t.properties, this.validate(n) && (i.withCredentials === !1 && (i.withCredentials = !0), i.onreadystatechange = function () { if (4 == this.readyState && 201 == this.status) for (var e = JSON.parse(this.response), t = 0; t < e.length; t++) a.deleteCookie(e[t]) }, i.open("POST", "https://buy.iciciprulife.com/IpruApi/api/tracer", !0), i.setRequestHeader("Content-Type", "application/json"), i.send(JSON.stringify(n))) }, validate: function (e) { return "object" != typeof e || e.hasOwnProperty("source") ? !0 : !1 }, createLog: function () { for (var e = document.cookie.split(";"), n = {}, o = "", i = "", a = [], s = 0; s < e.length; s++) e[s].indexOf(t) > -1 && !e[s].indexOf("properties") > -1 && (a = e[s].split("="), o = a[0].split("_")[2], i = decodeURIComponent(a[1]), n[o] = i); return n } }); return a }();
        function exitfromhere() {

            var sss = CommonService.Exitservice($scope.IGquoteId, false);
            sss.then(function (result) {
                result.data = angular.fromJson(result.data);
                sss = result.data;
                if (flag = 1) {
                    $scope.ExitPopup = true;
                    return true;
                }
            }, function (response) {
                ServiceRespnse(response);
            });

            console.log("himanshu");
        }

        function icicicookiefn() {
            if ($scope.userMobileNumber != undefined && $scope.userMobileNumber != undefined && ($scope.product.toLowerCase() == "term" || $scope.product.toLowerCase() == "investment" || $scope.product.toLowerCase() == "pension" || $scope.product.toLowerCase() == "child")) {
                var mbl = angular.copy($scope.userMobileNumber);
                var mblnum = mbl.toString();
                if ($scope.DateOfBirth == undefined) {
                    $scope.DateOfBirth = $scope.DOB;
                }
                if (mblnum.length == 10) {
                    if ($scope.gender != null && $scope.gender != undefined) {
                        if ($scope.gender[0].toLowerCase() == 'm') {
                            $scope.icicigender = "Male"
                        } else {
                            $scope.icicigender = "Female"
                        }
                    }
                    for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                        if ($scope.Quotes_Data[i].InsurerId == 19) {
                            $scope.icicipremium = $scope.Quotes_Data[i].Premium
                        }
                    }
                    if ($scope.DateOfBirth != undefined) {
                        var dob = $scope.DateOfBirth.split("-");
                        $scope.IGdate = dob[0];
                        $scope.IGmonth = dob[1];
                        $scope.IGyear = dob[2]
                    }
                    var num = "0" + "0" + "0" + $scope.userMobileNumber.slice(3, 10);
                    var date = new Date();
                    var aid = $scope.IGyear + $scope.userMobileNumber.slice(5, 10);
                    if (date.getHours() > 11) {
                        var hour = date.getHours() - 12;
                        var format = " PM"
                    } else {
                        var hour = date.getHours();
                        var format = " AM"
                    }
                    if (hour == 0) {
                        hour = 12
                    }
                    var cookieDay = date.getFullYear() + "/" + (date.getMonth() + 1) + "/" + date.getDate() + " " + hour + ":" + date.getMinutes() + ":" + date.getSeconds() + format;
                    var dob = $scope.IGdate + " " + monthlist[$scope.IGmonth - 1] + " " + $scope.IGyear;
                    var tid = Math.random().toString(36).substr(2, 40) + Math.random().toString(36).substr(2, 40);
                    var dId;
                    if ($scope.quotesrequest.BrowserId != undefined) {
                        var dId = $scope.quotesrequest.BrowserId.slice(0, 16);
                    }
                    if ($scope.userMobileNumber != undefined) {
                        var ass2 = $scope.DateOfBirth.split("-")[2] + $scope.userMobileNumber.toString().substr(3, 9) + $scope.quotes_userdata.IPAddress;
                    }
                    var req1 = {
                        "message": "insurejoy.com Cookie",
                        "properties": {
                            "amount": $scope.quotes_userdata.sumassured,
                            "gender": $scope.icicigender,
                            "cardType": "ICICI BANK",
                            "mobileNo": $scope.userMobileNumber,
                            "emailID": "dearinsurer@insurejoy.com",
                            "productCode": cookieproductcode,
                            "vendorUid": "insurejoy.com",
                            "associationId": $scope.iciciassociatenum,
                            "premium": $scope.icicipremium,
                            "deviceId": dId,
                            "ipAddress": $scope.quotes_userdata.IPAddress,
                            "vendorUid": "Insurejoy",
                            "dob": dob
                        }
                    };
                    var req3 = {
                        "message": "insurejoy.com Cookie",
                        "properties": {
                            "amount": $scope.quotes_userdata.sumassured,
                            "gender": $scope.icicigender,
                            "cardType": "ICICI BANK",
                            "mobileNo": $scope.userMobileNumber,
                            "emailID": "dearinsurer@insurejoy.com",
                            "productCode": cookieproductcode,
                            "vendorUid": "insurejoy.com",
                            "associationId": ass2,
                            "premium": $scope.icicipremium,
                            "deviceId": dId,
                            "ipAddress": $scope.quotes_userdata.IPAddress,
                            "vendorUid": "insurejoy.com",
                            "dob": dob
                        }
                    };
                    window.dataLogging.sendCLog(req1);
                    window.dataLogging.sendCLog(req3);

                    var req = {
                        "Amount": $scope.quotes_userdata.sumassured,
                        "AssociationId": aid,
                        "CPID": $scope.quotesrequest.IGQuoteId,
                        "CardType": "ICICI BANK",
                        "CreatedOn": cookieDay,
                        "DeviceId": dId,
                        "EmailId": "abc@xyz.com",
                        "Gender": $scope.icicigender,
                        "IPAddress": $scope.quotes_userdata.IPAddress,
                        "MobileNo": num,
                        "Premium": $scope.icicipremium,
                        "ProductCode": cookieproductcode,
                        "Source": "insurejoy.com",
                        "TransactionId": tid
                    }

                    var sss = QuoteService.saveCookie(req);
                    sss.then(function (result) {
                        // result.data = angular.fromJson(result.data);
                        sss = result.data;

                    }, function (response) {

                    });
                }
            }
        }

        $scope.showPopviewdetails = function (flag) {
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "View Details", value: $scope.gaProduct });

            $scope.mobileviewplan = $scope.Quotes_Data[flag];
            $scope.popviewdetails = true;
            $scope.popviewdetailshow = true;
            $scope.popviewdetailsrc = '../HomePage/Template/popviewdetails.html';
            // // // $scope.$root.scrollhide = "scrollhides";
        }
        function BuynowloaderShow(flag, item) {

            $scope.showbtnloader1[flag] = true;

        }

        $scope.copyShareUrlfn = function () {

            $scope.copyUrl = false;
            $scope.copiedUrl = true;
            $scope.absUrlcopy = $location.absUrl();
            var clipboard = new Clipboard('.btn');

            clipboard.on('success', function (e) {
                console.log(e);
            });

            clipboard.on('error', function (e) {
                console.log(e);
            });
        }
        $scope.shareurlcopy = function () {
            return $scope.shareurl;
        }
        $rootScope.Shareadress = function () {
            $scope.showsharepopup = true;
            if ($scope.productID == 3) {
                $scope.loadEmailtemplatesrc = '../HomePage/Template/termallemailtable.html';
            }
            else if ($scope.productID == 5) {
                $scope.loadEmailtemplatesrc = '../HomePage/Template/investmentallemailtable.html';
            }
            else if ($scope.productID == 6) {
                $scope.loadEmailtemplatesrc = '../HomePage/Template/pensionallemailtable.html';
            }
            else if ($scope.productID == 2) {
                $scope.loadEmailtemplatesrc = '../HomePage/Template/healthallemailtable.html';
            }
            else if ($scope.productID == 7) {
                $scope.loadEmailtemplatesrc = '../HomePage/Template/childallemailtable.html';
            }
            else if ($scope.productID == 1) {
                $scope.loadEmailtemplatesrc = '../HomePage/Template/travelallemailtable.html';
            }
            else if ($scope.productID == 4) {
                $scope.loadEmailtemplatesrc = '../HomePage/Template/carallemailtable.html';
            }
            else if ($scope.productID == 8) {
                $scope.loadEmailtemplatesrc = '../HomePage/Template/twowheelerallemailtable.html';
            }
            else if ($scope.productID == 9) {
                $scope.loadEmailtemplatesrc = '../HomePage/Template/criticalallemailtable.html';
            }
            var a = "Share Address" + " " + $scope.gaProduct;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


            $rootScope.scrollhide = 'scollClass';

            $scope.template("Sharepop", true);
            $scope.copyUrl = true;
            $scope.copiedUrl = false;
            $location.search("sharepop", "true");
            $rootScope.sharepopviewflag = 1;
        }

        $rootScope.Closesharepop = function (flag) {
            $rootScope.scrollhide = '';
            if (flag == 'sharepop') {
                $scope.showsharepopup = false;
                $location.search("sharepop", null);
                $rootScope.sharepopviewflag = 0;
                window.history.back();
            }
            else if (flag == 'emailpop') {
                $scope.Emailpopupshow = false;
                $location.search("emailpop", null);
                $rootScope.emailviewflag = 0;
                window.history.back();
            }
        }

        $rootScope.closelead = function (flag) {

            if (flag == -1) {

            }
            else if (flag == 0) {
                $scope.showcomparepopAnimation = "fadeIn";
                $scope.comparepopAnimation = "bounceInDown";
                $scope.showcomparepop = true; $rootScope.showfooter = false;
                $scope.showcomparepopInner = true;

                // console.log($scope.statecity);
                //    // // $scope.$root.scrollhide = "scrollhides";
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate1 = $sce.trustAsResourceUrl('../HomePage/Template/showcomparepop.html');
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate1 = $sce.trustAsResourceUrl('../HomePage/Template/showcomparepopmobile.html');
                }

                $rootScope.showloadcardtemplate = false;
                $scope.$root.sharethepage = false;
                $scope.sortfiltermobileshow = false;
            }
            else if (flag == 1) { $scope.prePolicydetails1 = false; }
            else if (flag == 2) {
                $(".phoneIcon").animate({ right: '-433px' }, 500);
                $(".phoneIconBg").fadeOut(1000);
                $scope.clicktocallpopshow = false;
                $scope.$root.scrollhide = "";
            }
            else if (flag == 3) {
                $scope.showsharepopup = false;
                $scope.Emailpopupshow = false;
                $rootScope.scrollhide = '';
            }
            else if (flag == 4) {
                $scope.Emailpopupshow = false;
                $rootScope.scrollhide = '';
            }
            else if (flag == 5) {
                $scope.closemblpop(1, 0);
            }
            else if (flag == 6) {
                $scope.CloseHealthDIY(1, 1);
            }
            else if (flag == 7) {
                $scope.HealthDiyFunction('GobackStep', 'Roomtype', 1);
            }
            else if (flag == 8) {
                $scope.HealthDiyFunction('GobackStep', 'Professionvalue', 1);
            }
            else if (flag == 9) {
                $scope.HealthDiyFunction('GobackStep', 'CalSuminsured', 1);
            }
            else if (flag == 10) {
                $scope.HealthDiyFunction('GobackStep', 'CalFeature', 1);
            }
            else if (flag == 11) {
                $scope.HealthDiyFunction('GobackStep', 'CalSuffer', 1);
            }
            else if (flag == 12) {
                $scope.HealthDiyFunction('GobackStep', 'CalSuffer1', 1);
            }
            else if (flag == 13) {
                $scope.HealthDiyFunction('GobackStep', 'FinalStep', 1);
            }
        }
        $scope.GetLeadSection = function (item, flag) {
            $scope.AskPolicy = undefined;
            if (item.ShowPreviousPolicyTypePopup == true && !$scope.quotes_userdata.IsNewVehicle) {
                $scope.AskPreviouspolicyPackQUES = true;
                $scope.AskPreviouspolicyPackQUES1 = true;
                TataItem = item;
                TataFlag = flag;
                $scope.TataImg = item.InsurerImage;
            }
            else {
                $scope.AskPreviouspolicyPackQUES1 = false;
                $scope.AskPreviouspolicyPackQUES = false;
                $scope.GetLeadSection1(item, flag)
            }
        }
        $scope.AskPolicyproceed = function () {
            if ($scope.AskPolicy == 'Package') {
                $scope.AskPreviouspolicyPackQUES = false;
                $scope.GetLeadSection1(TataItem, TataFlag);
            }
            else {
                $scope.AskPreviouspolicyPackQUES1 = false;
            }
        }
        $scope.GetLeadSection1 = function (item, flag) {
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Buy Now", value: $scope.productID });

            $scope.selectedmotorplan = item;

            if ($scope.regfill || $scope.quotesrequest.Requests[0].InsuranceType == 'TP' || $scope.$root.editregdate == false || $scope.quotesrequest.Requests[0].BreakingDays == 91) {
                $scope.GetLead(item, flag, 1);
            }
            else {
                $scope.items = item;
                $scope.showloadtemplate = true;
                $scope.loadtemplate = '../HomePage/Template/Leadpopup.html';
                if ($scope.quotes_userdata.PreviousPolicyEndDate == undefined) {
                    var date0 = new Date(parseInt(motorpolicyexpdate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt(motorpolicyexpdate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt(motorpolicyexpdate.substring(6, 19))).getFullYear();
                    var date = date0.split('-');
                    $scope.expdate = (parseInt(date[0]) < 9 ? '0' + date[0] : date[0]);
                    $scope.expmonth = (parseInt(date[1]) < 9 ? '0' + date[1] : date[1]);
                    $scope.expyear = parseInt(date[2]);
                }
                else {
                    var date0 = new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getFullYear();
                    var date = date0.split('-');
                    if ($scope.quotesrequest.Requests[0].InsuranceType != 'TP') {
                        if ($scope.quotes_userdata.BreakingDays != 90) {
                            $scope.expdate = (parseInt(date[0]) < 9 ? '0' + date[0] : date[0]);
                            $scope.expmonth = (parseInt(date[1]) < 9 ? '0' + date[1] : date[1]);
                            $scope.expyear = parseInt(date[2]);
                        }
                        else {
                            $scope.expdate = '';
                            $scope.expmonth = '';
                            $scope.expyear = '';
                        }


                    }
                    else {
                        var date0 = new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getDate() + '-' +
                            (new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getMonth() + 1) + '-' +
                            new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getFullYear();
                        var date = date0.split('-');


                        $scope.expdate = (parseInt(date[0]) < 9 ? '0' + date[0] : date[0]);
                        $scope.expmonth = (parseInt(date[1]) < 9 ? '0' + date[1] : date[1]);
                        $scope.expyear = parseInt(date[2]);
                    }

                }
                if ($scope.quotes_userdata.RegistrationDate == undefined) {
                    var date0 = new Date(parseInt(motorregdate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt(motorregdate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt(motorregdate.substring(6, 19))).getFullYear();
                    var date = date0.split('-');
                    $scope.expdate = (parseInt(date[0]) < 9 ? '0' + date[0] : date[0]);
                    $scope.expmonth = (parseInt(date[1]) < 9 ? '0' + date[1] : date[1]);
                    $scope.expyear = parseInt(date[2]);
                }
                else {
                    var date2 = new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getFullYear();
                    var date1 = date2.split('-');
                    $scope.regdate = (parseInt(date1[0]) < 9 ? '0' + date1[0] : date1[0]);
                    $scope.regmonth = (parseInt(date1[1]) < 9 ? '0' + date1[1] : date1[1]);
                    $scope.regyear = parseInt(date1[2]);
                }
                $rootScope.prePolicydetails = true;
                $rootScope.scrollhide = 'scollClass';
                $scope.prePolicydetails1 = true;
                $location.search("Leadpop", "true");
                $rootScope.leadpopviewflag = 1;
                if ($scope.lastclaim == 1) {
                    $scope.hideclaim = true;
                }
                if ($scope.carclaim == undefined || $scope.carclaim == '') {
                    $scope.carclaimtext = "Yes~0";
                    $scope.carclaimedncb = 0;
                    $scope.RequiredNCB = 0;
                }

                $scope.regerror = false;
                $scope.policyexp = false;
                $scope.policyexp1 = false;
                $scope.policyexp2 = false;
                $scope.policyexp3 = false;

            }

        }
        $scope.expdatecheck = function () {
            if ($scope.datespecificmsgexp == '' || $scope.datespecificmsgexp == undefined || $scope.datespecificmsgreg == '' || $scope.datespecificmsgreg == undefined) {
                var a = "Final Quote Submit " + $scope.gaProduct;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

                if ($scope.Vehicle_Type == 0) {
                    $scope.showbtnloadermotor = true;
                    if ($scope.newmotorshow) {
                        DataFactory.Expdatecheck($scope);
                    }
                    else {
                        $scope.GetLead($scope.items, 0);
                    }
                    $scope.Vehicle_TypeError = false;
                }
                else if ($scope.Vehicle_Type == 1) {
                    $scope.clicktocallfn(1);
                    $scope.items.IsVehicleCommercial = true;
                    $scope.showcomercialpopmsg = true;
                    $scope.prePolicydetails1 = false;
                    var SavePlanData = QuoteService.SavePlanData($scope.quotesrequest.IGQuoteId, $scope.items, $scope);
                    $scope.Vehicle_TypeError = false;

                }
                else {
                    //  $scope.Vehicle_TypeError = false;
                    if ($scope.Vehicle_Type == undefined) {
                        $scope.Vehicle_TypeError = true;
                    }
                    else {
                        $scope.Vehicle_TypeError = false;
                    }
                }
            }
        }
        //        $scope.popoback = function () {
        //            $scope.showcomercialpopmsg = false;
        //            $scope.prePolicydetails1 = true;
        //        }

        // edit funtion start........
        $scope.gettravelquotespop = function () {
            validatecontrols();
            $scope.Compareselection = [];
            if ($scope.TravlingMember == 0) {
                $scope.quotes_userdata.TravellerAges = $scope.formtravellerages;
                $scope.quotes_userdata.StartDate = new Date($scope.travelStartDate);
                $scope.editcross = true;
                $scope.quotes_userdata.EndDate = new Date($scope.travelEndDate);
                $scope.TravelStartDate = JSON.parse(DataFactory.stringifyWcf($scope.formtravelstartdate, 1));
                $scope.TravelEndDate = JSON.parse(DataFactory.stringifyWcf($scope.formtravelenddate, 1));
                $scope.quotes_userdata.Destination = $scope.formtraveldestinations;
                $scope.selecteddestinationArray = $scope.quotes_userdata.Destination.toString().split(',');
                $scope.quotes_userdata.DestinationName = $scope.formtraveldestinationsName;
                DataFactory.travelrequestdata($scope, 2);
                $scope.$root.travelsecondpop = false;
                $scope.$root.popuptravelpage = false;
                $scope.template("TravelEdit1", false);
                $scope.template("TravelEdit2", false);
                $scope.historyback("edit");
                $rootScope.scrollhide = '';
                $scope.Initialzedata();
                if ($location.$$search.editsearch) {
                    delete $location.$$search.editsearch;
                    $location.$$compose();
                }
            }
            else {
                $scope.showbtntravelloader = false;
                $scope.travelProceedBtnLoader = false;
            }

        }

        $scope.checkmblagent = function () {
            if ($scope.userMobileNumber == $scope.AgentMobile && $scope.userMobileNumber != undefined) {
                $scope.showagentmsg = true;

            }
            else {
                $scope.showagentmsg = false;
                $scope.showbtnloader = false;
            }
        }
        function validatecontrols() {
            if (validatecontrolsoncontinue()) {
                $scope.TravlingMember = 0;
                $scope.ageError = false;
                $scope.formtravellerages = undefined;
                for (i = 1; i <= $scope.selectedTravellers; i++) {
                    if (!$scope.dataValue[i]) {
                        $scope.ageError = true;
                        $scope.TravlingMember = 1;
                        //break;
                        return false;
                    }
                    else if (parseInt($scope.dataValue[i])==0) {
                        $scope.ageError = true;
                        $scope.TravlingMember = 1;
                       // break;
                        return false;
                    }
                    else {
                        if ($scope.formtravellerages == undefined) {
                            $scope.formtravellerages = $scope.dataValue[i];
                        }
                        else {
                            $scope.formtravellerages = $scope.formtravellerages + ',' + $scope.dataValue[i];
                        }
                    }
                }
                $scope.showbtntravelloader = true;
                $scope.txtTravellerAges = $scope.formtravellerages;
                var currentPage = $location.absUrl();
                $scope.utm_source = "";
                $scope.utm_campaign = "";
                $scope.utm_term = "";
                $scope.utm_medium = "";

                if (currentPage.indexOf("utm_source") != -1) { $scope.utm_source = currentPage.slice(currentPage.indexOf("utm_source=") + 11).split("&")[0]; }
                if (currentPage.indexOf("utm_campaign") != -1) { $scope.utm_campaign = currentPage.slice(currentPage.indexOf("utm_campaign=") + 13).split("&")[0]; }
                if (currentPage.indexOf("utm_term") != -1) { $scope.utm_term = currentPage.slice(currentPage.indexOf("utm_term=") + 9).split("&")[0]; }
                if (currentPage.indexOf("utm_medium") != -1) { $scope.utm_medium = currentPage.slice(currentPage.indexOf("utm_medium=") + 11).split("&")[0]; }
                $scope.selectedtravelerDOBArray = [];
                $scope.selectedtravelerAgeArray = $scope.formtravellerages.toString().split(',');
                for (i = 0; i < $scope.selectedtravelerAgeArray.length; i++) {
                    var d = new Date();
                    if ($rootScope.CurrenDateTimeService != undefined) {
                        d = new Date($rootScope.CurrenDateTimeService);
                    }
                    var dobs = d.setFullYear(d.getFullYear() - parseInt($scope.selectedtravelerAgeArray[i]));
                    $scope.selectedtravelerDOBArray.push(dobs);
                }
                $scope.DOBArray = DataFactory.stringifyallDobs($scope.selectedtravelerDOBArray);



                return true;

            }
        }

        $scope.HealthDIY = function () {
            $rootScope.popsortmobile01 = true;
            $scope.HealthdiySrc = '../HomePage/Template/popsortmobile01.html';

            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'Health DIY', value: $scope.productID });

            $scope.HealthDiyFunction('FirstStep');
            $location.search("DIY1", "true");
            $rootScope.diyviewflag = 1;
            $rootScope.scrollhide = 'fixed-bg';
        }
        $scope.CloseHealthDIY = function (flag, flag1) {
            if (flag == 1) {
                $rootScope.popsortmobile01 = false;
                if (flag1 != 1) {
                    $location.search("DIY1", null);
                    $rootScope.diyviewflag = 0;
                    window.history.back();
                }

                $rootScope.scrollhide = '';
            }

            if (flag == 2) {
                $rootScope.popsortmobile01 = false;
                $scope.CalRoom = false;
                $location.search("DIY2", null);
                $rootScope.diyviewflag = 0;
                window.history.back();
                $location.search("DIY1", null);
                window.history.back();
            }
            if (flag == 3) {
                $rootScope.popsortmobile01 = false;
                $scope.CalJob = false;
                $rootScope.diyviewflag = 0;
                $location.search("DIY3", null);
                window.history.back();
                $location.search("DIY2", null);
                window.history.back();
                $location.search("DIY1", null);
                window.history.back();
            }
            if (flag == 4) {
                $rootScope.popsortmobile01 = false
                $rootScope.diyviewflag = 0;
                $location.search("DIY4", null);
                window.history.back();
                $location.search("DIY3", null);
                window.history.back();
                $location.search("DIY2", null);
                window.history.back();
                $location.search("DIY1", null);
                window.history.back();
            }
            if (flag == 5) {
                $rootScope.popsortmobile01 = false;
                $rootScope.diyviewflag = 0;
                $location.search("DIY5", null);
                window.history.back();
                $location.search("DIY4", null);
                window.history.back();
                $location.search("DIY3", null);
                window.history.back();
                $location.search("DIY2", null);
                window.history.back();
                $location.search("DIY1", null);
                window.history.back();
            }
            if (flag == 6) {
                $rootScope.popsortmobile01 = false;
                $rootScope.diyviewflag = 0;
                $location.search("DIY6", null);
                window.history.back();
                $location.search("DIY5", null);
                window.history.back();
                $location.search("DIY4", null);
                window.history.back();
                $location.search("DIY3", null);
                window.history.back();
                $location.search("DIY2", null);
                window.history.back();
                $location.search("DIY1", null);
                window.history.back();
            }
            if (flag == 7) {
                $scope.showbtnhealthdiyloader = true;
                $scope.HealthDiyFunction('ManageDisease');
                $scope.Error['DiseaseList'] = false;
                if ($scope.DiseaseChip.length > 0)
                    $scope.suffer[5] = true;
                else
                    $scope.suffer[5] = false;
                var urlcurrent = $location.absUrl();
                if ($scope.Notdiyother1 != true && urlcurrent.indexOf("DIYa6") != -1) {
                    $rootScope.diyviewflag = 0;
                    $location.search("DIYa6", null);
                    window.history.back();
                    $location.search("DIY6", null);
                    window.history.back();
                    $location.search("DIY5", null);
                    window.history.back();
                    $location.search("DIY4", null);
                    window.history.back();
                    $location.search("DIY3", null);
                    window.history.back();
                    $location.search("DIY2", null);
                    window.history.back();
                    $location.search("DIY1", null);
                    window.history.back();
                }
                else {
                    $scope.Notdiyother1 = false;
                    $scope.Notdiyother = false;
                    $rootScope.popsortmobile01 = false;
                }
            }
            if (flag == 8) {
                $rootScope.popsortmobile01 = false;
                $scope.CalFinalStep = false;
                $rootScope.diyviewflag = 0;
                $location.search("DIY7", null);
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Health DIY Submit", value: $scope.productID });

                window.history.back();
                if ($scope.suffer[5] == true) {
                    $location.search("DIYa6", null);
                    window.history.back();
                }
                $location.search("DIY6", null);
                window.history.back();
                $location.search("DIY5", null);
                window.history.back();
                $location.search("DIY4", null);
                window.history.back();
                $location.search("DIY3", null);
                window.history.back();
                $location.search("DIY2", null);
                window.history.back();
                $location.search("DIY1", null);
                window.history.back();
            }
            if (flag == 9) {
                $scope.HealthDiyFunction('FirstStep');
                $rootScope.diyviewflag = 0;
                $location.search("DIY7", null);
                window.history.back();
                if ($scope.suffer[5] == true) {
                    $location.search("DIYa6", null);
                    window.history.back();
                }
                $location.search("DIY6", null);
                window.history.back();
                $location.search("DIY5", null);
                window.history.back();
                $location.search("DIY4", null);
                window.history.back();
                $location.search("DIY3", null);
                window.history.back();
                $location.search("DIY2", null);
                window.history.back();

            }


        }

        $scope.removeMember = function (memberid) {
            if (parseInt($scope.selectedTravellers) == 1) {
                $scope.ToastText = "Minimum one traveller is required.";
                $scope.showSimpleToast();
            }
            else {
                var val = $filter('filter')($scope.TotalMembers, function (d) { return d.id == memberid });
                var idx = $scope.TotalMembers.indexOf(val[0]);
                if (idx > -1) {
                    $scope.selectedTravellers = parseInt($scope.selectedTravellers) - 1;
                    $scope.dataValue.splice(idx + 1, 1);
                    $scope.TotalMembers.splice($scope.selectedTravellers, 1);
                    for (i = 1; i <= $scope.selectedTravellers; i++) {
                        if ($scope.dataValue[i] == undefined || $scope.dataValue[i] == "") {
                            $scope.ageError = true;
                        }
                        else {
                            $scope.ageError = false;
                        }
                    }
                }
            }
        }
        $scope.checktravelageerror = function () {
            for (var i = 1; i <= $scope.selectedTravellers; i++) {
                if (!$scope.dataValue[i]) {
                    $scope.ageError = true;
                    break;
                }
                else if (parseInt($scope.dataValue[i]) == 0) {
                    $scope.ageError = true;
                    break;
                }
            }
            if (i > $scope.selectedTravellers) {
                $scope.ageError = false;
            }
        }

        $scope.addMember = function () {
            $scope.selectedTravellers = $scope.selectedTravellers + 1;
            $scope.TotalMembers.push({ id: $scope.selectedTravellers });
            $scope.dataValue[$scope.selectedTravellers] = "";
        }
        $scope.showsecondpopup = function () {
            if (validatecontrolsoncontinue()) {
                $scope.travelProceedBtnLoader = false;
                $scope.$root.travelfirstpop = false;
                $scope.$root.travelsecondpop = true;
                $scope.template("TravelEdit1", false);
                $scope.template("TravelEdit2", true);

                //             $scope.travelpopFirst = "bounceOut bounceOutLeft";
                //             $scope.travelpopSecond = "bounceInRight";
            }
            $scope.travelProceedBtnLoader = false;
        }
        function validatecontrolsoncontinue() {
            $scope.travelProceedBtnLoader = true;
            $scope.formtraveldestinations = undefined;
            $scope.formtravelstartdate = undefined;
            $scope.datedifferror = false;
            $scope.formtravelenddate = undefined;
            if ($scope.destinationList.length == 0) {
                $scope.DestinationError = true;
                return false;
            }
            else {
                $scope.MaxDestinationError = false;
                for (i = 0; i < $scope.destinationList.length; i++) {
                    if ($scope.formtraveldestinations == undefined) {
                        $scope.formtraveldestinations = $scope.destinationList[i].value;
                        $scope.formtraveldestinationsName = $scope.destinationList[i].text;
                    }
                    else {
                        $scope.formtraveldestinations = $scope.formtraveldestinations + ',' + $scope.destinationList[i].value;
                        $scope.formtraveldestinationsName = $scope.formtraveldestinationsName + ', ' + $scope.destinationList[i].text;
                    }
                }
                $scope.txtTravelDestinations = $scope.formtraveldestinations;
                $scope.txtTravelDestinationsName = $scope.formtraveldestinationsName;
            }
            if ($scope.travelStartDate == undefined || $scope.travelStartDate == "") {
                $scope.startdateError = true;
            }
            else {
                $scope.startdateError = false;
            }
            if ($scope.travelEndDate == undefined || $scope.travelEndDate == "") {
                $scope.enddateError = true;
            }
            else if (new Date($scope.travelStartDate) > new Date($scope.travelEndDate)) {
                $scope.datedifferror = true;
                $scope.enddateError = false;
            }
            else {
                $scope.enddateError = false;
                $scope.formtravelstartdate = $scope.travelStartDate;
                $scope.formtravelenddate = $scope.travelEndDate;
                $scope.txtTravelStartDate = $scope.travelStartDate;
                $scope.txtTravelendDate = $scope.travelEndDate;
                //                $scope.formtravelstartdate = $scope.travelStartDate.toLocaleDateString();
                //                $scope.formtravelenddate = $scope.travelEndDate.toLocaleDateString();
                //                $scope.txtTravelStartDate = $scope.travelStartDate.toLocaleDateString();
                //                $scope.txtTravelendDate = $scope.travelEndDate.toLocaleDateString();
            }
            if ($scope.selectedTravellers == undefined || $scope.selectedTravellers < 1 || $scope.selectedTravellers > 6) {
                $scope.travellerError = true;
                $scope.travellerErrortext = "Enter No of Travellers 1 to 6";
            }
            if ($scope.DestinationError == true || $scope.travellerError == true || $scope.mobileerror == true || $scope.selectedTravellers == undefined || new Date($scope.travelStartDate) > new Date($scope.travelEndDate) || $scope.travelEndDate == undefined || $scope.travelEndDate == "" || $scope.travelStartDate == undefined || $scope.travelStartDate == "") {
                $scope.travelProceedBtnLoader = false;
                return false;
            }
            else {
                return true;
            }
            return true;
        }
        $scope.checkNoOfTravellerError = function (flag) {
            $scope.TotalMembers = [];
            if ($scope.selectedTravellers == undefined || $scope.selectedTravellers < 1 || $scope.selectedTravellers == null || $scope.selectedTravellers == '' || $scope.selectedTravellers > 6) {
                $scope.travellerError = true;
                flag = 1;
                $scope.travellerErrortext = "Enter No of Travellers 1 to 6";
            }

            else {
                $scope.travellerError = false;
                $scope.travellerErrortext = "";
                for (var i = 1; i <= $scope.selectedTravellers; i++) {
                    $scope.TotalMembers.push({ id: i });
                }
            }
        }

        $scope.removeenddatevalidationmessage = function () {
            if ($scope.travelEndDate != undefined) {
                $scope.enddateError = false;
            }
        }
        $scope.SetMaxTravelEndDate = function () {
            if ($scope.travelStartDate != undefined) {
                $scope.travelEndDate = '';
                $scope.datedifferror = false;
                var date3 = new Date($scope.travelStartDate);
                date3.setDate(date3.getDate() + 1);
                $scope.minenddatetravel = date3.getMonth() + 1 + "/" + date3.getDate() + "/" + date3.getFullYear();
                var maxdate = new Date($scope.minenddatetravel);
                maxdate.setDate(maxdate.getDate() + 180);
                $scope.maxenddatetravel = maxdate.getMonth() + 1 + "/" + maxdate.getDate() + "/" + maxdate.getFullYear();
                $scope.travelEndDate1.setMinDate(new Date($scope.minenddatetravel));
                $scope.travelEndDate1.setMaxDate(new Date($scope.maxenddatetravel));
                //             var maxdate = new Date($scope.travelStartDate.getTime());
                //             maxdate.setMonth(maxdate.getMonth() + 6);
                //             $scope.MaxTravelEndDate = maxdate;
                if ($scope.travelStartDate != undefined) {
                    $scope.startdateError = false;
                }
            }
        }

        $scope.AllDestinationlist = function () {
            var urlservice = globals.ServiceURL + '/MasterService.svc/web/GetCountryList';
            var ServiceName = "MasterService.svc";
            var DestinationCountries = CommonService.getCountrylist($scope);
            $timeout(function () {
                if ($scope.TravelCountryListtime == 0) {
                    $scope.TimeOutService("2000", urlservice, ServiceName);
                    $scope.responsenull['GetCountryList'] = 0;
                }
                else {
                    $scope.TravelCountryListtime = 0;
                    $scope.responsenull['GetCountryList'] = 1;
                }
            }, 2000);
            DestinationCountries.then(function (data) {
                var TravelDestination = angular.fromJson(data.data);
                $scope.GetTime['GetCountryList'] = new Date().getTime();
                $scope.TravelCountryListtime = 1;
                if ($scope.responsenull['GetCountryList'] == 0) {
                    $scope.totaltime['GetCountryList'] = parseInt($scope.GetTime['GetCountryList'] - $scope.HitTime['GetCountryList']);
                    $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime['GetCountryList']);
                }
                for (var i = 0; i < TravelDestination.length; i++) {
                    var temp = { destinationId: TravelDestination[i].CountryId, destinationName: TravelDestination[i].Country };
                    $scope.travelDestinations.push(temp);
                }
            }, function (response) {
                ServiceRespnse(response);
            });

        }

        $scope.checkDestinationerror = function () {
            if ($scope.selectedDestinationItem == null || $scope.selectedDestinationItem == undefined || $scope.selectedDestinationItem == '') {
                if ($scope.destinationList.length == 0 || $scope.destinationList == undefined) {
                    $scope.DestinationError = true;
                    $scope.MaxDestinationError = false;
                }
            }
            else if ($scope.destinationList.length >= 10) {
                $scope.MaxDestinationError = true;
            }
            else {
                $scope.DestinationError = false;
                $scope.MaxDestinationError = false;
                for (var i = 0; i < $scope.destinationList.length; i++) {
                    if ($scope.destinationList[i].text == $scope.selectedDestinationItem.destinationName) {
                        $scope.bool = true;
                    }
                }
                if ($scope.bool == false) {
                    $scope.chipvalue = true;
                    $scope.destinationList.push({ text: $scope.selectedDestinationItem.destinationName, value: $scope.selectedDestinationItem.destinationId, done: false });
                }
                else {
                    $scope.bool = false;
                }
                if ($scope.destinationList.length > 0) {
                    $scope.showchips = true;
                }
                else {
                    $scope.showchips = false;
                }
                $scope.selectedDestinationItem = null;
                $scope.searchDestination = '';
            }
        }
        $scope.removedestinationvalidationmessage = function () {
            if ($scope.destinationList.length < 10) {
                $scope.MaxDestinationError = false;
            }
        }
        $scope.bikepolicyexp = function () {
            if (!$scope.bikeexpiredpol) {
                $scope.popbikepolexperror = true;
                $scope.showbikelastclaim = false;
            } else {
                $scope.popbikepolexperror = false;
                $scope.formbikelblpolexp = $scope.bikeexpiredpol;
                $scope.policydate = undefined;
                $scope.policymonth = undefined;
                $scope.policyyear = undefined;
                if ($scope.bikeexpiredpol == 90) {
                    $scope.showbikelastclaim = true;
                    $scope.showexpirydate = false;

                }
                else if ($scope.bikeexpiredpol == 0) {
                    $scope.showbikelastclaim = true;
                    $scope.showexpirydate = true;
                }
                else if ($scope.bikeexpiredpol == 91) {
                    $scope.policyerror = false;
                    $scope.showbikelastclaim = false;
                    $scope.showexpirydate = false;
                }
            }
        }

        $scope.carregyear = function () {
            $scope.popcarregerror = false;
            var temparray = [];
            if ($scope.carreg != undefined && $scope.carreg != '' && $scope.carreg != null) {
                $scope.popcarregerror = false;
                $scope.forcarreg = $scope.carreg;
                var lastclaimtemp = $scope.lastclaimtaken;
                var flag = 0;
                var yeargap = $scope.year - $scope.carreg;
                for (var i = 0; i <= yeargap; i++) {
                    if (lastclaimtemp.length >= i) {
                        temparray.push(lastclaimtemp[i]);
                    }
                }
                if ($scope.carbreakingexp == 1 && $scope.carbreaking == 0) {
                    $scope.showcarncb = false;
                }
                else {
                    $scope.showcarncb = true;
                }

            }
            else {
                $scope.popcarregerror = true;
            }
        }

        $scope.bikeregyear = function (flag) {
            console.log($scope.bikereg);
            if ($scope.bikereg == undefined) {
                $scope.popbikeregerror = true;

            }
            else {
                $scope.popbikeregerror = false;
                $scope.formbikereg = $scope.bikereg;
                var regyeartemp = $scope.regyear1;
                var temparray = [];
                var yeargap = $scope.year - $scope.bikereg;
                for (var i = 0; i <= yeargap; i++) {
                    if (regyeartemp.length >= i) {
                        temparray.push(regyeartemp[i]);
                    }
                }
                $scope.regyear = temparray;

                if (flag != 1) {
                    $scope.bikelastclaim = undefined;
                }


            }
        }

        $scope.bikelastclaimfn = function () {
            if ($scope.bikelastclaim == undefined) {
                $scope.popbikelastclaimerror = true;
            }
            else {
                $scope.popbikelastclaimerror = false;
                $scope.formbikewidgetpercent = $scope.bikelastclaim;


                if ($scope.bikelastclaim == "No~50") {

                    var ncbyear = $scope.year - $scope.bikereg;
                    if (ncbyear > 6) {
                        ncbyear = 6;
                    }
                    $scope.formbikewidgetpercent = $scope.lastclaimlist[ncbyear - 1].value;
                    if (ncbyear == 6) {
                        var nextncb = $scope.lastclaimlist[ncbyear - 1].value.split("~")[1];
                    }
                    else {
                        var nextncb = $scope.lastclaimlist[ncbyear].value.split("~")[1];
                    }

                    var ncbclaimtaken = "false";

                }
                else if ($scope.bikelastclaim == "Yes~0") {
                    $scope.formbikewidgetpercent = $scope.lastclaimlist[0].value;
                    var nextncb = $scope.lastclaimlist[0].value.split("~")[1];
                    var ncbclaimtaken = "true";
                }
                else if ($scope.bikelastclaim == "No~20") {
                    $scope.formbikewidgetpercent = $scope.lastclaimlist[0].value;
                    var nextncb = $scope.lastclaimlist[1].value.split("~")[1];
                    var ncbclaimtaken = "true";
                }
                else if ($scope.bikelastclaim == "No~25") {
                    $scope.formbikewidgetpercent = $scope.lastclaimlist[1].value;
                    var nextncb = $scope.lastclaimlist[2].value.split("~")[1];
                    var ncbclaimtaken = "true";
                }
                else if ($scope.bikelastclaim == "No~35") {
                    $scope.formbikewidgetpercent = $scope.lastclaimlist[2].value;
                    var nextncb = $scope.lastclaimlist[3].value.split("~")[1];
                    var ncbclaimtaken = "true";
                }
                else if ($scope.bikelastclaim == "No~45") {
                    $scope.formbikewidgetpercent = $scope.lastclaimlist[3].value;
                    var nextncb = $scope.lastclaimlist[4].value.split("~")[1];
                    var ncbclaimtaken = "true";
                }
                if ($scope.formbikewidgetpercent == "Yes~0" && $scope.bikelastclaim == "No~50") {
                    $scope.formbikewidgetpercent = "No~0"
                }


            }
        }
        $scope.bikecitylist = function () {
            var urlservice = globals.ServiceURL + "/MasterService.svc/web/GetTWRTOList";
            $scope.bikertoapilist = CommonService.bikertoservice($scope);
            var ServiceName = "MasterService";
            $timeout(function () {
                if ($scope.BikeRTOtime == 0) {
                    $scope.TimeOutService("2000", urlservice, ServiceName);
                    $scope.responsenull['GetTWRTOList'] = 0;
                }
                else {
                    $scope.BikeRTOtime = 0;
                    $scope.responsenull['GetTWRTOList'] = 1;
                }
            }, 2000);
            $scope.bikertoapilist.then(function (result) {
                result.data = angular.fromJson(result.data);
                $scope.bikertoapidata = result.data;
                $scope.GetTime['GetTWRTOList'] = new Date().getTime();
                $scope.BikeRTOtime = 1;
                if ($scope.responsenull['GetTWRTOList'] == 0) {
                    $scope.totaltime['GetTWRTOList'] = parseInt($scope.GetTime['GetTWRTOList'] - $scope.HitTime['GetTWRTOList']);
                    $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime['GetTWRTOList']);
                }
                $scope.bikecitystate1 = [];
                for (var i = 0; i < $scope.bikertoapidata.length; i++) {
                    var temp = { cityid: $scope.bikertoapidata[i].CityId, stateid: $scope.bikertoapidata[i].StateId, RTOCode: $scope.bikertoapidata[i].RTOCode, cityname: $scope.bikertoapidata[i].RTOCity };
                    $scope.bikecitystate1.push(temp);
                }
                $scope.bikecitystate = [{ cityid: "123", stateid: "10", RTOCode: "DL3S", cityname: "(DL3S) Delhi-Sheikh Sarai,Delhi" }, { cityid: "121", stateid: "10", RTOCode: "DL1S", cityname: "(DL1S) Delhi-Mall Road,Delhi" }, { cityid: "662", stateid: "34", RTOCode: "UP14", cityname: "(UP14) Ghaziabad,Uttar Pradesh" }, { cityid: "192", stateid: "13", RTOCode: "HR26", cityname: "(HR26) Gurgaon,Haryana" }, { cityid: "572", stateid: "29", RTOCode: "RJ14", cityname: "(RJ14) Jaipur,Rajasthan" }, { cityid: "1046", stateid: "21", RTOCode: "MH47", cityname: "(MH47) Mumbai,Maharashtra" }, { cityid: "597", stateid: "31", RTOCode: "TN01", cityname: "(TN01) Chennai,TAMILNADU" }, { cityid: "140", stateid: "12", RTOCode: "GJ01", cityname: "(GJ01) Ahmedabad,Gujarat" }, { cityid: "730", stateid: "35", RTOCode: "WB02", cityname: "(WB02) Kolkata,West Bengal" }, { cityid: "416", stateid: "21", RTOCode: "MH12", cityname: "(MH12) Pune,Maharashtra" }, { cityid: "959", stateid: "17", RTOCode: "KA41", cityname: "(KA41) Bangalore,Karnataka" }, { cityid: "9", stateid: "2", RTOCode: "AP09", cityname: "(AP09) Hyderabad,Andhra Pradesh" }];
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        $scope.checkbikertoerror = function (flag) {
            console.log($scope.selectedbikerto);
            $scope.bikertoerror = false;
            if ($scope.selectedbikerto == null || $scope.selectedbikerto == undefined || $scope.selectedbikerto == '') {
                $scope.bikertoerror = true;
            }
            else {
                $scope.bikertoerror = false;
                $scope.formbikerto = $scope.selectedbikerto.cityname;
            }
        }

        $scope.updatedallbikerto = function () {
            console.log($scope.bikecitystate1);
            $scope.bikecitystate = $scope.bikecitystate1;
        }
        $scope.checkbikelisterror = function (flag) {
            console.log($scope.selectedbikemmv);
            if ($scope.selectedbikemmv == null || $scope.selectedbikemmv == undefined || $scope.selectedbikemmv == '') {
                $scope.biketexterror = true;
            }
            else {
                $scope.biketexterror = false;
                $scope.formbikewidget = $scope.selectedbikemmv.bikename;
            }
        }

        $scope.testtmp = function () {
            scroll = window.pageYOffset;
            $scope.ngheight = $("#nview").height();
            if (scroll > 500) {
                $scope.stickside = "stickside"
            } else {
                $scope.stickside = ""
            }
            if (scroll > 80) {
                $scope.sticksidepos = "sticksidepos";
                $scope.nostickyb = "";
                $scope.prescrl = scroll;
                $scope.scrollch = false;
            } else {
                if ($scope.prescrl > 200) {
                    $scope.sticksidepos = "sticksidepos";
                    $scope.scrollch = false;
                }
                else if ($scope.prescrl - scroll >= 0 && $scope.prescrl - scroll < 60) {
                    $scope.scrollch = true;

                }

                if ($scope.scrollch == true && scroll == 0) {
                    $scope.sticksidepos = "";
                }

                // var vf = $scope.prescrl - 600;
                //  $scope.nostickyb = {
                //    "position": "relative",
                //  "transform": "translate3d(0px, " + vf + "px, 0px)"
                // }
            }
            if (scroll >= 52) {
                $scope.stickit = "stickit";
                $scope.stickitnext = "stickitnext"
            } else {
                $scope.stickit = ""
            }
            if (scroll > previousScroll) {
                previousScroll = scroll;
                $scope.xyz = "afterstyle"
            } else if (scroll < previousScroll) {
                previousScroll = scroll;
                $scope.xyz = ""
            }

            if ($scope.ngheight > 900) {
                var hn = 750
            } else {
                var hn = 600
            }
            if ($scope.Quotes_Data != undefined) {
                if ($scope.Quotes_Data.length > 4) {
                    if ($scope.ngheight - scroll <= hn) {
                        if (hn - ($scope.ngheight - scroll) > 300) {
                            var hh = 300
                        } else {
                            var hh = hn - ($scope.ngheight - scroll)
                        }
                        $scope.nostickyb = {
                            "margin-bottom": hh
                        }
                    }
                } else {
                    $scope.nostickyb = {
                        "position": "relative"
                    }
                }
            }
        }


        $scope.bikealldatalist = function () {
            var urlservice = globals.ServiceURL + "/MasterService.svc/web/GetTWModelList";
            $scope.bikemakemodelapilist = CommonService.bikemakemodelservice($scope);
            var ServiceName = "MasterService";
            $timeout(function () {
                if ($scope.BikeMakeModeltime == 0) {
                    $scope.TimeOutService("2000", urlservice, ServiceName);
                    $scope.responsenull['GetTWModelList'] = 0;
                }
                else {
                    $scope.BikeMakeModeltime = 0;
                    $scope.responsenull['GetTWModelList'] = 1;
                }
            }, 2000);
            $scope.bikemakemodelapilist.then(function (result) {
                result.data = angular.fromJson(result.data);
                $scope.bikemakemodelapidata = result.data;
                $scope.GetTime['GetTWModelList'] = new Date().getTime();
                $scope.BikeMakeModeltime = 1;
                if ($scope.responsenull['GetTWModelList'] == 0) {
                    $scope.totaltime['GetTWModelList'] = parseInt($scope.GetTime['GetTWModelList'] - $scope.HitTime['GetTWModelList']);
                    $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime['GetTWModelList']);
                }
                console.log("jainbike");
                $scope.bikecitystates1 = [];

                for (var i = 0; i < $scope.bikemakemodelapidata.length; i++) {
                    var temp = { bikename: $scope.bikemakemodelapidata[i].ModelName, makeid: $scope.bikemakemodelapidata[i].MakeId, modelid: $scope.bikemakemodelapidata[i].ModelId };
                    $scope.bikecitystates1.push(temp);
                }
                console.log($scope.bikecitystates1);
                $scope.bikecitystates = [{ bikename: "BAJAJ PULSAR 150 CC, Petrol, 2, 150", makeid: "3", modelid: "84" }, { bikename: "ROYAL ENFIELD CLASSIC 500, Petrol, 2, 499", makeid: "10", modelid: "31" }, { bikename: "BAJAJ DISCOVER 125 CC, Petrol, 2, 125", makeid: "3", modelid: "57" }, { bikename: "BAJAJ AVENGER 200 CC, Petrol, 2, 200", makeid: "3", modelid: "103" }, { bikename: "HERO HONDA PASSION PRO KICK, Petrol, 2, 97", makeid: "2", modelid: "376" }, { bikename: "HERO HONDA SPLENDOR SP EDITION, Petrol, 2, 125", makeid: "2", modelid: "448" }, { bikename: "TVS JUPITER STALLION, Petrol, 2, 110", makeid: "4", modelid: "470" }, { bikename: "TVS APACHE RTR 160 CC, Petrol, 2, 160", makeid: "4", modelid: "404" }, { bikename: "HERO HONDA CD DELUXE SPOKE, Petrol, 2, 100", makeid: "2", modelid: "452" }, { bikename: "YAMAHA FZ V2, Petrol, 2, 153", makeid: "1", modelid: "552" }, { bikename: "HONDA CB UNICORN 160 2ID, Petrol, 2, 160", makeid: "11", modelid: "179" }, { bikename: "HONDA ACTIVA 110 CC, Petrol, 2, 109", makeid: "11", modelid: "49" }, { bikename: "HONDA ACTIVA DISC 125, Petrol, 2, 125", makeid: "11", modelid: "55" }];
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        $scope.updatedallbikelist = function () {
            $scope.bikecitystates = $scope.bikecitystates1;
        }
        $scope.checkincomeerror = function (flag) {
            if (flag == "child") {
                if ($scope.childincometype == undefined || $scope.childincometype == null || $scope.childincometype == "") {
                    $scope.incomeerror = true;
                }
                else {
                    $scope.incomeerror = false;
                }
            }
            else {
                if (flag == 'pension') {
                    $scope.selectedincome = $scope.payMode;
                }
                if ($scope.selectedincome == undefined || $scope.selectedincome == '' || $scope.selectedincome == null) {
                    $scope.incomeerror = true;
                    flag = 1;
                }
                else {
                    $scope.incomeerror = false;
                    $scope.forminvestamtvalue = $scope.selectedincome;
                    $scope.formsuminsured = $scope.selectedincome;

                }
            }
        }
        $scope.nonTermvalidate = function (value, flag) {
            var income = parseInt(value);
            if (flag == 'child') {
                $scope.incomeerror = false;
                if (value == undefined || value == null || value == '') {
                    $scope.incomeerror = true;
                }
                if ($scope.childincometype == undefined || $scope.childincometype == null || $scope.childincometype == "") {
                    $scope.incomeerror = true;
                }
                if (($scope.childincometype == 'M' || $scope.childincometype == 'Monthly') && income < 500 || ($scope.childincometype == 'Y' || $scope.childincometype == 'Yearly') && income < 5000) {
                    flag = 0;
                    $scope.incomeerror = true;
                }
                else if (($scope.childincometype == 'M' || $scope.childincometype == 'Monthly') && income > 41666 || ($scope.childincometype == 'Y' || $scope.childincometype == 'Yearly') && income > 500000) {
                    flag = 0;
                    $scope.incomeerror = true;
                }
            }
            else if (flag == 'pension') {
                if (value == undefined || value == null || value == '') {
                    $scope.annualerror = true;
                }
                else {
                    $scope.annualerror = false;
                }
                if (($scope.selectedincome == 'M' || $scope.selectedincome == 'Monthly') && income < 500 || ($scope.selectedincome == 'Y' || $scope.selectedincome == 'Yearly') && income < 5000) {
                    flag = 0;
                    $scope.paymenterror = true;
                }
                else if (($scope.selectedincome == 'M' || $scope.selectedincome == 'Monthly') && income > 41666 || ($scope.selectedincome == 'Y' || $scope.selectedincome == 'Yearly') && income > 500000) {
                    flag = 0;
                    $scope.paymenterror = true;
                }

                else {
                    $scope.paymenterror = false;
                }
            }
            else {
                if (value == undefined || value == null || value == '') {
                    $scope.annualerror = true;
                }
                else {
                    $scope.annualerror = false;
                }
                if (($scope.selectedincome == 'M' || $scope.selectedincome == 'Monthly') && income < 500 || ($scope.selectedincome == 'Y' || $scope.selectedincome == 'Yearly') && income < 5000) {
                    flag = 0;
                    $scope.paymenterror = true;
                }
                else if (($scope.selectedincome == 'M' || $scope.selectedincome == 'Monthly') && income > 416666 || ($scope.selectedincome == 'Y' || $scope.selectedincome == 'Yearly') && income > 5000000) {
                    flag = 0;
                    $scope.paymenterror = true;
                }

                else {
                    $scope.paymenterror = false;
                }
            }
        }
        $scope.getSumAssuredlist = function (userincome) {
            TermFactory.GetSumAssuredlist($scope, userincome.ActualIncomeValue);
            var sumassured = $scope.SumAssured;
            var Value = null;
            for (i = 0; i < $scope.sumassuredlist.length; i++) {
                var getarrayValue = $scope.sumassuredlist[i].sumassuredtext.split(' ');
                if (sumassured == $scope.sumassuredlist[i].summassuredvalue) {
                    Value = $scope.sumassuredlist[i].sumassuredtext
                }
            }
            if (Value != null)
                $scope.sumassured = Value;
            $scope.noshowloader = false;
            $scope.showloader = true;
            $scope.Quotes_Data = undefined;
            $scope.quotesdatatemp = undefined;
            $scope.quotesdata = undefined;
            $scope.quotesdatatemp1 = undefined;

            DataFactory.termrequestdata($scope, 2);
            $scope.$root.popuptermpage = false;
            $scope.template("TermEdit", false);
            $scope.lazyloadcycle = 0;
            $scope.Initialzedata();

        }

        $scope.checkadulterror = function (flag) {
            if ($scope.selectedadult == undefined) {
                $scope.selectedadult = '1';
                $scope.adulterrortext = ""
            }
            else if ($scope.selectedadult == '' || parseInt($scope.selectedadult) > 2 || parseInt($scope.selectedadult) == 0) {
                $scope.adulterror = true;
                flag = 1;
                $scope.adulterrortext = "No of Adult 1 or 2";
            }

            else {
                $scope.adulterror = false;
                $scope.adulterrortext = ""
            }
        }

        $scope.checkchilderror = function (flag) {
            if ($scope.selectedchild == undefined) {
                $scope.selectedchild = '0';
                $scope.childerrortext = ""
            }
            else if ($scope.selectedchild == '' || parseInt($scope.selectedchild) > 4) {
                $scope.childerror = true;
                flag = 1;
                $scope.childerrortext = "No of Child(ren) 0 - 4";
            }
            else {
                $scope.childerror = false;
                $scope.childerrortext = ""
            }
        }

        $scope.checksmoker = function (gen, check) {
            if (gen == 'y' || gen == 'n' || gen == 'Y' || gen == 'N') {
                if (gen.toLowerCase() == 'n') {
                    $scope.Spousenosmokeclass = "lmbutton activebt";
                    $scope.Spousesmokeclass = "lmbutton";
                    $scope.Spousesmoker = "no";
                }
                else if (gen.toLowerCase() == 'y') {
                    $scope.Spousenosmokeclass = "lmbutton";
                    $scope.Spousesmokeclass = "lmbutton activebt";
                    $scope.Spousesmoker = "yes";
                }
            }
            else {
                $scope.SmokeMsg = true;
                $scope.gndrmsg = false;
                $scope.AgeMsg = false;
                if (gen == 0) {
                    $scope.nosmokeclass = "lmbutton activebt";
                    $scope.smokeclass = "lmbutton";
                    $scope.smoker = "no";
                    $scope.formtobacco = "False";
                }
                else if (gen == 1) {
                    $scope.nosmokeclass = "lmbutton";
                    $scope.smokeclass = "lmbutton activebt";
                    $scope.smoker = "yes";
                    $scope.formtobacco = "True";
                }

                if (check == 1) {
                    $scope.getNewTermQuotes('smoker');
                }
            }
        }

        $scope.checkgender = function (gen, check) {
            $scope.gndrmsg = true;
            $scope.SmokeMsg = false;
            $scope.AgeMsg = false;
            if (gen == 0) {
                $scope.maleclass = "lmbutton activebt";
                $scope.femaleclass = "lmbutton";
                $scope.gender = "M";
                $scope.formgender = "M";
            }
            else if (gen == 1) {
                $scope.maleclass = "lmbutton";
                $scope.femaleclass = "lmbutton  activebt";
                $scope.gender = "F";
                $scope.formgender = "F";
            }

        }

        $scope.historyback = function (flag) {
            if (flag == "edit") {
                $rootScope.editviewflag = 0;
                $location.search("editsearch", null);
                window.history.back();
            }
            else if (flag == "c2c") {
                $rootScope.c2cviewflag = 0;
                $location.search("callsearch", null);
                window.history.back();
            }
            else if (flag == "filter") {
                $rootScope.filterviewflag = 0;
                $location.search("filterpop", null);
                window.history.back();
            }
            else if (flag == "sort") {
                $rootScope.sortviewflag = 0;
                $location.search("sortpop", null);
                window.history.back();
            }
            else if (flag == "plantype") {
                $rootScope.plantypeviewflag = 0;
                $location.search("plantypepop", null);
                window.history.back();
            }
            else if (flag == "viewmore") {
                $rootScope.moreinfoviewflag = 0;
                $location.search("viewmore", null);
                $location.search("comparepop", null);
                $rootScope.compareviewflag = 0;
                window.history.back();
            }

            else if (flag == "premiumbreak") {
                $location.search("PremiumBreakup", null);
                $rootScope.premiumviewflag = 0;
                window.history.back();
            }
            else if (flag == "lead") {
                $location.search("Leadpop", null);
                $rootScope.leadpopviewflag = 0;
                window.history.back();
            }
        }
        $scope.closecomparebuypop = function () {
            $rootScope.exitfrompage = 1;
            $scope.historyback("edit");
            $scope.$root.showNavbar = true;
            $scope.$root.popupbikepage = false;
            $scope.$root.popuphealthpage = false;
            $scope.$root.popuptermpage = false;
            $scope.$root.popupcarpage = false
            $scope.$root.popupchildpage = false;
            $scope.$root.popupinvestmentpage = false;
            $scope.$root.popuppensionpage = false;
            $scope.$root.popuptravelpage = false;
            $scope.$root.travelfirstpop = false;
            $scope.$root.travelsecondpop = false;
            $scope.$root.comparebuypop = false;
            $rootScope.comparebuypopAnimation = "out fadeOutDownBig";
            $scope.openmaintabform = "out fadeOutDownBig";
            $rootScope.productpop = "display-none";
            $scope.$root.scrollhide = ' ';

            //$scope.$root.productBox = "display-none";
            //$scope.travelpopSecond = "display-none";
            $scope.htmlScroll = "";
            $scope.template("CarEdit", false);
            $scope.template("TWEdit", false);
            $scope.template("InvestmentEdit", false);
            $scope.template("TermEdit", false);
            $scope.template("TravelEdit1", false);
            $scope.template("TravelEdit2", false);
            $scope.template("PensionEdit", false);
            $scope.template("HealthEdit", false);
            $scope.template("ChildEdit", false);
            if ($location.$$search.editsearch) {
                delete $location.$$search.editsearch;
                $location.$$compose();
            }
        }
        $scope.closemblpop = function (item, flag, flag1) {
            if ($scope.productID == 3) {
                $scope.showcityURL = '../HomePage/Template/Showcitypop.html';
            }
            else if ($scope.productID == 2) {
                $scope.showcityURL = '../HomePage/Template/HealthMobileForm.html';
            }
            else if ($scope.productID == 1) {
                $scope.showcityURL = '../HomePage/Template/TravelMobileForm.html';
            }
            else if ($scope.productID == 4) {
                $scope.showcityURL = '../HomePage/Template/CarMobileform.html';
            }
            else if ($scope.productID == 8) {
                $scope.showcityURL = '../HomePage/Template/TwMobileForm.html';
            }
            else if ($scope.productID == 9) {
                $scope.showcityURL = '../HomePage/Template/CrticalMobileForm.html';
            }
            $scope.gndrmsg = false;
            $scope.SmokeMsg = false;
            $rootScope.scrollhide = 'scollClass';
            if (item == 1) {
                $rootScope.scrollhide = '';
                $scope.selectedIncomeMonthlypop = false;
                $scope.showcitypop = false;
                $scope.carmakemblpop = false;
                $scope.citymblpop = false;
                $scope.carrtomblpop = false;
                $scope.bikemakemblpop = false;
                $rootScope.myInputFocus = false;
                $scope.bikertomblpop = false;
                $scope.termsumassuredmblpop = false;
                $scope.healthsumassuredmblpop = false;
                $scope.NetworkHospitalShow = false;
                $scope.termannualmblpop = false;
                $scope.traveldestination = false;
                $location.search("editdata", null);
                $rootScope.editdataviewflag = 0;
                if (flag != 0)
                    window.history.back();
            }
            if (item == 2 && flag1 != 0) {
                $location.search("editdata", "true");
                $rootScope.editdataviewflag = 1;
            }
            if (flag1 == 0) {
                $location.search("editdata", null);
                $rootScope.editdataviewflag = 0;
                window.history.back();
            }

            if (flag == 1) {

                if (item == 2) {
                    $rootScope.myInputFocus = true;
                    $scope.showcitypop = true;
                    $scope.citymblpop = true;
                }
                else {
                    $scope.showcitypop = false;
                    $scope.citymblpop = false;
                    $scope.selectedItem2 = item;
                    $scope.selectedcitynampop = item.cityname;
                    $scope.GetPincodeFn($parent.selectedItem2, 'edit')
                    $scope.checkcityerrors();
                }
            }
            if (flag == 2) {
                if (item == 2) {
                    $scope.showcitypop = true;
                    $scope.carmakemblpop = true;
                    $scope.myInputFocusCarMake = true;
                }
                else {
                    $scope.showcitypop = false;
                    $scope.carmakemblpop = false;
                    $scope.selectedItem = item;
                    $scope.selectedcarmakepop = item.ModelName;
                    $scope.checkcarerror();
                }
            }
            if (flag == 3) {
                if (item == 2) {
                    $scope.showcitypop = true;
                    $scope.carrtomblpop = true;
                    $scope.myInputFocusCarRto = true;

                }
                else {
                    $scope.showcitypop = false;
                    $scope.carrtomblpop = false;
                    $scope.selectedItem1 = item;
                    $scope.selectedcarrtopop = item.RTOCode;
                    $scope.checkcityerror();
                }
            }
            if (flag == 4) {
                if (item == 2) {
                    $scope.showcitypop = true;
                    $scope.bikemakemblpop = true;
                    $scope.myInputFocusBikeMake = true;
                }
                else {
                    $scope.showcitypop = false;
                    $scope.bikemakemblpop = false;
                    $scope.selectedbikemmv = item;
                    $scope.selectedbikemakepop = item.bikename;
                    $scope.checkbikelisterror();
                }
            }
            if (flag == 5) {
                if (item == 2) {
                    $scope.showcitypop = true;
                    $scope.bikertomblpop = true;
                    $scope.myInputFocusBikeRto = true;
                }
                else {
                    $scope.showcitypop = false;
                    $scope.bikertomblpop = false;
                    $scope.selectedbikerto = item;
                    $scope.selectedbikertopop = item.cityname;
                    $scope.checkbikertoerror();
                }
            }
            if (flag == 6) {
                if (item == 2) {
                    $scope.showcitypop = true;
                    $scope.termannualmblpop = true;
                    $scope.myInputFocusTermIncome = true;
                    $scope.updateincome();
                }
                else {
                    $scope.showcitypop = false;
                    $scope.termannualmblpop = false;
                    $scope.txtActualIncome = item;
                    $scope.selectedtermincomepop = item.ActualIncomeText;
                    $scope.checktermincomeerror();

                }
            }
            if (flag == 7) {
                if (item == 2) {
                    $scope.showcitypop = true;
                    $scope.traveldestination = true;
                    $scope.myInputFocustravellingdest = true;
                    $scope.$root.travelfirstpop = false;
                }
                else {
                    $scope.showcitypop = false;
                    $scope.traveldestination = false;
                    $scope.selectedDestinationItem = item;
                    //$scope.selectedDestination = item.destinationName;
                    $scope.$root.travelfirstpop = true;
                    $scope.searchText07 = undefined;
                    $scope.checkDestinationerror();
                }
            }
            if (flag == 8) {
                if (item == 2) {
                    $scope.showcitypop = true;
                    $scope.termsumassuredmblpop = true;
                    $scope.myInputFocusTermsumassured = true;
                }
                else {
                    $scope.searchTextsum = '';
                    $scope.showcitypop = false;
                    $scope.termsumassuredmblpop = false;
                    $rootScope.scrollhide = '';
                    $scope.sumassured = item;
                    $scope.termleftpanel('sumassuredcalculation', item);
                    $scope.sumassured = item.sumassuredtext;
                    var a = 'Sum Assured Mobile ' + $scope.gaProduct;
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

                }
            }
            if (flag == 9) {
                if (item == 2) {
                    $scope.showcitypop = true;
                    $scope.criticalsumassuredmblpop = true;
                    $scope.myInputFocuscriticalsumassured = true;
                }
                else {
                    $scope.showcitypop = false;
                    $scope.criticalsumassuredmblpop = false;
                    $scope.sumassured = item;
                    $scope.criticalleftpanel('sumassuredcalculation', item);
                    $scope.sumassured = item.sumassuredtext;
                }
            }
            if (flag == 10) {
                if (item == 2) {
                    var a = 'Sum Assured Mobile ' + $scope.gaProduct;
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

                    $scope.showcitypop = true;
                    $scope.healthsumassuredmblpop = true;
                    $scope.myInputFocushealthsumassured = true;
                }
                else {
                    $scope.showcitypop = false;
                    $scope.healthsumassuredmblpop = false;
                    $scope.HealthSumInsurednew = item;
                    $scope.HealthSumInsuredmobile = item.sumassuredtext;
                    $scope.healthleftpanel(1);
                }
            }
            if (flag == 'hospital') {
                if (item == 2) {

                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'Network Hospital Mobile', value: $scope.productID });

                    $scope.showcitypop = true;
                    $scope.NetworkHospitalShow = true;
                    $scope.myInputFocusNetworkHospital = true;
                }
                else {
                    $scope.Hospitalname = item.NetworkHospitalName;
                    $scope.showcitypop = false;
                    $scope.NetworkHospitalShow = false;
                    $scope.user.Network_Hospital = item;
                }
            }
            if (flag == 'monthlyincomediy') {
                if (item == 2) {
                    $scope.showcitypop = true;
                    $scope.selectedIncomeMonthlypop = true;
                    $scope.myInputFocusselectedIncomeMonthly = true;
                }
                else {
                    $scope.showcitypop = false;
                    $scope.selectedIncomeMonthlypop = false;
                    $scope.selectedItem3 = item;
                    $scope.incomeMonthlypayout = item;
                    $rootScope.scrollhide = '';
                    $scope.selectedIncomeMonthly = item.incometext;
                    $scope.setmonthlyincome(item, 'leftpanel');
                }
            }
        }
        $scope.checktermincomeerror = function () {

            if ($scope.txtActualIncome != undefined && $scope.txtActualIncome != '' && $scope.txtActualIncome != null) {
                $scope.annualerror = false;
                var arr = $scope.txtActualIncome.ActualIncomeText.split(" ");
                if (arr[1].toLowerCase() == "cr") {
                    $scope.txtActualIncome.ActualIncomeValue = Math.ceil(parseFloat(arr[0]) * 10000000);
                } else {
                    $scope.txtActualIncome.ActualIncomeValue = Math.ceil(parseFloat(arr[0]) * 100000);
                }

                $scope.validatedot($scope.txtActualIncome.ActualIncomeValue);
            }
            else {
                $scope.annualerror = true;
            }
        }

        $scope.commoncity1 = function (flag) {
            if (flag == 1) {
                $scope.CityValue = false;
            }
            else {
                $scope.CityValue = true;
            }
            $scope.citylisttemp = CommonService.citylist($scope);
            $scope.citylisttemp.then(function (result) {
                console.log("Cities List");
                console.log(result);
                result.data = angular.fromJson(result.data);
                var commoncitylist11 = result.data;
                $scope.commoncitystate = [];
                for (var i = 0; i < commoncitylist11.length; i++) {
                    var temp = { cityid: commoncitylist11[i].CityId + ", " + commoncitylist11[i].StateId, cityname: commoncitylist11[i].City + ", " + commoncitylist11[i].State, cityCategory: commoncitylist11[i].CityCategory };
                    $scope.commoncitystate.push(temp);
                }
                var cities = $filter('orderBy')($scope.commoncitystate, 'cityname');
                $scope.commoncitystate = cities;
                if (flag == 1) {
                    //commoncitylist11 = $filter('filter')($scope.commoncitystate, { cityname: $scope.searchText });
                    var letterMatch = new RegExp($scope.searchText, 'i');
                    for (var i = 0; i < $scope.commoncitystate.length; i++) {
                        if (letterMatch.test($scope.commoncitystate[i].cityname.replace(',', '').substring(0, $scope.searchText.length))) {
                            commoncitylist11.push($scope.commoncitystate[i]);
                        }
                    }
                    if (commoncitylist11.length == 0) {
                        $scope.citymatch = "Not match found......";
                    }
                    else {
                        $scope.citymatch = " We are fetching more cities.Continue Typing your city name...";
                    }
                }

            }, function (response) {
                ServiceRespnse(response);
            });

            $scope.cityplaceholder = "Type and select city...";
            $scope.disablecity = false;

        }

        $scope.updatedallcity = function () {
            //var test = $filter('filter')($scope.commoncitystate, { cityname: $scope.searchText });
            var test = [];
            var letterMatch = new RegExp($scope.searchText, 'i');
            for (var i = 0; i < $scope.commoncitystate.length; i++) {
                if (letterMatch.test($scope.commoncitystate[i].cityname.replace(',', '').substring(0, $scope.searchText.length))) {
                    test.push($scope.commoncitystate[i]);
                }
            }
            if (test.length == 0 && $scope.CityValue == true) {
                $scope.commoncity1(1);
            }
            else if (test.length == 0 && $scope.CityValue == false) {
                $scope.citymatch = "Not match found......";
            }
            return test;
        }
        $scope.updateincome = function () {
            TermFactory.userActualIncome($scope);
        }

        $scope.checkcityerrors = function (flag) {
            $scope.cityerror = false;
            $scope.citylabel = true;
            if ($scope.selectedItem2 == null || $scope.selectedItem2 == '' || $scope.selectedItem2 == undefined) {
                flag = 1;
                // $scope.cityerror = true;
            }
            else {
                $scope.cityerror = false;
                $scope.formcity = $scope.selectedItem2.cityname;
                $scope.cityid = $scope.selectedItem2.cityid.split(',')[0].toString();
            }
        }
        $scope.checkcityerror = function (flag) {
            $scope.cityerror = false;
            $scope.citylabel = true;
            if ($scope.selectedItem1 == null || $scope.selectedItem1 == undefined || $scope.selectedItem1 == undefined) {
                flag = 1;
                $scope.citylabel = false;
                // $scope.cityerror = true;
            }
            else {
                $scope.cityerror = false;
                $scope.citylabel = true;
                $scope.formcarrto = $scope.selectedItem1.CityName;
                console.log("carrto");
            }
        }

        $scope.updatedallcarrto = function () {
            $scope.citystate = $scope.citystate1;

        }
        $scope.updatedallcarlist = function () {
            $scope.carlistdata = $scope.carlistdata1;
        }
        $scope.checkcarerror = function (flag) {
            $scope.carlabel = true;
            $scope.carerror = false;
            if ($scope.selectedItem == null || $scope.selectedItem == undefined || $scope.selectedItem == '') {
                flag = 1;
                $scope.carlabel = false;
                $scope.carerror = true;
            }
            else {
                $scope.carerror = false;
                $scope.carlabel = true;
                $scope.formcarwidget = $scope.selectedItem.ModelName;

                var temp1 = $scope.selectedItem.ModelName.split(",");
                if (temp1[1].trim() == "DIESEL") {
                    $scope.carkitstatus = undefined;
                    $scope.carfuelcontainer = false;
                    $scope.formddlkit = "Kit0";
                    $scope.$root.entercngkitvalue = 0;
                    $scope.$root.carfuelcontainervalue = false;
                }
                else if (temp1[1].trim() == "CNG") {
                    $scope.carkitstatus = undefined;
                    $scope.carfuelcontainer = false;
                    $scope.formddlkit = "Kit0";
                    $scope.carkitstatus = "Kit2";
                }
                else if (temp1[1].trim() == "LPG") {
                    $scope.carkitstatus = undefined;
                    $scope.carcnglpg = $scope.carpoplpg;
                    $scope.carfuelcontainer = false;
                    $scope.carkitstatus = "Kit2";
                }
                else if (temp1[1].trim() == "PETROL") {
                    $scope.carkitstatus = undefined;
                    $scope.carcnglpg = $scope.carpoppetrol;
                    $scope.carfuelcontainer = true;
                }
            }
        }
        $scope.PopulateClaimddl = function () {
            $scope.popcarregerror = false;
            // $scope.carclaim = undefined;
            var d = new Date();
            if ($rootScope.CurrenDateTimeService != undefined) {
                d = new Date($rootScope.CurrenDateTimeService);
            }
            var yyyy = d.getFullYear();
            var nextyy = d.getFullYear() + 1;
            var prevyy = d.getFullYear() - 1;
            var mm = d.getMonth() + 1; // getMonth() is zero-based      
            var dd = d.getDate();
            var nextdd = d.getDate() + 1;
            if (dd < 10) {
                dd = '0' + dd
            }
            if (mm < 10) {
                mm = '0' + mm
            }
            if ($scope.byreg == true) {
                if ($scope.claimtaken == "No~50") {

                    var ncbyear = $scope.year - $scope.carreg;
                    if (ncbyear > 6) {
                        ncbyear = 6;
                    }
                    $scope.carclaim = $scope.lastclaimlist[ncbyear - 1].value;
                    $scope.carclaimtext = $scope.lastclaimlist[ncbyear - 1].text;
                    $scope.forcarwidgetpercent = $scope.carclaim;

                }
                else if ($scope.claimtaken == "Yes~0") {
                    $scope.carclaim = $scope.lastclaimlist[0].value;
                    $scope.forcarwidgetpercent = $scope.carclaim;
                    $scope.carclaimtext = $scope.lastclaimlist[0].text;
                }
                else if ($scope.claimtaken == "No~20") {
                    $scope.carclaim = $scope.lastclaimlist[0].value;
                    $scope.forcarwidgetpercent = $scope.carclaim;
                    $scope.carclaimtext = $scope.lastclaimlist[0].text;
                }
                else if ($scope.claimtaken == "No~25") {
                    $scope.carclaim = $scope.lastclaimlist[1].value;
                    $scope.forcarwidgetpercent = $scope.carclaim;
                    $scope.carclaimtext = $scope.lastclaimlist[1].text;
                }
                else if ($scope.claimtaken == "No~35") {
                    $scope.carclaim = $scope.lastclaimlist[2].value;
                    $scope.forcarwidgetpercent = $scope.carclaim;
                    $scope.carclaimtext = $scope.lastclaimlist[2].text;
                }
                else if ($scope.claimtaken == "No~45") {
                    $scope.carclaim = $scope.lastclaimlist[3].value;
                    $scope.forcarwidgetpercent = $scope.carclaim;
                    $scope.carclaimtext = $scope.lastclaimlist[3].text;
                }

                if ($scope.forcarwidgetpercent == "Yes~0" && $scope.claimtaken == "No~50") {
                    $scope.forcarwidgetpercent = "No~0"
                }
            }
        }
        $scope.regyearlist = [];

        for (i = 1; i <= 14; i++) {
            $scope.regyearlist.push({ value: $scope.year - i, text: $scope.year - i });

        }
        $scope.carclaimchange = function () {
            console.log($scope.carclaim);
            $scope.popcarclaimerror = false;
            if ($scope.carclaim == undefined) {
                // $scope.popcarclaimerror = true;
                flag = 1;
            }
            else {
                $scope.popcarclaimerror = false;
                if ($scope.carreg != undefined) {
                    var ncbyear = $scope.year - $scope.carreg;
                }
                else
                    var ncbyear = $scope.year - $scope.regyear;
                if (ncbyear > 6) {
                    ncbyear = 6;
                    $scope.carrequiredncb = $scope.lastclaimlist[ncbyear - 1].value.split("~")[1];
                }
                else {
                    $scope.carrequiredncb = $scope.lastclaimlist[ncbyear].value.split("~")[1];
                }

                if ($scope.carclaim == "No~50") {
                    $scope.forcarwidgetpercent = $scope.lastclaimlist[ncbyear - 1].value;
                    $scope.carclaimedncb =
                        $scope.lastclaimlist[ncbyear - 1].value.split("~")[1]
                }
                else if ($scope.carclaim == "Yes~0") {
                    $scope.forcarwidgetpercent = $scope.lastclaimlist[0].value;
                    $scope.requiredncbvalue = 0;
                    $scope.carclaimedncb = $scope.lastclaimlist[0].value.split("~")[1];
                    $scope.carrequiredncb = $scope.lastclaimlist[0].value.split("~")[1];
                }
                else if ($scope.carclaim == "No~20") {
                    $scope.forcarwidgetpercent = $scope.lastclaimlist[0].value;
                    $scope.carclaimedncb = $scope.lastclaimlist[0].value.split("~")[1];
                    $scope.carrequiredncb = $scope.lastclaimlist[1].value.split("~")[1];
                }
                else if ($scope.carclaim == "No~25") {
                    $scope.forcarwidgetpercent = $scope.lastclaimlist[1].value;
                    $scope.carclaimedncb = $scope.lastclaimlist[1].value.split("~")[1];
                    $scope.carrequiredncb = $scope.lastclaimlist[2].value.split("~")[1];
                }
                else if ($scope.carclaim == "No~35") {
                    $scope.forcarwidgetpercent = $scope.lastclaimlist[2].value;
                    $scope.carclaimedncb = $scope.lastclaimlist[2].value.split("~")[1];
                    $scope.carrequiredncb = $scope.lastclaimlist[3].value.split("~")[1];
                }
                else if ($scope.carclaim == "No~45") {
                    $scope.forcarwidgetpercent = $scope.lastclaimlist[3].value;
                    $scope.carclaimedncb = $scope.lastclaimlist[3].value.split("~")[1];
                    $scope.carrequiredncb = $scope.lastclaimlist[4].value.split("~")[1];
                }

                if ($scope.forcarwidgetpercent == "Yes~0" && $scope.carclaim == "No~50") {
                    $scope.forcarwidgetpercent = "No~0"
                }

            }
        }
        $scope.carkitchange = function () {
            $scope.popcarcnglpgerror = false;
            if ($scope.carkitstatus == undefined) {
                $scope.popcarcnglpgerror = true;
                flag = 1;
            }
            else {
                $scope.popcarcnglpgerror = false;
                $scope.formddlkit = $scope.carkitstatus;
                if ($scope.carkitstatus == "Kit3") {

                    $scope.$root.carfuelcontainervalue = true;
                    $scope.cngkitdata = "True";
                    $scope.cngkitprice = 20000;
                }
                else {
                    $scope.$root.carfuelcontainervalue = false;
                    $scope.cngkitdata = "False";
                    $scope.cngkitprice = 0;
                }
            }
        }
        $scope.checkcngvalueerror = function () {
            if ($scope.$root.entercngkitvalue < 0) {
                $scope.popcarcnglpgvalueerror = true;
            }
            else {
                $scope.popcarcnglpgvalueerror = false;
            }
        }

        $scope.getcarquotes = function () {


            //    $scope.$root.comparebuypop = false;
            //    $scope.$root.showloader = true;
            $scope.carreg = $scope.carregyear;
            $scope.cityerror = false;
            $scope.showbtncarloader = false;
            if ($scope.lastclaim == 1) {
                $scope.carclaim = "Yes~0";
            }
            var flag = 0;
            if ($scope.carclaim == undefined && $scope.carbreakingexp != 1) {
                $scope.popcarclaimerror = true;
                flag = 1;
            }
            else {
                $scope.popcarclaimerror = false;
            }
            if ($scope.carkitstatus == undefined && $scope.carfuelcontainer == true) {
                $scope.popcarcnglpgerror = true;
                flag = 1;
            }
            else {
                $scope.popcarcnglpgerror = false;
            }
            if ($scope.carreg == undefined) {
                $scope.popcarregerror = true;
                flag = 1;
            }
            else {
                $scope.popcarregerror = false;
            }
            if ($scope.selectedItem == null) {
                $scope.carerror = true;
                flag = 1;
            }
            else {
                $scope.carerror = false;
            }
            if ($scope.selectedItem1 == null && $scope.byreg == false) {
                $scope.cityerror = true;
                flag = 1;
            }
            if ($scope.selectedItem1 == null && $scope.byreg == undefined) {
                $scope.cityerror = true;
                flag = 1;
            }
            if ($scope.$root.entercngkitvalue >= 5000 && $scope.$root.entercngkitvalue <= 50000) {
                $scope.popcarcnglpgvalueerror = false;
            }
            else {
                $scope.popcarcnglpgvalueerror = true;
            }

            if ($scope.$root.carfuelcontainervalue == true && ($scope.$root.entercngkitvalue == undefined || $scope.$root.entercngkitvalue > 50000 || $scope.$root.entercngkitvalue < 5000)) {
                flag = 1;
                $scope.popcarcnglpgvalueerror = true;
            }
            if (flag == 1) {
                $scope.showbtncarloader = false;
            }
            // if ($scope.quotesrequest.Requests[0].InsuranceType != 'TP') {
            if ($scope.carbreakingpol == 0) {
                if ($scope.policyerror == true || !$scope.policydate || !$scope.policymonth || !$scope.policyyear || $scope.policyyear.toString().length < 4) {
                    flag = 1;
                    $scope.policyerror = true;
                }
                else {
                    $scope.prepolicydate1 = $scope.policydate + "-" + $scope.policymonth + "-" + $scope.policyyear;
                    $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate1);
                }
            }
            else if ($scope.carbreakingpol == 90) {
                var temp = new Date();
                temp.setDate(temp.getDate() - 3);

                $scope.policydate = (temp.getDate()) <= 9 ? '0' + (temp.getDate()) : (temp.getDate());
                $scope.policymonth = (temp.getMonth() + 1) <= 9 ? '0' + (temp.getMonth() + 1) : (temp.getMonth() + 1);
                $scope.policyyear = temp.getFullYear();
                $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
                $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate1);
            }
            else if ($scope.carbreakingpol == 91) {
                var temp = new Date();
                temp.setDate(temp.getDate() - 91);

                $scope.policydate = (temp.getDate()) <= 9 ? '0' + (temp.getDate()) : (temp.getDate());
                $scope.policymonth = (temp.getMonth() + 1) <= 9 ? '0' + (temp.getMonth() + 1) : (temp.getMonth() + 1);
                $scope.policyyear = temp.getFullYear();
                $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
                $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate1);
            }
            //if ($scope.policydate == undefined || $scope.policymonth == undefined || $scope.policyyear == undefined) {

            //    if ($scope.carbreakingpol == 90) {
            //        $scope.prepolicydate1 = (new Date().getDate() - 3) + '-' + (new Date().getMonth() + 1) + '-' + new Date().getFullYear();
            //        $scope.policydate = new Date().getDate() - 3;
            //        $scope.policymonth = new Date().getMonth() + 1;
            //        $scope.policyyear = new Date().getFullYear();
            //    }
            //    if ($scope.carbreakingpol == 91) {

            //        var temp = new Date();
            //        temp.setDate(temp.getDate() - 91);
            //        $scope.prepolicydate1 = temp.getDate() + '-' + (temp.getMonth() + 1) + '-' + temp.getFullYear();
            //        $scope.policydate = temp.getDate();
            //        $scope.policymonth = temp.getMonth() + 1;
            //        $scope.policyyear = temp.getFullYear();
            //    }

            //}
            //else {
            //    if ( $scope.carbreakingpol == 90) {
            //        $scope.prepolicydate1 = (new Date().getDate()-3) + '-' + (new Date().getMonth() + 1) + '-' + new Date().getFullYear();
            //        $scope.policydate = new Date().getDate()-3;
            //        $scope.policymonth = new Date().getMonth() + 1;
            //        $scope.policyyear = new Date().getFullYear();
            //    }
            //    if ($scope.carbreakingpol == 91) {

            //        var temp = new Date();
            //        temp.setDate(temp.getDate() - 91);
            //        $scope.prepolicydate1 = temp.getDate() + '-' + (temp.getMonth() + 1) + '-' + temp.getFullYear();
            //        $scope.policydate = temp.getDate();
            //        $scope.policymonth = temp.getMonth() + 1;
            //        $scope.policyyear = temp.getFullYear();
            //    }
            //    if ($scope.carbreakingexp != 1 && $scope.carbreaking != 0) {
            //        $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
            //    }

            //}
            // }
            //else {
            //if ($scope.policydate == undefined || $scope.policymonth == undefined || $scope.policyyear == undefined) {
            //    $scope.prepolicydate1 = new Date().getDate() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getFullYear();
            //    $scope.policydate = new Date().getDate();
            //    $scope.policymonth = new Date().getMonth() + 1;
            //    $scope.policyyear = new Date().getFullYear();
            //}
            //else {
            //    if (($scope.carbreakingpol == 90 || $scope.carbreakingpol == 91)) {
            //        $scope.prepolicydate1 = new Date().getDate() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getFullYear();
            //        $scope.policydate = new Date().getDate();
            //        $scope.policymonth = new Date().getMonth() + 1;
            //        $scope.policyyear = new Date().getFullYear();
            //    }
            //   else{
            //        $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
            //    }

            //}

            // }
            $scope.registrationdate1 = $scope.carregdate + '-' + $scope.carregmonth + '-' + $scope.carregyear;
            if ($scope.quotesrequest.Requests[0].IsNewVehicle != true) {

                if ($scope.carbreakingexp != 1 || $scope.carbreaking != 0) {
                    if ($scope.carregerror == true || $scope.carregdate == undefined || $scope.carregmonth == undefined || $scope.carregyear == undefined || $scope.carregyear.toString().length < 4 || isNaN($scope.carregyear) == true || $scope.carregdate == '' || $scope.carregmonth == '') {
                        flag = 1;
                        $scope.carregerror = true;
                    }
                    else {
                        var errorflag = 0;

                        $scope.carregerror = false;

                        $scope.registrationdate1 = $scope.carregdate + '-' + $scope.carregmonth + '-' + $scope.carregyear;
                        var date1 = new Date($scope.mm + "/" + $scope.dd + "/" + $scope.year);


                    }
                    var regyeardiff = parseInt($scope.carregyear) - parseInt($scope.year);
                    if (regyeardiff < -15 || $scope.carregyear > parseInt($scope.year)) {
                        flag = 1;
                        $scope.carregerror = true;
                    }
                }

            }



            if ($scope.quotesrequest.Requests[0].IsNewVehicle != true) {

                if ($scope.carbreakingexp != 1 && $scope.carbreaking != 0) {
                    if ($scope.policyerror == true || $scope.policydate == undefined || $scope.policymonth == undefined || $scope.policyyear == undefined || $scope.policyyear.toString().length < 4 || isNaN($scope.policyyear) == true || $scope.policymonth == '' || $scope.policydate == '') {
                        flag = 1;
                        $scope.policyerror = true;
                    }

                    else {

                        var errorflag = 0;
                        $scope.policyerror = false;
                        $scope.policyexp = false;
                        $scope.policyexp1 = false;
                        $scope.policyexp2 = false;
                        $scope.policyexp3 = false;
                        //$scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
                        $scope.prepolicydate2 = new Date().getDate() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getFullYear();
                        var date1 = new Date($scope.mm + "/" + $scope.dd + "/" + $scope.year);
                        var date2 = new Date($scope.policymonth + '/' + $scope.policydate + '/' + $scope.policyyear);
                        var diffDays = parseInt((date2 - date1) / (1000 * 60 * 60 * 24));
                        if ($scope.carbreakingpol == 90 || $scope.carbreakingexp == 1 || $scope.carbreaking == 0) {
                            var diffDays = -1;
                        }
                        if (parseInt($scope.year) - parseInt($scope.policyyear) > 10 || parseInt($scope.year) - parseInt($scope.policyyear) < -1) { // new code
                            $scope.policyerror = true;
                            flag = 1;
                        }
                        if ((diffDays > 44 || diffDays < 0) && $scope.carbreakingpol == 0) {
                            errorflag = 1;
                            $scope.policyexp1 = true;
                            $scope.policyexp = false;
                            $scope.policyexp2 = false;
                            $scope.policyexp3 = false;
                        }
                        else if (diffDays < -87 && $scope.carbreakingpol == 90) {
                            errorflag = 1;
                            $scope.policyexp2 = true;
                            $scope.policyexp = false;
                            $scope.policyexp1 = false;
                            $scope.policyexp3 = false;
                        }
                        else if (diffDays > -1 && $scope.carbreakingpol == 90) {
                            errorflag = 1;
                            $scope.policyexp2 = false;
                            $scope.policyexp = false;
                            $scope.policyexp1 = false;
                            $scope.policyexp3 = true;
                        }
                        if (errorflag == 1) {
                            flag = 1;
                        }

                    }

                }

            }

            if (flag == 0) {
                if ($scope.quotesrequest.Requests[0].IsNewVehicle != true) {
                    $scope.quotesrequest.Requests[0].RegistrationDate = DataFactory.convertToJSONDate($scope.registrationdate1);
                    $scope.showpopflag = 1;
                    if ($scope.carbreakingpol == 0 && $scope.prepolicydate1) {
                        $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate1);
                    }
                    else if ($scope.carbreakingpol == 90) {
                        var temp = new Date();
                        temp.setDate(temp.getDate() - 3);

                        $scope.policydate = (temp.getDate()) <= 9 ? '0' + (temp.getDate()) : (temp.getDate());
                        $scope.policymonth = (temp.getMonth() + 1) <= 9 ? '0' + (temp.getMonth() + 1) : (temp.getMonth() + 1);
                        $scope.policyyear = temp.getFullYear();
                        $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
                        $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate1);
                    }
                    else if ($scope.carbreakingpol == 91) {
                        var temp = new Date();
                        temp.setDate(temp.getDate() - 91);

                        $scope.policydate = (temp.getDate()) <= 9 ? '0' + (temp.getDate()) : (temp.getDate());
                        $scope.policymonth = (temp.getMonth() + 1) <= 9 ? '0' + (temp.getMonth() + 1) : (temp.getMonth() + 1);
                        $scope.policyyear = temp.getFullYear();
                        $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
                        $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate1);
                    }

                }
                if ($scope.quotesrequest.Requests[0].InsuranceType == 'TP' && ($scope.quotesrequest.Requests[0].BreakingDays == 91 || $scope.quotesrequest.Requests[0].BreakingDays == 90)) {


                    $scope.NewPolicyDate = new Date(new Date().getMonth() + '/' + new Date().getDate() + '/' + new Date().getFullYear());
                }
                else {
                    $scope.NewPolicyDate = new Date($scope.policymonth + '/' + $scope.policydate + '/' + $scope.policyyear);
                }

                $scope.NewCarregDate = new Date($scope.carregmonth + '/' + $scope.carregdate + '/' + $scope.carregyear);
                $scope.historyback("edit");
                $scope.$root.editregdate = true;
                // $scope.quotesrequest.Requests[0].RegistrationYear = $scope.carregyear;
                $scope.showbtncarloader = true;
                $scope.editcross = true;
                $scope.data11.group1 = 0;
                $scope.quotesrequest.Requests[0].IDV = 0;
                $scope.showidvsuggested = false;
                $scope.suggestedshow = true;
                if ($scope.quotes_userdata.RegYear != $scope.carreg) {
                    $scope.quotes_userdata.RegYear = $scope.carreg;
                    $scope.quotes_userdata.RegistrationYear = $scope.carreg;
                    motorregdate = $scope.quotesrequest.Requests[0].RegistrationDate;
                    //$scope.quotesrequest.Requests[0].RegistrationDate = undefined;
                }

                if (($scope.carbreaking == 1 && (diffDays >= 0 && diffDays <= 45)) || ($scope.carbreaking != 1 && (diffDays >= 0 && diffDays <= 45))) {
                    $scope.quotes_userdata.BreakingDays = 0;
                    $scope.quotesrequest.Requests[0].BreakingDays = 0;

                }
                else if ((($scope.carbreaking == 0 && $scope.carbreakingexp == 0) || (diffDays <= -1 && diffDays >= -90)) && (diffDays > -90)) {
                    $scope.quotes_userdata.BreakingDays = 90;
                    $scope.quotesrequest.Requests[0].BreakingDays = 90;
                    motorpolicyexpdate = $scope.quotesrequest.Requests[0].PreviousPolicyEndDate;
                    $scope.quotesrequest.Requests[0].RegistrationDate = DataFactory.convertToJSONDate($scope.registrationdate1);

                }
                else if (($scope.carbreaking == 0 && $scope.carbreakingexp == 1) || (diffDays < -90)) {
                    $scope.quotes_userdata.BreakingDays = 91;
                    $scope.quotesrequest.Requests[0].BreakingDays = 91;
                    motorpolicyexpdate = $scope.quotesrequest.Requests[0].PreviousPolicyEndDate;
                    //$scope.quotesrequest.Requests[0].PreviousPolicyEndDate = undefined;
                    $scope.quotesrequest.Requests[0].RegistrationDate = DataFactory.convertToJSONDate($scope.registrationdate1);

                }

                if ($scope.quotes_userdata.BreakingDays == 91) {
                    $scope.carclaimedncb = 0;
                    $scope.RequiredNCB = 0;
                    $scope.carclaimtext = "Yes~0";
                    if ($scope.lastclaim == 1) {
                        $scope.ClaimTaken = true;
                    }
                    else {
                        $scope.ClaimTaken = false;
                    }
                }
                else {
                    if ($scope.lastclaim == 1) {
                        $scope.ClaimTaken = true;
                        $scope.carclaimtext = "Yes~0";
                        $scope.carclaimedncb = 0;
                        $scope.RequiredNCB = 0;
                    }
                    else {
                        $scope.ClaimTaken = false;
                        $scope.carclaimtext = $scope.carclaim;
                        $scope.carclaimedncb = $scope.carclaim.split("~")[1];
                        if ($scope.carclaimedncb == 0) {
                            $scope.RequiredNCB = 20;
                        }
                        else if ($scope.carclaimedncb == 20) {
                            $scope.RequiredNCB = 25;
                        }
                        else if ($scope.carclaimedncb == 25) {
                            $scope.RequiredNCB = 35;
                        }
                        else if ($scope.carclaimedncb == 35) {
                            $scope.RequiredNCB = 45;
                        }
                        else if ($scope.carclaimedncb == 45) {
                            $scope.RequiredNCB = 50;
                        }
                        else if ($scope.carclaimedncb == 50) {
                            $scope.RequiredNCB = 50;
                        }
                    }
                }

                $scope.quotes_userdata.ClaimPercent = $scope.carclaim;
                $scope.quotes_userdata.VechileDetails = $scope.selectedItem;
                $scope.quotes_userdata.MotorName = $scope.selectedItem.ModelName;
                $scope.quotes_userdata.ModelId = $scope.selectedItem.ModelId;
                if ($scope.selectedItem1.RTOCode != undefined) {
                    $scope.quotes_userdata.RTOCode = $scope.selectedItem1.RTOCode;
                }
                if ($scope.$root.entercngkitvalue == undefined) {
                    $scope.$root.entercngkitvalue = 0;
                }
                $scope.quotes_userdata.CngKitPrice = $scope.$root.entercngkitvalue;
                $scope.$root.popupcarpage = false;
                $scope.carpopup = false;
                $scope.noshowloader = false;
                $scope.showloader = true;
                $scope.lazyloadcycle = 0;
                $scope.Quotes_Data = undefined;
                $scope.quotesdatatemp = undefined;
                $scope.quotesdata = undefined;
                $scope.quotesdatatemp1 = undefined;
                $scope.template("CarEdit", false);
                // CarFactory.ncblogic($scope);

                $scope.quotes_userdata.ClaimedNCB = $scope.carclaimedncb;
                $scope.quotes_userdata.RequiredNCB = $scope.RequiredNCB;
                $scope.quotes_userdata.ClaimTaken = $scope.ClaimTaken;
                $scope.quotesrequest.Requests[0].ClaimTaken = $scope.ClaimTaken;
                $scope.quotesrequest.Requests[0].ClaimedNCB = $scope.carclaimedncb;
                $scope.quotesrequest.Requests[0].RequiredNCB = $scope.RequiredNCB;
                $scope.quotesrequest.Requests[0].MotorName = $scope.selectedItem.ModelName;
                if ($scope.quotesrequest.Requests[0].ModelId != $scope.selectedItem.ModelId) {
                    $scope.quotesrequest.Requests[0].ChasisNo = undefined
                    $scope.quotesrequest.Requests[0].EngineNo = undefined
                }
                for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                    if ($scope.quotesrequest.Requests[0].Features[i].Name == "CNG") {
                        if ($scope.carkitstatus != undefined) {
                            if ($scope.carkitstatus.toLowerCase() == "kit3") {
                                $scope.quotesrequest.Requests[0].Features[i].Value = $scope.$root.entercngkitvalue;
                                $scope.quotesrequest.Requests[0].Features[i].Type = "External";
                            }
                            else if ($scope.carkitstatus.toLowerCase() == "kit2") {
                                $scope.quotesrequest.Requests[0].Features[i].Value = 0;
                                $scope.quotesrequest.Requests[0].Features[i].Type = "Internal";
                                $scope.$root.entercngkitvalue = 0;
                            }
                            else {
                                {
                                    $scope.quotesrequest.Requests[0].Features[i].Value = 0;
                                    $scope.quotesrequest.Requests[0].Features[i].Type = "None";
                                    $scope.$root.entercngkitvalue = 0;
                                }
                            }
                        }
                        else {
                            {
                                $scope.quotesrequest.Requests[0].Features[i].Value = 0;
                                $scope.$root.entercngkitvalue = 0;
                            }
                        }
                    }
                }
                $scope.quotesrequest.Requests[0].KitValue = $scope.$root.entercngkitvalue;
                $scope.quotesrequest.Requests[0].ModelId = $scope.selectedItem.ModelId;
                if ($scope.selectedItem1.RTOCode != undefined) {
                    $scope.quotesrequest.Requests[0].RTOCode = $scope.selectedItem1.RTOCode;
                }
                $scope.quotesrequest.Requests[0].RegistrationYear = $scope.carreg;
                // DataFactory.CarQuotesNew($scope,1); 
                $scope.lazyloadcycle = 0;
                $scope.Initialzedata();

                if ($location.$$search.editsearch) {
                    delete $location.$$search.editsearch;
                    $location.$$compose();
                }
            }
        }


        $scope.checkcarbreaking1 = function (flag) {
            if ($scope.policydate != undefined && $scope.policydate != undefined && $scope.policydate != undefined) { // new code
                date = $scope.policydate;
                month = $scope.policymonth;
                year = $scope.policyyear;
            }
            if ($scope.carbreakingpol == 0) { // new code
                $scope.showexpirydate = true;
                $scope.carbreaking = 1;
                $scope.policydate = undefined;
                $scope.policymonth = undefined;
                $scope.policyyear = undefined;
                $scope.carbreakingexp = 0;
                $scope.checkcarbreaking(1);
            }
            else if ($scope.carbreakingpol == 90) { // new code
                $scope.showexpirydate = false;
                $scope.carbreaking = 0;
                $scope.policydate = undefined;
                $scope.policymonth = undefined;
                $scope.policyyear = undefined;
                $scope.carbreakingexp = 0;
                $scope.checkcarbreaking(2);
            }
            else {
                $scope.policyerror = false;
                $scope.policydate = date; // new code
                $scope.policymonth = month;
                $scope.policyyear = year;
                $scope.showexpirydate = false; // new code
                $scope.carbreaking = 0;
                $scope.carbreakingexp = 1;
                $scope.checkcarbreaking(2);
            }
            $scope.quotes_userdata.BreakingDays = $scope.carbreakingpol;

        }

        $scope.checkcarbreaking = function (flag) {
            if (flag == 1 || flag == 3) {
                if ($scope.carbreaking == 0) {
                    if ($scope.carbreakingexp == 0) {
                        $scope.showcarncb = true;
                        $scope.$root.showcarncb = true;
                    }
                    else {
                        $scope.showcarncb = false;
                        $scope.$root.showcarncb = false;
                        $scope.showexpirydate = false;
                    }
                    $scope.showcarexpired = true;
                    //$scope.carbreakingexp = 0;
                }
                else {
                    $scope.showcarncb = true;
                    $scope.$root.showcarncb = true;
                    $scope.showcarexpired = false;
                    $scope.showexpirydate = true;
                }
            }
            else if (flag == 2 || flag == 4) {
                if ($scope.carbreakingexp == 0) {
                    $scope.showcarncb = true;
                    $scope.$root.showcarncb = true;
                    if (flag == 4) {
                        $scope.showcarncb = true;
                        $scope.$root.showcarncb = true;
                        $scope.showexpirydate = true;
                    }
                    $scope.showfastlaneclaimlast = true;
                }
                else {
                    if (flag == 4) {
                        $scope.showcarncb = false;
                        $scope.$root.showcarncb = false;
                        $scope.showexpirydate = false;
                    }
                    $scope.showfastlaneclaimlast = false;
                    $scope.$root.showcarncb = false;
                    $scope.showcarncb = false;
                }
            }
        }

        $scope.getbikequotespop = function () {

            var flag = 1;
            $scope.bikereg = $scope.carregyear;
            if ($scope.lastclaim == 1) {
                $scope.bikelastclaim = "Yes~0";
            }
            $scope.showbtnbikeloader = true;
            if ($scope.selectedbikemmv == null) {

                flag = 0;
                $scope.biketexterror = true;
            }
            else {
                $scope.biketexterror = false;
            }
            if ($scope.selectedbikerto == null) {

                flag = 0;
                $scope.bikertoerror = true;
            }
            else {
                $scope.bikertoerror = false;
            }

            if ($scope.bikereg == undefined) {

                flag = 0;
                $scope.popbikeregerror = true;
            }
            else {
                $scope.popbikeregerror = false;
            }
            if ($scope.bikeexpiredpol == undefined) {

                flag = 0;
                $scope.popbikepolexperror = true;
            }
            else {
                $scope.popbikepolexperror = false;
            }

            if ($scope.bikelastclaim == undefined && $scope.bikeexpiredpol != 91 && $scope.quotesrequest.Requests[0].InsuranceType != 'TP') {
                flag = 0;
                $scope.popbikelastclaimerror = true;
            }
            else {
                $scope.popbikelastclaimerror = false;
            }
            if (flag == 0) {
                $scope.showbtnbikeloader = false;
            }
            
            // if ($scope.quotesrequest.Requests[0].InsuranceType != 'TP') {
            if ($scope.bikeexpiredpol == 90) {
                var temp = new Date();
                temp.setDate(temp.getDate() - 3);

                $scope.policydate = (temp.getDate()) <= 9 ? '0' + (temp.getDate()) : (temp.getDate());
                $scope.policymonth = (temp.getMonth() + 1) <= 9 ? '0' + (temp.getMonth() + 1) : (temp.getMonth() + 1);
                $scope.policyyear = temp.getFullYear();
                $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
                $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate1);
            }
            if ($scope.bikeexpiredpol == 91) {
                var temp = new Date();
                temp.setDate(temp.getDate() - 91);

                $scope.policydate = (temp.getDate()) <= 9 ? '0' + (temp.getDate()) : (temp.getDate());
                $scope.policymonth = (temp.getMonth() + 1) <= 9 ? '0' + (temp.getMonth() + 1) : (temp.getMonth() + 1);
                $scope.policyyear = temp.getFullYear();
                $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
                $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate1);
            }
            if ($scope.bikeexpiredpol == 0) {
                $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
                $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate1);
            }
            // }

            if ($scope.quotesrequest.Requests[0].IsNewVehicle != true) {
                if ($scope.carregerror == true || $scope.carregdate == undefined || $scope.carregmonth == undefined || $scope.carregyear == undefined || $scope.carregyear.toString().length < 4 || isNaN($scope.carregyear) == true || $scope.carregdate == '' || $scope.carregmonth == '') {
                    flag = 0;
                    $scope.carregerror = true;
                }
                else {
                    var errorflag = 0;
                    $scope.carregerror = false;

                    $scope.registrationdate1 = $scope.carregdate + '-' + $scope.carregmonth + '-' + $scope.carregyear;
                    var date1 = new Date($scope.mm + "/" + $scope.dd + "/" + $scope.year);
                    var diffDays = parseInt((date2 - date1) / (1000 * 60 * 60 * 24));


                }
                var regyeardiff = parseInt($scope.carregyear) - parseInt($scope.year);
                if (regyeardiff < -15 || $scope.carregyear > parseInt($scope.year)) {
                    flag = 0;
                    $scope.carregerror = true;
                }
            }


            if ($scope.quotesrequest.Requests[0].IsNewVehicle != true) {
                if (($scope.policyerror == true || $scope.policydate == undefined || $scope.policymonth == undefined || $scope.policyyear == undefined || $scope.policyyear.toString().length < 4 || isNaN($scope.policyyear) == true || $scope.policymonth == '' || $scope.policydate == '') && $scope.bikeexpiredpol == 0) {
                    flag = 0;
                    $scope.policyerror = true;
                }
                else {

                    var errorflag = 0;
                    $scope.policyerror = false;
                    $scope.carregerror = false;
                    $scope.policyexp = false;
                    $scope.policyexp1 = false;
                    $scope.policyexp2 = false;
                    $scope.policyexp3 = false;
                    $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
                    var date1 = new Date($scope.mm + "/" + $scope.dd + "/" + $scope.year);

                    var date2 = new Date($scope.policymonth + '/' + $scope.policydate + '/' + $scope.policyyear);


                    var diffDays = parseInt((date2 - date1) / (1000 * 60 * 60 * 24));
                    if (parseInt($scope.year) - parseInt($scope.policyyear) > 10 || parseInt($scope.year) - parseInt($scope.policyyear) < -1) { // new code
                        $scope.policyerror = true;
                        flag = 0;
                    }
                    if ((diffDays > 44 || diffDays < 0) && $scope.bikeexpiredpol == 0) {
                        errorflag = 1;
                        $scope.policyexp = true;
                        $scope.policyexp2 = false;
                        $scope.policyexp3 = false;
                    }
                    /*else if (diffDays < -87 && $scope.bikeexpiredpol == 90) {
                        errorflag = 1;
                        $scope.policyexp2 = true;
                        $scope.policyexp = false;
                        $scope.policyexp1 = false;
                        $scope.policyexp3 = false;
                    }
                    else if (diffDays > -1 && $scope.bikeexpiredpol == 90) {
                        errorflag = 1;
                        $scope.policyexp2 = false;
                        $scope.policyexp = false;
                        $scope.policyexp1 = false;
                        $scope.policyexp3 = true;
                    }
                    */
                    else {
                        errorflag = 0;
                        // $scope.policyexp1 = false;
                        $scope.policyexp = false;
                    }
                    if (errorflag == 1) {
                        $scope.showbtnbikeloader = false;
                        flag = 0;
                    }

                }

            }

            if ($scope.checkdatepattern($scope.carregdate, $scope.carregmonth, $scope.carregyear, 1) != 0) {
                flag = 0;
            }
            if (flag == 1) {
                $rootScope.scrollhide = '';
                $scope.prepolicydate1 = $scope.policydate + '-' + $scope.policymonth + '-' + $scope.policyyear;
                $scope.registrationdate1 = $scope.carregdate + '-' + $scope.carregmonth + '-' + $scope.carregyear;
                if ($scope.quotesrequest.Requests[0].IsNewVehicle != true) {

                    $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate1);
                    $scope.quotesrequest.Requests[0].RegistrationDate = DataFactory.convertToJSONDate($scope.registrationdate1);
                    $scope.showpopflag = 1;
                }
                $scope.NewPolicyDate = new Date($scope.policymonth + '/' + $scope.policydate + '/' + $scope.policyyear);
                $scope.NewCarregDate = new Date($scope.carregmonth + '/' + $scope.carregdate + '/' + $scope.carregyear);
                $scope.quotesrequest.Requests[0].RegistrationYear = $scope.carregyear;
                $scope.quotesrequest.Requests[0].IDV = 0;
                $scope.data11.group1 = 0;
                $scope.$root.editregdate = true;
                $scope.editcross = true;
                $rootScope.scrollhide = '';
                $scope.historyback("edit");
                //$scope.showbtnbikeloader = true;
                if ($scope.quotes_userdata.RegYear != $scope.bikereg) {
                    $scope.quotes_userdata.RegYear = $scope.bikereg;
                    $scope.quotes_userdata.RegistrationYear = $scope.bikereg;
                    motorregdate = $scope.quotesrequest.Requests[0].RegistrationDate;
                    //$scope.quotesrequest.Requests[0].RegistrationDate = undefined;
                }
                $scope.quotes_userdata.VechileDetails = $scope.selectedbikemmv;
                $scope.quotes_userdata.MotorName = $scope.selectedbikemmv.bikename;
                $scope.quotes_userdata.ModelId = $scope.selectedbikemmv.modelid;
                $scope.quotes_userdata.MakeId = $scope.selectedbikemmv.makeid;
                $scope.quotes_userdata.RegistrationDate = DataFactory.convertToJSONDate($scope.registrationdate1);
                $scope.carclaim = $scope.bikelastclaim;
                if ($scope.selectedbikerto.RTOCode != undefined) {
                    $scope.quotes_userdata.RTOCode = $scope.selectedbikerto.RTOCode;
                    $scope.quotes_userdata.CityId = $scope.selectedbikerto.cityid;
                    $scope.quotes_userdata.CityName = $scope.selectedbikerto.cityname;
                    $scope.quotes_userdata.StateId = $scope.selectedbikerto.stateid;
                    $scope.quotes_userdata.CityList = $scope.selectedbikerto;
                }
                if ($scope.bikeexpiredpol == 91) {
                    motorpolicyexpdate = $scope.quotesrequest.Requests[0].PreviousPolicyEndDate;
                    //$scope.quotesrequest.Requests[0].PreviousPolicyEndDate = undefined;
                }
                if ($scope.bikeexpiredpol == 91) {
                    $scope.carclaimedncb = 0;
                    $scope.RequiredNCB = 0;
                    $scope.carclaimtext = "No~0";
                    if ($scope.lastclaim == 1) {
                        $scope.ClaimTaken = true;
                    }
                    else {
                        $scope.ClaimTaken = false;
                    }
                }
                else {
                    if ($scope.lastclaim == 1) {
                        $scope.ClaimTaken = true;
                        $scope.carclaimtext = "Yes~0";
                        $scope.carclaimedncb = 0;
                        $scope.RequiredNCB = 0;
                    }
                    else {
                        $scope.ClaimTaken = false;
                        $scope.carclaimtext = $scope.bikelastclaim;
                        if ($scope.bikelastclaim != undefined)
                            $scope.carclaimedncb = $scope.bikelastclaim.split("~")[1];
                        if ($scope.carclaimedncb == 0) {
                            $scope.RequiredNCB = 20;
                        }
                        else if ($scope.carclaimedncb == 20) {
                            $scope.RequiredNCB = 25;
                        }
                        else if ($scope.carclaimedncb == 25) {
                            $scope.RequiredNCB = 35;
                        }
                        else if ($scope.carclaimedncb == 35) {
                            $scope.RequiredNCB = 45;
                        }
                        else if ($scope.carclaimedncb == 45) {
                            $scope.RequiredNCB = 50;
                        }
                        else if ($scope.carclaimedncb == 50) {
                            $scope.RequiredNCB = 50;
                        }
                    }

                }

                if ($scope.bikelastclaim != undefined) {
                    $scope.quotes_userdata.ClaimPercent = $scope.bikelastclaim;
                    // CarFactory.ncblogic($scope);
                    $scope.quotes_userdata.ClaimedNCB = $scope.carclaimedncb;
                    $scope.quotes_userdata.RequiredNCB = $scope.RequiredNCB;
                    $scope.quotes_userdata.ClaimTaken = $scope.ClaimTaken;
                }
                else {
                    $scope.quotes_userdata.ClaimedNCB = 0;
                    $scope.quotes_userdata.RequiredNCB = 0;
                    $scope.quotes_userdata.ClaimedNCB = 0;
                    $scope.quotes_userdata.RequiredNCB = 0;
                }

                $scope.noshowloader = false;
                $scope.showloader = true;

                $scope.Quotes_Data = undefined;
                $scope.quotesdatatemp = undefined;
                $scope.quotesdata = undefined;
                $scope.quotesdatatemp1 = undefined;
                if (diffDays > 0 && diffDays < 44 && $scope.bikeexpiredpol != '91') { // new code
                    $scope.quotes_userdata.BreakingDays = 0;
                    $scope.quotesrequest.Requests[0].BikeExpiredpol = 0;
                    $scope.quotesrequest.Requests[0].BreakingDays = 0;
                }
                else if (diffDays >= -90 && diffDays < 0 && $scope.bikeexpiredpol != '91') { // new code
                    $scope.quotes_userdata.BreakingDays = 90;
                    $scope.quotesrequest.Requests[0].BikeExpiredpol = 90;
                    $scope.quotesrequest.Requests[0].BreakingDays = 90;
                }
                else if (diffDays < -90) {
                    $scope.quotes_userdata.BreakingDays = 91;
                    $scope.quotesrequest.Requests[0].BikeExpiredpol = 91;
                    $scope.quotesrequest.Requests[0].BreakingDays = 91;
                }
                else {
                    $scope.quotes_userdata.BreakingDays = $scope.bikeexpiredpol;
                    $scope.quotesrequest.Requests[0].BikeExpiredpol = $scope.bikeexpiredpol;
                    $scope.quotesrequest.Requests[0].BreakingDays = $scope.bikeexpiredpol;
                }
                $scope.quotesrequest.Requests[0].MotorName = $scope.selectedbikemmv.bikename;
                $scope.quotesrequest.Requests[0].ClaimTaken = $scope.ClaimTaken;
                $scope.quotesrequest.Requests[0].ClaimedNCB = $scope.carclaimedncb;

                $scope.quotesrequest.Requests[0].RequiredNCB = $scope.RequiredNCB;
                if ($scope.quotesrequest.Requests[0].ModelId != $scope.selectedbikemmv.modelid) {
                    $scope.quotesrequest.Requests[0].ChasisNo = undefined
                    $scope.quotesrequest.Requests[0].EngineNo = undefined
                }
                $scope.quotesrequest.Requests[0].ModelId = $scope.selectedbikemmv.modelid;
                if ($scope.selectedbikerto.RTOCode != undefined) {
                    $scope.quotesrequest.Requests[0].RTOCode = $scope.selectedbikerto.RTOCode;
                }

                $scope.quotesrequest.Requests[0].RegistrationYear = $scope.bikereg;
                // DataFactory.BikeQuotesNew($scope,1);
                $scope.$root.popupbikepage = false;
                $scope.bikepopup = false;
                $scope.template("TWEdit", false);
                $scope.lazyloadcycle = 0;
                $scope.Initialzedata();

                if ($location.$$search.editsearch) {
                    delete $location.$$search.editsearch;
                    $location.$$compose();
                }
            }
            else {
                $scope.showbtnbikeloader = false; // new code
            }
        }
        $scope.gethealthquotespop = function (id) {
            $scope.Compareselection = [];
            $scope.Comparedisplay = false;
            $scope.data = [];
            var flag = 1;

            if ($scope.selectedItem2 == null) {
                flag = 0;
                $scope.cityerror = true;
            }
            else {
                $scope.cityerror = false;
            }
            if (parseInt($scope.selectedadult) > 2 || $scope.selectedadult == undefined || $scope.selectedadult == '0') {
                flag = 0;
                $scope.adulterror = true;
            }
            else {
                $scope.adulterror = false;
            }
            if (parseInt($scope.selectedchild) > 4 || $scope.selectedchild == undefined) {

                flag = 0;
                $scope.childerror = true;
            }
            else {
                $scope.childerror = false;
            }
            if ($scope.IGdate == undefined || $scope.IGmonth == undefined || $scope.IGyear == undefined || $scope.IGdate == "" || $scope.IGdate == "0" || $scope.IGmonth == "" || $scope.IGmonth == "0" || $scope.IGyear == "" || $scope.dateerror == true) {

                flag = 0;
                $scope.dateerror = true;
            }
            else {
                var yy = $scope.IGdate + '-' + $scope.IGmonth + '-' + $scope.IGyear;
                $scope.age = $scope.getAge(yy);
                if ($scope.age < 18 || $scope.age > 100) {
                    flag = 0;
                    $scope.dateerror = true;
                }
                else {
                    $scope.dateerror = false;
                }
            }
            if (($scope.datespecificmsg != '' && $scope.datespecificmsg != undefined)) {
                $scope.showbtnhealthloader = false;
                $scope.dateerror = false;
            }
            if (flag == 1 && ($scope.datespecificmsg == '' || $scope.datespecificmsg == undefined)) {
                if ($scope.selectedadult == 1 && ($scope.gender.toLowerCase() == 'm' || $scope.gender.toLowerCase() == 'male') && $scope.selectedchild == 0) {
                    for (var i = 0; i < $scope.HealthRefineChips.length; i++) {
                        if ($scope.HealthRefineChips[i].value == "Maternity Benefits") {
                            $scope.DeleteChipFunction("SetFilterChip", "delete", $scope.HealthRefineChips[i]);
                        }
                    }
                }
                $scope.showbtnhealthloader = true;
                $rootScope.scrollhide = '';

                $scope.$root.scrollhide = "whitebg";
                $scope.editcross = true;
                $scope.hcityeditshow = false;
                $scope.genderedit = false;
                $scope.memberageedit = false;
                $scope.memberedit = false;
                // $scope.historyback("edit");
                $scope.formdob1 = $scope.IGyear + '-' + $scope.IGmonth + '-' + $scope.IGdate;
                $scope.NewDateOfBirthFormat = angular.copy(new Date($scope.IGmonth + "/" + $scope.IGdate + "/" + $scope.IGyear));
                if ($scope.selectedItem2.cityname == undefined)
                    $scope.quotes_userdata.Citylist.cityname = $scope.selectedItem2;
                else
                    $scope.quotes_userdata.Citylist = $scope.selectedItem2;
                $scope.quotes_userdata.Adult = parseInt($scope.selectedadult);
                $scope.quotes_userdata.Child = parseInt($scope.selectedchild);
                $scope.quotes_userdata.Birthdate = $scope.IGdate + '-' + $scope.IGmonth + '-' + $scope.IGyear;
                $scope.AgeTerm = $scope.getAge($scope.quotes_userdata.Birthdate);
                $scope.DOB = JSON.parse(DataFactory.stringifyWcf($scope.quotes_userdata.Birthdate));
                $scope.quotesrequest.Requests[0].DOB = $scope.DOB;
                $scope.quotes_userdata.DOB = $scope.quotesrequest.Requests[0].DOB;
                $scope.quotes_userdata.Gender = $scope.gender;
                $scope.noshowloader = false;
                $scope.showloader = true;

                $scope.Quotes_Data = undefined;
                $scope.quotesdatatemp = undefined;
                $scope.quotesdata = undefined;
                $scope.quotesdatatemp1 = undefined;
                $scope.cityid = $scope.quotes_userdata.Citylist.cityid.split(",")[0];
                if ($scope.cityid != $scope.quotesrequest.Requests[0].CityId) {
                    $scope.todos = [];
                    $scope.quotesrequest.Requests[0].HospitalID = '';
                    $scope.quotesrequest.Requests[0].NetworkHospital1 = null;
                    $scope.quotesrequest.Requests[0].NetworkHospital2 = null;
                    $scope.quotesrequest.Requests[0].NetworkHospital3 = null;
                    var fngetHealth_NetworkHospital = FeatureService.fngetHealth_NetworkHospital($scope);
                    fngetHealth_NetworkHospital.then(function (pl) {
                        $scope.Network_Hospital = angular.fromJson(angular.fromJson(pl.data)).fngetHealth_NetworkHospitalResult;
                    });
                }
                $scope.quotesrequest.Requests[0].CityId = $scope.quotes_userdata.Citylist.cityid.split(",")[0];
                $scope.quotesrequest.Requests[0].Gender = $scope.gender;
                $scope.quotesrequest.Requests[0].NumberOfAdults = parseInt($scope.selectedadult);
                $scope.quotesrequest.Requests[0].NumberOfChildren = parseInt($scope.selectedchild);
                $scope.quotesrequest.Requests[0].PolicyTerm = $scope.quotes_userdata.PolicyTerm.toString();
                // $scope.quotesrequest.Requests[0].Age = $scope.getAge($scope.quotes_userdata.Birthdate);
                $scope.quotes_userdata.CityId = $scope.quotesrequest.Requests[0].CityId;
                $scope.quotesrequest.Requests[0].IsOffline = true;
                $scope.$root.popuphealthpage = false;
                $scope.template("HealthEdit", false);
                $scope.healthfirstpop = false;
                $scope.askDOB = false;
                $scope.lazyloadcycle = 0;
                if ($scope.HealthSumInsurednew == null) {
                    $scope.HealthSumInsurednew = { sumassuredtext: '5 Lacs', sumassuredValue: 500000 };
                    $scope.quotesrequest.Requests[0].MaxSumInsured = $scope.HealthSumInsurednew.sumassuredValue;
                    $scope.quotesrequest.Requests[0].MinSumInsured = $scope.HealthSumInsurednew.sumassuredValue;
                }
                //                if ($scope.device == "Desktop") {
                //                    document.getElementById("hmemedit").style.display = "none";
                //                    document.getElementById("hgendit").style.display = "none";
                //                    document.getElementById("hageditid").style.display = "none";
                //                    document.getElementById("hcityeditid").style.display = "none";
                //                }
                if (!$rootScope.healthdata.Requests[0].IsCovid)
                    $scope.bindnerworkhospital();
                $scope.Initialzedata();

                if ($location.$$search.editsearch) {
                    delete $location.$$search.editsearch;
                    $location.$$compose();
                }
            }
        }


        $scope.getcovidquotespop = function (id) {
            $scope.Compareselection = [];
            $scope.Comparedisplay = false;
            $scope.data = [];
            var flag = 1;

            if ($scope.selectedItem2 == null) {
                flag = 0;
                $scope.cityerror = true;
            }
            else {
                $scope.cityerror = false;
            }
            if (parseInt($scope.selectedadult) > 2 || $scope.selectedadult == undefined || $scope.selectedadult == '0') {
                flag = 0;
                $scope.adulterror = true;
            }
            else {
                $scope.adulterror = false;
            }
            if (parseInt($scope.selectedchild) > 4 || $scope.selectedchild == undefined) {

                flag = 0;
                $scope.childerror = true;
            }
            else {
                $scope.childerror = false;
            }
            if ($scope.IGdate == undefined || $scope.IGmonth == undefined || $scope.IGyear == undefined || $scope.IGdate == "" || $scope.IGdate == "0" || $scope.IGmonth == "" || $scope.IGmonth == "0" || $scope.IGyear == "" || $scope.dateerror == true) {

                flag = 0;
                $scope.dateerror = true;
            }
            else {
                var yy = $scope.IGdate + '-' + $scope.IGmonth + '-' + $scope.IGyear;
                $scope.age = $scope.getAge(yy);
                if ($scope.age < 18 || $scope.age > 100) {
                    flag = 0;
                    $scope.dateerror = true;
                }
                else {
                    $scope.dateerror = false;
                }
            }
            if (($scope.datespecificmsg != '' && $scope.datespecificmsg != undefined)) {
                $scope.showbtnhealthloader = false;
                $scope.dateerror = false;
            }
            if (flag == 1 && ($scope.datespecificmsg == '' || $scope.datespecificmsg == undefined)) {
                if ($scope.selectedadult == 1 && ($scope.gender.toLowerCase() == 'm' || $scope.gender.toLowerCase() == 'male') && $scope.selectedchild == 0) {
                    for (var i = 0; i < $scope.HealthRefineChips.length; i++) {
                        if ($scope.HealthRefineChips[i].value == "Maternity Benefits") {
                            $scope.DeleteChipFunction("SetFilterChip", "delete", $scope.HealthRefineChips[i]);
                        }
                    }
                }
                $scope.showbtnhealthloader = true;
                $rootScope.scrollhide = '';

                $scope.$root.scrollhide = "whitebg";
                $scope.editcross = true;
                $scope.hcityeditshow = false;
                $scope.genderedit = false;
                $scope.memberageedit = false;
                $scope.memberedit = false;
                // $scope.historyback("edit");
                $scope.formdob1 = $scope.IGyear + '-' + $scope.IGmonth + '-' + $scope.IGdate;
                $scope.NewDateOfBirthFormat = angular.copy(new Date($scope.IGmonth + "/" + $scope.IGdate + "/" + $scope.IGyear));
                if ($scope.selectedItem2.cityname == undefined)
                    $scope.quotes_userdata.Citylist.cityname = $scope.selectedItem2;
                else
                    $scope.quotes_userdata.Citylist = $scope.selectedItem2;
                $scope.quotes_userdata.Adult = parseInt($scope.selectedadult);
                $scope.quotes_userdata.Child = parseInt($scope.selectedchild);
                $scope.quotes_userdata.Birthdate = $scope.IGdate + '-' + $scope.IGmonth + '-' + $scope.IGyear;
                $scope.AgeTerm = $scope.getAge($scope.quotes_userdata.Birthdate);
                $scope.DOB = JSON.parse(DataFactory.stringifyWcf($scope.quotes_userdata.Birthdate));
                $scope.quotesrequest.Requests[0].DOB = $scope.DOB;
                $scope.quotes_userdata.DOB = $scope.quotesrequest.Requests[0].DOB;
                $scope.quotes_userdata.Gender = $scope.gender;
                $scope.noshowloader = false;
                $scope.showloader = true;

                $scope.Quotes_Data = undefined;
                $scope.quotesdatatemp = undefined;
                $scope.quotesdata = undefined;
                $scope.quotesdatatemp1 = undefined;
                $scope.cityid = $scope.quotes_userdata.Citylist.cityid.split(",")[0];
                if ($scope.cityid != $scope.quotesrequest.Requests[0].CityId) {
                    $scope.todos = [];
                    $scope.quotesrequest.Requests[0].HospitalID = '';
                    $scope.quotesrequest.Requests[0].NetworkHospital1 = null;
                    $scope.quotesrequest.Requests[0].NetworkHospital2 = null;
                    $scope.quotesrequest.Requests[0].NetworkHospital3 = null;
                    var fngetHealth_NetworkHospital = FeatureService.fngetHealth_NetworkHospital($scope);
                    fngetHealth_NetworkHospital.then(function (pl) {
                        $scope.Network_Hospital = angular.fromJson(angular.fromJson(pl.data)).fngetHealth_NetworkHospitalResult;
                    });
                }
                $scope.quotesrequest.Requests[0].CityId = $scope.quotes_userdata.Citylist.cityid.split(",")[0];
                $scope.quotesrequest.Requests[0].Gender = $scope.gender;
                $scope.quotesrequest.Requests[0].NumberOfAdults = parseInt($scope.selectedadult);
                $scope.quotesrequest.Requests[0].NumberOfChildren = parseInt($scope.selectedchild);
                $scope.quotesrequest.Requests[0].PolicyTerm = $scope.quotes_userdata.PolicyTerm.toString();
                // $scope.quotesrequest.Requests[0].Age = $scope.getAge($scope.quotes_userdata.Birthdate);
                $scope.quotes_userdata.CityId = $scope.quotesrequest.Requests[0].CityId;
                $scope.$root.popuphealthpage = false;
                $scope.template("HealthEdit", false);
                $scope.healthfirstpop = false;
                $scope.askDOB = false;
                $scope.lazyloadcycle = 0;
                if ($scope.HealthSumInsurednew == null) {
                    $scope.HealthSumInsurednew = { sumassuredtext: '5 Lacs', sumassuredValue: 500000 };
                    $scope.quotesrequest.Requests[0].MaxSumInsured = $scope.HealthSumInsurednew.sumassuredValue;
                    $scope.quotesrequest.Requests[0].MinSumInsured = $scope.HealthSumInsurednew.sumassuredValue;
                }
                //                if ($scope.device == "Desktop") {
                //                    document.getElementById("hmemedit").style.display = "none";
                //                    document.getElementById("hgendit").style.display = "none";
                //                    document.getElementById("hageditid").style.display = "none";
                //                    document.getElementById("hcityeditid").style.display = "none";
                //                }
                if (!$rootScope.healthdata.Requests[0].IsCovid)
                    $scope.bindnerworkhospital();
                $scope.Initialzedata();

                if ($location.$$search.editsearch) {
                    delete $location.$$search.editsearch;
                    $location.$$compose();
                }
            }
        }

        $scope.getNewTermQuotes = function (id) {
            if (id == 'date') {
                var datemessage = ValidationFactory.onlynumber($scope.IGdate);
                var monthmessage = ValidationFactory.onlynumber($scope.IGmonth);
                var yearmessage = ValidationFactory.onlynumber($scope.IGyear);


                if ($scope.IGdate == undefined || $scope.dateerror == true || $scope.IGmonth == undefined || $scope.IGyear == undefined || datemessage == "False" || monthmessage == "False" || yearmessage == "False" || $scope.IGdate == "" || $scope.IGmonth == "" || $scope.IGyear == "" || $scope.IGyear.length < 4 || $scope.IGmonth == "0" || $scope.IGdate == "0" || $scope.age < 18 || $scope.age >= 66) {
                    flag = 0;
                    $scope.dateerror = true;
                }
                else {
                    plantype = null;
                    var a = $scope.gaProduct + " Desktop Date Change";
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.gaProduct });
                    $scope.dateerror = false;
                    $scope.age = DataFactory.calculateAge($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear);
                    $scope.dateofbirth = $scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear;
                    $scope.DateOfBirth = $scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear;
                    $scope.AgeTerm = $scope.getAge($scope.DateOfBirth);
                    $scope.quotes_userdata.dateofbirth = $scope.dateofbirth;
                    $scope.NewDateOfBirthFormat = new Date($scope.IGmonth + "/" + $scope.IGdate + "/" + $scope.IGyear);
                    var termage1 = DataFactory.calculateAge($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear);


                    var termage = 75 - DataFactory.calculateAge($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear);

                    $scope.policytermlist = [];

                    $scope.policytermlist.push({ Name: 'Maximum', value: 0 });
                    //var userincomeinlacs = parseFloat(($scope.txtActualIncome.ActualIncomeValue / 100000).toFixed(0) * 100000);
                    var userincomeinlacs = $scope.txtActualIncome.ActualIncomeValue;
                    if ($scope.product == "Term") {
                        TermFactory.GetSumAssuredlist($scope, userincomeinlacs);
                        var sumassured = $scope.SumAssured;
                        var Value = null;
                        for (i = 0; i < $scope.sumassuredlist.length; i++) {
                            var getarrayValue = $scope.sumassuredlist[i].sumassuredtext.split(' ');
                            if (sumassured == $scope.sumassuredlist[i].summassuredvalue) {
                                Value = $scope.sumassuredlist[i].sumassuredtext
                            }
                        }
                        if (Value != null) {
                            $scope.sumassured = Value;
                        }
                    }
                    var termyear = 75 - termage1;
                    if (termyear < 5) {
                        $scope.quotesrequest.Requests[0].PolicyTerm = 0;
                        $scope.quotes_userdata.PolicyTerm = 0;
                        $scope.PolicyTermPeriod = 0;
                    }
                    else {
                        $scope.quotes_userdata.PolicyTerm = 75 - termage1;
                        $scope.quotesrequest.Requests[0].PolicyTerm = $scope.quotes_userdata.PolicyTerm;
                        $scope.PolicyTermPeriod = 75;
                    }
                    DataFactory.termrequestdata($scope, 2);
                    for (var i = termage1 + 5; i <= 99; i++) {
                        $scope.policytermlist.push({ Name: i + ' Year', value: i });
                    }
                    $scope.policytermlist.push({ Name: '100 Year', value: 100 });
                    var payterm = 75;
                    if ($scope.HealthRefineChips.indexOf($filter('filter')($scope.HealthRefineChips, function (d) { return d.id == 24 })[0]) != -1) {
                        $scope.PolicyTermPeriod = 0;
                        $scope.quotesrequest.Requests[0].PolicyTerm = 0;
                        $scope.quotes_userdata.PolicyTerm = 0;
                    }

                    Termlimitedoption();
                    $scope.lazyloadcycle = 0;

                    //$scope.mdrider = [];
                    $scope.memberageedit = false;
                    document.getElementById("tdobid").style.display = "none";
                    $scope.Initialzedata();
                }
            }
            else if (id == 'gender') {
                if ($scope.gender == undefined || $scope.gender == null) {
                    $scope.gender = $scope.quotes_userdata.DefaultGender;
                }
                $scope.quotes_userdata.Gender = $scope.gender;
                DataFactory.termrequestdata($scope, 2);
                $scope.lazyloadcycle = 0;

                $scope.memberedit = false;

                var a = $scope.gaProduct + " Desktop Gender Change";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.gaProduct });
                document.getElementById("tgenderid").style.display = "none";
                plantype = null;
                $scope.Initialzedata();


            }
            else if (id == 'income') {
                if ($scope.txtActualIncome == null || $scope.txtActualIncome == NaN || $scope.txtActualIncome.ActualIncomeValue == null || $scope.txtActualIncome.ActualIncomeValue == undefined || $scope.txtActualIncome.ActualIncomeValue == "") {

                    $scope.annualerror = true;
                }
                else {
                    $scope.incomeerror = false;
                    $scope.annualerror = false;
                    $scope.actualincome = $scope.txtActualIncome.ActualIncomeText;

                    $scope.quotes_userdata.actualincome = $scope.txtActualIncome.ActualIncomeValue;
                    if ($scope.txtActualIncome.ActualIncomeValue != undefined) {
                        $scope.MonthlyIncome = Math.round((((Math.round(($scope.txtActualIncome.ActualIncomeValue / 12), 0)) / 10000)), 2) * 10000;
                    }

                    var a = $scope.gaProduct + " Desktop Income Change";
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.gaProduct });
                    $scope.incomeerror = false;
                    $scope.annualerror = false;
                    $scope.actualincome = $scope.txtActualIncome.ActualIncomeText;

                    $scope.quotes_userdata.actualincome = $scope.txtActualIncome.ActualIncomeValue;
                    if ($scope.txtActualIncome.ActualIncomeValue != undefined) {
                        $scope.MonthlyIncome = Math.round((((Math.round(($scope.txtActualIncome.ActualIncomeValue / 12), 0)) / 10000)), 2) * 10000;
                    }
                    //var userincomeinlacs = parseFloat(($scope.txtActualIncome.ActualIncomeValue / 100000).toFixed(0) * 100000);
                    var userincomeinlacs = $scope.txtActualIncome.ActualIncomeValue;
                    $scope = TermFactory.calculatemonthlyincome($scope, 1);
                    if ($scope.product == "Term") {
                        $scope.age = $scope.getAge($scope.DateOfBirth);
                        TermFactory.GetSumAssuredlist($scope, userincomeinlacs);
                    }
                    var sumassured = $scope.SumAssured;
                    var Value = null;
                    for (i = 0; i < $scope.sumassuredlist.length; i++) {
                        var getarrayValue = $scope.sumassuredlist[i].sumassuredtext.split(' ');
                        if (sumassured == $scope.sumassuredlist[i].summassuredvalue) {
                            Value = $scope.sumassuredlist[i].sumassuredtext
                        }
                    }
                    if (Value != null) {
                        $scope.sumassured = Value;
                    }
                    DataFactory.termrequestdata($scope, 2);
                    $scope.lazyloadcycle = 0;
                    if ($scope.askDOB == true) {
                        $scope = TermFactory.calculatemonthlyincome($scope);
                        $scope.actualincome = TermFactory.convertincomeintotext($scope, $scope.quotes_userdata.actualincome);
                        $scope.txtActualIncome = { ActualIncomeText: TermFactory.convertActualIncomeToText($scope.quotes_userdata.actualincome), ActualIncomeValue: $scope.quotes_userdata.actualincome };
                        $scope.askDOB = false;
                    }
                    $scope.incomedit = false;
                    document.getElementById("tincomeid").style.display = "none";
                    plantype = null;
                    $scope.Initialzedata();

                }

            }
            else if (id == 'smoker') {
                var a = $scope.gaProduct + " Desktop Smoker Change";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.gaProduct });
                if ($scope.smoker != undefined) {


                    if ($scope.smoker == "no") {
                        $scope.quotes_userdata.IsTobacco = false;
                        $scope.istabacco = "No";
                    }
                    else if ($scope.smoker == "yes") {
                        $scope.quotes_userdata.IsTobacco = true;
                        $scope.istabacco = "Yes";
                    }
                }
                if ($scope.quotes_userdata.IsTobacco == undefined || $scope.quotes_userdata.IsTobacco == null) {
                    $scope.quotes_userdata.IsTobacco = $scope.quotes_userdata.DefaultTabacco;
                    if ($scope.quotes_userdata.IsTobacco == true) {
                        $scope.istabacco = "Yes";
                    }
                    else {
                        $scope.istabacco = "No";
                    }
                }

                DataFactory.termrequestdata($scope, 2);
                $scope.lazyloadcycle = 0;

                $scope.genderedit = false;
                document.getElementById("tsmokeid").style.display = "none";
                plantype = null;
                $scope.Initialzedata();
            }

            else if (id == 'city') {
                var a = $scope.gaProduct + " Desktop City Change";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.gaProduct });
                if ($scope.selectedItem2 == null) {

                    $scope.cityerror = true;
                }
                else {
                    $scope.cityerror = false;
                    $scope.quotes_userdata.CityId = $scope.selectedItem2.cityid.split(",")[0];
                    $scope.CityID = $scope.selectedItem2.cityid.split(",")[0];

                    $scope.quotes_userdata.city = $scope.selectedItem2;
                    DataFactory.termrequestdata($scope, 2);
                    $scope.lazyloadcycle = 0;

                    $scope.hcityeditshow = false;
                    document.getElementById("tcityid").style.display = "none";
                    plantype = null;
                    $scope.Initialzedata();
                }
            }

        }




        function callMe() {
            console.log("jhjj");
        }


        $scope.sortga = function (tag) {
            var a = $scope.gaProduct + " Sorting by " + tag;

            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });
        }

        $scope.gettermquotes = function (diyflag, divfla1) {
            $scope.Compareselection = [];
            $scope.Comparedisplay = false;
            $scope.data = [];

            var flag = 1;
            if (diyflag != 1 && diyflag != 2 && diyflag != 0) {
                $scope.showbtntermloader = true;
                var datemessage = ValidationFactory.onlynumber($scope.IGdate);
                var monthmessage = ValidationFactory.onlynumber($scope.IGmonth);
                var yearmessage = ValidationFactory.onlynumber($scope.IGyear);
                if ($scope.PincodeText != undefined && $scope.PincodeText != null && $scope.PincodeText != '') {
                    if ($scope.pincode == undefined || $scope.pincode == null) {
                        $scope.pincodeError = true;
                        flag = 0;
                    }
                    else {
                        $scope.pincodeError = false;
                    }
                }
                else {
                    $scope.quotesrequest.Requests[0].Pincode = undefined;
                    $scope.pincodeError = false;
                }
                if ($scope.selectedItem2 == null) {
                    flag = 0;
                    $scope.cityerror = true;
                }
                else {
                    $scope.cityerror = false;
                }
                if ($scope.txtActualIncome == null || $scope.txtActualIncome == NaN || $scope.txtActualIncome.ActualIncomeValue == null || $scope.txtActualIncome.ActualIncomeValue == undefined || $scope.txtActualIncome.ActualIncomeValue == "") {
                    flag = 0;
                    $scope.annualerror = true;
                }
                else if ($scope.annualerror == true || $scope.dotmessage == true) {
                    flag = 0;
                }
                else {
                    $scope.incomeerror = false;
                    $scope.annualerror = false;
                }
                if ($scope.IGdate == undefined || $scope.dateerror == true || $scope.IGmonth == undefined || $scope.IGyear == undefined || datemessage == "False" || monthmessage == "False" || yearmessage == "False" || $scope.IGdate == "" || $scope.IGmonth == "" || $scope.IGyear == "" || $scope.IGmonth == "0" || $scope.IGdate == "0" || $scope.age < 18 || $scope.age >= 66) {
                    flag = 0;
                    $scope.dateerror = true;
                }
                if (flag == 0) {
                    $scope.showbtntermloader = false;
                }
            }
            if ($scope.datespecificmsg != '' && $scope.datespecificmsg != undefined) {
                $scope.showbtntermloader = false;
                $scope.dateerror = false;
            }
            if (flag == 1 && ($scope.datespecificmsg == '' || $scope.datespecificmsg == undefined)) {
                $rootScope.scrollhide = '';
                if ($scope.smoker != undefined) {
                    if ($scope.smoker == "no") {
                        $scope.quotes_userdata.IsTobacco = false;
                        $scope.istabacco = "No";
                    }
                    else if ($scope.smoker == "yes") {
                        $scope.quotes_userdata.IsTobacco = true;
                        $scope.istabacco = "Yes";
                    }
                }
                if ($scope.quotes_userdata.IsTobacco == undefined || $scope.quotes_userdata.IsTobacco == null) {
                    $scope.quotes_userdata.IsTobacco = $scope.quotes_userdata.DefaultTabacco;
                    if ($scope.quotes_userdata.IsTobacco == true) {
                        $scope.istabacco = "Yes";
                    }
                    else {
                        $scope.istabacco = "No";
                    }
                }
                if (diyflag != 1 && diyflag != 2 && diyflag != 0) {

                    $scope.age = DataFactory.calculateAge($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear);

                    var termage1 = DataFactory.calculateAge($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear);
                    var termage = 75 - DataFactory.calculateAge($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear);

                    $scope.policytermlist = [];
                    $scope.quotes_userdata.CityId = $scope.selectedItem2.cityid.split(",")[0];
                    $scope.dateofbirth = $scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear;
                    $scope.DateOfBirth = $scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear;
                    $scope.CityID = $scope.selectedItem2.cityid.split(",")[0];
                    $scope.quotes_userdata.city = $scope.selectedItem2;
                    $scope.quotes_userdata.dateofbirth = $scope.dateofbirth;
                    if ($scope.gender == undefined || $scope.gender == null) {
                        $scope.gender = $scope.quotes_userdata.DefaultGender;
                    }
                    $scope.quotes_userdata.Gender = $scope.gender;


                    $scope.actualincome = $scope.txtActualIncome.ActualIncomeText;
                    if ($scope.product == "Term") {
                        if ($scope.txtActualIncome.ActualIncomeValue != undefined) {
                            $scope.MonthlyIncome = Math.round((((Math.round(($scope.txtActualIncome.ActualIncomeValue / 12), 0)) / 10000)), 2) * 10000;
                        }
                    }
                    else if ($scope.product == "Critical") {
                        $scope.quotes_userdata.actualincome = Math.round($scope.txtActualIncome.ActualIncomeValue);
                    }
                    //var userincomeinlacs = parseFloat(($scope.txtActualIncome.ActualIncomeValue / 100000).toFixed(0) * 100000);
                    var userincomeinlacs = $scope.txtActualIncome.ActualIncomeValue;
                    if ($scope.product == "Term" && ($scope.quotes_userdata.actualincome != $scope.txtActualIncome.ActualIncomeValue || $scope.AgeTerm != $scope.age)) {
                        $scope.quotes_userdata.actualincome = $scope.txtActualIncome.ActualIncomeValue;
                        TermFactory.GetSumAssuredlist($scope, userincomeinlacs);
                        $scope = TermFactory.calculatemonthlyincome($scope, 1);
                        var sumassured = $scope.SumAssured;
                        var Value = null;
                        for (i = 0; i < $scope.sumassuredlist.length; i++) {
                            var getarrayValue = $scope.sumassuredlist[i].sumassuredtext.split(' ');
                            if (sumassured == $scope.sumassuredlist[i].summassuredvalue) {
                                Value = $scope.sumassuredlist[i].sumassuredtext
                            }
                        }
                        if (Value != null) {
                            $scope.sumassured = Value;
                        }
                    }
                    else if ($scope.product == "Critical") {
                        CriticalFactory.GetSumAssuredlist($scope, parseInt($scope.quotes_userdata.actualincome));
                    }
                    $scope.NewDateOfBirthFormat = angular.copy(new Date($scope.IGmonth + "/" + $scope.IGdate + "/" + $scope.IGyear));
                    $scope.quotes_userdata.Age = $scope.age;
                    $scope.AgeTerm = $scope.getAge($scope.DateOfBirth);
                }
                $scope.editcross = true;
                $scope.noshowloader = false;
                $scope.showloader = true;
                $scope.Quotes_Data = undefined;
                $scope.quotesdatatemp = undefined;
                $scope.quotesdata = undefined;
                $scope.quotesdatatemp1 = undefined;
                if ($scope.product == "Term") {
                    DataFactory.termrequestdata($scope, 2);
                }
                else if ($scope.product == "Critical") {
                    DataFactory.criticalrequestdata($scope, 2);
                    if ($scope.sumassured > 5000000) {
                        $scope.sumassured = 5000000;
                    }
                }
                if ($scope.askDOB == true) {
                    $scope = TermFactory.calculatemonthlyincome($scope);
                    $scope.actualincome = TermFactory.convertincomeintotext($scope, $scope.quotes_userdata.actualincome);
                    $scope.txtActualIncome = { ActualIncomeText: TermFactory.convertActualIncomeToText($scope.quotes_userdata.actualincome), ActualIncomeValue: $scope.quotes_userdata.actualincome };
                    $scope.askDOB = false;
                }
                //------------------------------------Term Maturity Age------------------------------------------------------

                if (termage1 == undefined || termage1 == null || termage1 == NaN) {
                    termage1 = $scope.AgeTerm;
                }
                if ($scope.pincode != undefined && $scope.pincode != null) {
                    $scope.quotesrequest.Requests[0].Pincode = $scope.pincode.PinCode;
                }
                if ($scope.product == "Term") {
                    for (var i = termage1 + 5; i <= 99; i++) {
                        $scope.policytermlist.push({ Name: i + ' Year', value: i });
                    }
                    $scope.policytermlist.push({ Name: '100 Year', value: 100 });
                    $scope.policytermlist.push({ Name: 'Maximum', value: 0 });
                    $scope.AgeTerm = $scope.age;
                    $scope.WholelifeCoverandPayage(plantype, 'edit')
                    TermPTandPPTDiy();
                }
                else if ($scope.product == "Critical") {
                    for (j = 5; j <= 70 - termage1; j++) {
                        $scope.policytermlist.push({ Name: j + ' Year', value: j })
                    }
                    $scope.PolicyTermPeriod = 0;
                }


                //-----------------------------------------End Maturity Age----------------------------------------------------

                $scope.$root.popuptermpage = false;
                $scope.template("TermEdit", false);
                $scope.lazyloadcycle = 0;
                //$scope.mdrider = [];
                $scope.userselectionrider = [];
                //plantype = null;
               // if ($scope.quotesrequest.Requests[0].UserInputIncome < 200000) {
                   // $scope.quotesrequest.Requests[0].SumAssured = 200000;
                    $scope.GroupSumassured = $scope.quotesrequest.Requests[0].SumAssured;
                //}
                $scope.Initialzedata();
                //if (divfla1 != 1 && diyflag != 'noback')
                //    $scope.historyback("edit");

                if ($location.$$search.editsearch) {
                    delete $location.$$search.editsearch;
                    $location.$$compose();
                }
            }
        }


        $scope.getinvestquotes = function () {
            $scope.errorId = "";
            $scope.Comparedisplay = false;
            $scope.Compareselection = [];
            $scope.data = [];
            $scope.showbtninvestloader = true;
            var flag = 1;
            var income = parseInt($scope.txtActualIncome);

            if ($scope.txtActualIncome == '' || $scope.txtActualIncome == undefined || isNaN($scope.txtActualIncome) || $scope.txtActualIncome == null) {
                flag = 0;
                $scope.incomeerror = true;
                $scope.annualerror = true;
            }
            else {
                // $scope.cityerror = false;
                $scope.incomeerror = false;
                $scope.annualerror = false;
            }
            if ($scope.selectedincome == undefined || $scope.selectedincome == '') {
                flag = 0;
                $scope.errorId = "error-outline";
                //$scope.incomeerror = true;
            }
            else {
                $scope.errorId = "";
                //$scope.incomeerror = false;
            }
            if ($scope.IGdate == undefined || $scope.IGmonth == undefined || $scope.IGyear == undefined || $scope.IGdate == "" || $scope.IGmonth == "" || $scope.IGyear == "") {
                flag = 0;
                $scope.dateerror = true;
            }
            else {
                $scope.age = $scope.getAge($scope.IGdate + '-' + $scope.IGmonth + '-' + $scope.IGyear);
                if ($scope.age < 18 || $scope.age > 65) {
                    $scope.dateerror = true;
                    flag = 0;
                }
                else {
                    $scope.dateerror = false;
                }
            }
            if ($scope.selectedincome == 'M' && income < 500 || $scope.selectedincome == 'Y' && income < 5000) {
                flag = 0;
                $scope.paymenterror = true;
            }
            else if ($scope.selectedincome == 'M' && income > 416666 || $scope.selectedincome == 'Y' && income > 5000000) {
                flag = 0;
                $scope.paymenterror = true;
            }

            else {
                $scope.paymenterror = false;
            }
            if (flag == 0) {
                $scope.showbtninvestloader = false;
            }
            if ($scope.datespecificmsg != '' && $scope.datespecificmsg != undefined) {
                $scope.showbtninvestloader = false;
                $scope.dateerror = false;
            }
            if (flag == 1 && ($scope.datespecificmsg == '' || $scope.datespecificmsg == undefined)) {
                $rootScope.scrollhide = '';
                $scope.historyback("edit");
                if ($scope.selectedincome == "M") {
                    $scope.SumInsured = parseInt(income);
                    $scope.getDuration = "Monthly"
                }
                else {
                    $scope.SumInsured = income;
                    $scope.getDuration = "Yearly"
                }
                if ($scope.selectedincome) {
                    $rootScope.nontermpaymode = $scope.selectedincome.toLowerCase();
                }
                $scope.investAmount = income;
                $scope.editcross = true;
                $scope.txtActualIncomeInv = $scope.txtActualIncome;
                $scope.noshowloader = false;
                $scope.showloader = true;
                $scope.$root.popupinvestmentpage = false;
                $scope.template("InvestmentEdit", false);
                $scope.Quotes_Data = undefined;
                $scope.quotesdatatemp = undefined;
                $scope.quotesdata = undefined;
                $scope.quotesdatatemp1 = undefined;

                $scope.quotes_userdata.Requests[0].Amount = $scope.investAmount;

                $scope.quotes_userdata.userAge = DataFactory.calculateAge($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear);
                $scope.DOBs = JSON.parse(DataFactory.stringifyWcf($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear));
                $scope.quotes_userdata.Requests[0].DOBs[0] = $scope.DOBs;
                $scope.quotes_userdata.dateofbirth = $scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear;
                DataFactory.investmentrequestdata($scope, 2);
                var gender = $scope.gender;
                var gender = $scope.gender;
                $scope.quotes_userdata.Gender = gender;
                if ($scope.gender == "M") {
                    $scope.investmentGender = "Male";
                }
                else {
                    $scope.investmentGender = "Female";
                }
                $scope.quotes_userdata.Requests[0].Gender = $scope.gender;
                $scope.quotesrequest.Requests[0].Gender = $scope.gender;
                $scope.lazyloadcycle = 0;
                $scope.quotesrequest.Requests[0].IsMonthly = false;
                if ($scope.quotesrequest.Requests[0].PayingMode.toLowerCase() == 'm' || $scope.selectedincome == "M") {
                    $scope.quotesrequest.Requests[0].IsMonthly = true;
                }
                else if ($scope.selectedincome == "Y") {
                    $scope.quotesrequest.Requests[0].IsMonthly = false;
                }
                $scope.Initialzedata();

                if ($location.$$search.editsearch) {
                    delete $location.$$search.editsearch;
                    $location.$$compose();
                }
            }
        }
        $scope.getpensionquote = function () {
            $scope.errorId = "";
            $scope.Compareselection = [];
            $scope.Comparedisplay = false;
            $scope.data = [];
            $scope.showbtnpensionloader = true;
            var flag = 1;
            var income = parseInt($scope.txtActualIncome);
            if ($scope.txtActualIncome == '' || $scope.txtActualIncome == undefined || isNaN($scope.txtActualIncome) || $scope.txtActualIncome == null) {
                flag = 0;
                $scope.annualerror = true;
            }
            else {
                $scope.annualerror = false;

            }
            if ($scope.payMode == undefined || $scope.payMode == '') {
                flag = 0;
                $scope.errorId = "error-outline";
                //$scope.incomeerror = true;
            }
            else {
                $scope.errorId = "";
                $scope.incomeerror = false;
            }
            if ($scope.IGdate == undefined || $scope.IGmonth == undefined || $scope.IGyear == undefined || $scope.IGdate == "" || $scope.IGmonth == "" || $scope.IGyear == "") {
                flag = 0;
                $scope.dateerror = true;
            }
            else {
                $scope.age = $scope.getAge($scope.IGdate + '-' + $scope.IGmonth + '-' + $scope.IGyear);
                if ($scope.age < 18 || $scope.age > 60) {
                    $scope.dateerror = true;
                    flag = 0;
                }
                else {
                    $scope.dateerror = false;
                }
            }
            if ($scope.payMode == 'M' && income < 500 || $scope.payMode == 'Y' && income < 5000) {
                flag = 0;
                $scope.paymenterror = true;
            }
            else if ($scope.payMode == 'M' && income > 41666 || $scope.payMode == 'Y' && income > 500000) {
                flag = 0;
                $scope.paymenterror = true;
            }
            else {
                $scope.paymenterror = false;
            }
            $scope.insDOB = $scope.IGdate + '-' + $scope.IGmonth + '-' + $scope.IGyear;
            //var today = new Date();
            //if ($rootScope.CurrenDateTimeService != undefined) {
            //    today = new Date($rootScope.CurrenDateTimeService);
            //}
            //var DateDiff = (NonTermFactory.AgeGroup($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear) / 12);
            //if (DateDiff < 18 || DateDiff > 60) {
            //    $scope.dateerror = true;
            //    flag = 0;
            //}
            if (flag == 0) {
                $scope.showbtnpensionloader = false;
            }
            if ($scope.datespecificmsg != '' && $scope.datespecificmsg != undefined) {
                $scope.showbtnpensionloader = false;
                $scope.dateerror = false;
            }
            if (flag == 1 && ($scope.datespecificmsg == '' || $scope.datespecificmsg == undefined)) {
                $rootScope.scrollhide = '';
                $scope.historyback("edit");
                $scope.editcross = true;
                if ($scope.payMode == 'M') {
                    $scope.SumInsured = parseInt(income);
                    $scope.getDuration = "Monthly"
                }
                else {
                    $scope.SumInsured = income;
                    $scope.getDuration = "Yearly";
                }
                $scope.investAmount = income;

                $scope.noshowloader = false;
                $scope.showloader = true;
                $scope.txtActualIncomeInv = $scope.txtActualIncome;
                $scope.Quotes_Data = undefined;
                $scope.quotesdatatemp = undefined;
                $scope.quotesdata = undefined;
                $scope.quotesdatatemp1 = undefined;

                $scope.quotes_userdata.Requests[0].Amount = $scope.investAmount;

                $scope.quotes_userdata.userAge = DataFactory.calculateAge($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear);
                $scope.ageinyr = $scope.quotes_userdata.userAge;
                $scope.DOBs = JSON.parse(DataFactory.stringifyWcf($scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear));
                $scope.quotes_userdata.Requests[0].DOBs[0] = $scope.DOBs;
                if ($scope.ageinyr < 46) {
                    $scope.TermPeriod1 = 60;
                }
                else {
                    $scope.TermPeriod1 = 70;
                }
                $scope.payTill = $scope.TermPeriod1;
                $scope.payTilltext = $scope.payTill;
                $scope.retirementage = [];
                if ($scope.ageinyr + 10 <= 45) {
                    var retirementStartYear = 45;
                }
                else if ($scope.ageinyr + 10 > 45) {
                    var retirementStartYear = $scope.ageinyr + 10;
                }
                for (j = retirementStartYear; j <= 75; j++) {
                    $scope.retirementage.push({ Name: j + ' Yrs', value: j })
                }
                $scope.pensionPayTill = [];
                for (j = $scope.ageinyr; j <= $scope.TermPeriod1; j++) {
                    $scope.pensionPayTill.push({ Name: j + ' Yrs', value: j })
                }
                $scope.PaymentDuration = parseInt($scope.payTill - $scope.quotes_userdata.userAge);
                $scope.MaturityTerm = parseInt($scope.TermPeriod1 - $scope.quotes_userdata.userAge);
                $scope.quotesrequest.Requests[0].MaturityTerm = $scope.MaturityTerm;
                $scope.quotesrequest.Requests[0].PaymentDuration = $scope.PaymentDuration;
                var gender = $scope.gender;
                if ($scope.gender == "M") {
                    $scope.investmentGender = "Male";
                }
                else {
                    $scope.investmentGender = "Female";
                }
                $scope.quotes_userdata.Requests[0].Gender = $scope.gender;
                DataFactory.pensionRequestData($scope, 2);
                $scope.$root.popuppensionpage = false;
                $scope.template("PensionEdit", false);
                $scope.lazyloadcycle = 0;
                $scope.Initialzedata();

                if ($location.$$search.editsearch) {
                    delete $location.$$search.editsearch;
                    $location.$$compose();
                }
            }

        }
        $scope.getchildquotes = function () {
            var flag = 1;
            $scope.Compareselection = [];
            $scope.Comparedisplay = false;
            $scope.data = [];
            $scope.dateerror = false;
            $scope.datechilderror = false;
            // $scope.showbtnchildloader = true;
            if ($scope.selectedincome == undefined || $scope.selectedincome == "" || $scope.selectedincome == null || isNaN($scope.selectedincome)) {
                flag = 0;
                $scope.incomeerror = true;
            }
            else {
                $scope.nonTermvalidate($scope.selectedincome, 'child');
                if ($scope.incomeerror == true) {
                    flag = 0;
                }
            }
            if ($scope.IGdate == undefined || $scope.IGmonth == undefined || $scope.IGyear == undefined || $scope.IGdate == "" || $scope.IGmonth == "" || $scope.IGyear == "" || $scope.dateerror == true) {
                flag = 0;
                $scope.DobMessage = "Parent's age should be (Min. 18 yrs & Max. 65 yrs)";
                $scope.dateerror = true;
            }
            else {
                $scope.dateerror = false;
                var yy = $scope.IGmonth + '-' + $scope.IGdate + '-' + $scope.IGyear;
                $scope.age = $scope.getAge(yy);
            }
            if ($scope.IGchilddate == undefined || $scope.IGchildmonth == undefined || $scope.IGchildyear == undefined || $scope.IGchilddate == "" || $scope.IGchildmonth == "" || $scope.IGchildyear == "" || $scope.datechilderror == true) {
                flag = 0;
                $scope.datechilderror = true;
            }
            else {
                $scope.datechilderror = false;
            }
            var DateDiff = this.calculateAgeInYear($scope.IGchildmonth + "-" + $scope.IGchilddate + "-" + $scope.IGchildyear, $scope.IGmonth + "-" + $scope.IGdate + "-" + $scope.IGyear);
            if (!isNaN(DateDiff)) {
                if ($scope.age >= 18 && $scope.age <= 65) {
                    if (DateDiff < 18) {
                        $scope.DobMessage = "Parent's & child age difference should be 18 yrs";
                        $scope.dateerror = true;
                        flag = 0;
                    }
                    else {
                        $scope.dateerror = false;
                    }
                }
                else {
                    $scope.dateerror = true;
                    flag = 0;
                    $scope.DobMessage = "Parent's age should be (Min. 18 yrs & Max. 65 yrs)";
                }
            }
            var age = (NonTermFactory.AgeGroup($scope.IGchilddate + "-" + $scope.IGchildmonth + "-" + $scope.IGchildyear) / 12);
            if (!isNaN(age)) {
                if (age > 17) {
                    $scope.datechilderror = true;
                    flag = 0;
                }
                else {
                    $scope.datechilderror = false;
                }
            }
            else {
                $scope.datechilderror = true;
                flag = 0;
            }

            if (flag == 0 || ($scope.datespecificmsg != '' && $scope.datespecificmsg != undefined)) {
                $scope.showbtnchildloader = false;
                // $scope.dateerror = false;
            }
            if ($scope.checkchilddate == 1) {
                $scope.datechilderror = true;
                flag = 0;
            }
            if ($scope.parentage == 1) {
                $scope.dateerror = true;
                flag = 0;
                $scope.DobMessage = "Parent's age should be (Min. 18 yrs & Max. 65 yrs)";
            }
            if (flag == 1 && ($scope.datespecificmsg == '' || $scope.datespecificmsg == undefined)) {
                $scope.showbtnchildloader = true;
                $rootScope.scrollhide = '';
                $scope.editcross = true;
                $scope.historyback("edit");
                $scope.DOBs[0] = $scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear;
                $scope.DOBs[1] = $scope.IGchilddate + "-" + $scope.IGchildmonth + "-" + $scope.IGchildyear;
                $scope.quotes_userdata.Requests[0].DOBs[0] = $scope.DOBs[0];
                $scope.quotes_userdata.Requests[0].DOBs[1] = $scope.DOBs[1];
                $scope.SumInsured = $scope.selectedincome;
                $scope.quotes_userdata.userAge = DataFactory.calculateAge($scope.DOBs[0].toString());
                $scope.quotes_userdata.childAge = DataFactory.calculateAge($scope.DOBs[1].toString());
                if ($scope.childincometype == "M") {
                    $scope.getDuration = "Monthly";
                }
                else {
                    $scope.getDuration = "Yearly";
                }
                if ($scope.childincometype) {
                    $rootScope.nontermpaymode = $scope.childincometype.toLowerCase();
                }
                $scope.investAmount = $scope.selectedincome;
                $scope.quotes_userdata.Requests[0].Amount = $scope.selectedincome;

                $scope.quotes_userdata.Requests[0].Gender = $scope.formgender;
                $scope.noshowloader = false;
                $scope.showloader = true;
                $scope.$root.popupchildpage = false;
                $scope.template("ChildEdit", false);
                $scope.Quotes_Data = undefined;
                $scope.quotesdatatemp = undefined;
                $scope.quotesdata = undefined;
                $scope.quotesdatatemp1 = undefined;
                if ($scope.formgender == "M")
                    var gender = $scope.gender;
                if ($scope.gender == "M") {
                    $scope.investmentGender = "Male";
                }
                else {
                    $scope.investmentGender = "Female";
                }
                $scope.quotes_userdata.Requests[0].Gender = $scope.gender;
                DataFactory.childRequestData($scope, 2);
                $scope.$root.popupchildpage = false;
                $scope.template("ChildEdit", false);
                $scope.lazyloadcycle = 0;
                $scope.Initialzedata();

                if ($location.$$search.editsearch) {
                    delete $location.$$search.editsearch;
                    $location.$$compose();
                }
            }
        }
        $scope.calculateAgeInYear = function (insDOB, childDOB) {
            var date1 = new Date(insDOB);
            var date2 = new Date(childDOB);
            var diffDays = parseInt((date2 - date1) / (1000 * 60 * 60 * 24) / 365);
            return Math.abs(diffDays);

        }
        $scope.validatedot = function (value) {
            $scope = TermFactory.calculateSumAssuredRange($scope, value);
        }
        $scope.carlist = function () {
            var urlservice = globals.ServiceURL + "/MasterService.svc/web/GetCarModelList";
            $scope.carupdatedmakemodelapilist = CommonService.carupdatedmakemodelservice($scope);
            var ServiceName = "MasterService";
            $timeout(function () {
                if ($scope.CarMakeModeltime == 0) {
                    $scope.TimeOutService("2000", urlservice, ServiceName);
                    $scope.responsenull['GetCarModelList'] = 0;
                }
                else {
                    $scope.CarMakeModeltime = 0;
                    $scope.responsenull['GetCarModelList'] = 1;
                }
            }, 2000);
            $scope.carupdatedmakemodelapilist.then(function (result) {
                result.data = angular.fromJson(result.data);
                $scope.GetTime['GetCarModelList'] = new Date().getTime();
                console.log("himanshu jain");
                $scope.CarMakeModeltime = 1;
                if ($scope.responsenull['GetCarModelList'] == 0) {
                    $scope.totaltime['GetCarModelList'] = parseInt($scope.GetTime['GetCarModelList'] - $scope.HitTime['GetCarModelList']);
                    $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime['GetCarModelList']);
                }
                console.log(result);
                $scope.carlistdata1 = [];
                $scope.cartemplist = result.data;
                $scope.carlistdata1 = result.data;
                $scope.carlistdata = [{ ModelName: "Maruti Suzuki Swift Dzire LDI, DIESEL, 5, 1248", MakeId: 3, ModelId: 14246 }, { ModelName: "Maruti Suzuki Wagon R 1.0 LX, PETROL, 5, 998", MakeId: 3, ModelId: 14318 },
                { ModelName: "Hyundai Grand i10 Asta 1.1 CRDi, DIESEL, 5, 1120", MakeId: 1, ModelId: 13937 }, { ModelName: "Hyundai Elite i20 Asta 1.2, PETROL, 5, 1197", MakeId: 1, ModelId: 13904 }, { ModelName: "Honda City V (Petrol), PETROL, 5, 1497", MakeId: 2, ModelId: 13855 },
                { ModelName: "RENAULT Duster RxE, PETROL, 5, 1598", MakeId: 44, ModelId: 14658 }, { ModelName: "Maruti Suzuki Swift Dzire LXi, PETROL, 5, 1298", MakeId: 3, ModelId: 14250 }, { ModelName: "Ford Figo Base 1.2 Ti-VCT, PETROL, 5, 1196", MakeId: 5, ModelId: 14538 },
                { ModelName: "Hyundai Eon Era + (LPG), CNG, 5, 814", MakeId: 1, ModelId: 13923 }, { ModelName: "Toyota Etios Liva G, PETROL, 5, 1197", MakeId: 6, ModelId: 14471 }, { ModelName: "Honda Amaze 1.2 E i-VTEC, PETROL, 5, 1198", MakeId: 2, ModelId: 13825 }];
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        $scope.citylist = function () {
            var urlservice = globals.ServiceURL + "/MasterService.svc/web/GetCarRTOList";
            $scope.carupdatedrtoapilist = CommonService.carupdatedrtoservice($scope);
            var ServiceName = "MasterService";
            $timeout(function () {
                if ($scope.CityListtime == 0) {
                    $scope.TimeOutService("2000", urlservice, ServiceName);
                    $scope.responsenull['GetCarRTOList'] = 0;
                }
                else {
                    $scope.CityListtime = 0;
                    $scope.responsenull['GetCarRTOList'] = 1;
                }
            }, 2000);
            $scope.carupdatedrtoapilist.then(function (result) {
                result.data = angular.fromJson(result.data);
                $scope.GetTime['GetCarRTOList'] = new Date().getTime();
                console.log("himanshu jain");
                $scope.CityListtime = 1;
                if ($scope.responsenull['GetCarRTOList'] == 0) {
                    $scope.totaltime['GetCarRTOList'] = parseInt($scope.GetTime['GetCarRTOList'] - $scope.HitTime['GetCarRTOList']);
                    $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime['GetCarRTOList']);
                }
                console.log(result);
                $scope.citystate1 = [];
                $scope.citystate1 = result.data;

                $scope.citystate = [{ CityName: "(DL3C) Delhi-Sheikh Sarai, Delhi", RTOCode: "DL3C", CityCode: 123, StateCode: 10 }, { CityName: "(UP16) GAUTAMBUDDH NAGAR, Uttar Pradesh", RTOCode: "UP16", CityCode: 664, StateCode: 34 },
                { CityName: "(HR55) GURGAON, Haryana", RTOCode: "HR55", CityCode: 217, StateCode: 13 }, { CityName: "(UP14) GHAZIABAD, Uttar Pradesh", RTOCode: "UP14", CityCode: 662, StateCode: 34 }, { CityName: "(MH47) Mumbai, Maharashtra", RTOCode: "MH47", CityCode: 1046, StateCode: 21 },
                { CityName: "(MH48) Mumbai, Maharashtra", RTOCode: "MH48", CityCode: 1047, StateCode: 21 }, { CityName: "(TN01) CHENNAI, TAMILNADU", RTOCode: "TN01", CityCode: 597, StateCode: 31 }, { CityName: "(GJ1) Ahmedabad, Gujarat", RTOCode: "GJ1", CityCode: 1387, StateCode: 12 },
                { CityName: "(RJ14) JAIPUR, Rajasthan", RTOCode: "RJ14", CityCode: 572, StateCode: 29 }, { CityName: "(MH12) PUNE, Maharashtra", RTOCode: "MH12", CityCode: 416, StateCode: 21 }, { CityName: "(WB02) KOLKATA, West Bengal", RTOCode: "WB02", CityCode: 730, StateCode: 35 }, { CityName: "(KA51) BANGALORE, Karnataka", RTOCode: "KA51", CityCode: 349, StateCode: 17 }];
            }, function (response) {
                ServiceRespnse(response);
            });
        }
        $scope.flaclaim = function (yom, flag) {
            var arrNeverNCB = [50, 50, 50, 50, 45, 35, 25, 20, 0];
            var arrYearNCB = [0, 20, 25, 35, 45, 50, 50, 50, 50];
            var monthNames = ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ];
            var bool = true;
            var year = $scope.year.toString();
            $scope.regyear = [];
            var vddlregyear = 0;

            if (yom == year.trim()) {
                var val = 'No~' + arrNeverNCB[vddlregyear - 1];
                var option = { value: val, text: "Never" };
                $scope.regyear.push(option);
            }
            else if (yom == "0") {
                var option = { value: "Claim Last Taken", text: "Claim Last Taken" };
                $scope.regyear.push(option);
            }
            else {
                var findYear = year - yom;
                var val = 'No~' + arrNeverNCB[vddlregyear + 1];
                var option = { value: val, text: "Never" };
                $scope.regyear.push(option);
                var k = 2;
                var s = 1;
                var j = 0;
                for (var i = findYear - 1; i >= 0; i--) {
                    if (bool == true) {

                        var val = 'Yes~' + arrYearNCB[0];
                        var text = "Less than" + " " + (findYear - i) + " " + "Year ago";
                        var option = { value: val, text: text };
                        $scope.regyear.push(option);
                        bool = false;
                    }
                    else {
                        var val = 'No~' + arrYearNCB[k - 2];
                        //option.text = s + " " + "-" + " " + (findYear - i) + " " + "Years" + " " + "ago";
                        if ($scope.date.getMonth() != 0) {
                            var text = (monthNames[$scope.date.getMonth()]) + " " + (year - (s + 1)) + " " + "to" + " " + (monthNames[$scope.date.getMonth() - 1]) + " " + (year - (j + 1));

                        }
                        else {
                            var text = (monthNames[$scope.date.getMonth()]) + " " + (year - (s + 1)) + " " + "to" + " " + (monthNames[11]) + " " + (year - (s + 1));

                        }
                        if ((year - (s + 1)) != year - 6) {
                            var option = { value: val, text: text };
                            $scope.regyear.push(option);
                        }
                        s++;
                        j++;
                        bool = false;
                    }
                    k++;
                }
            }
            $scope.regyear1 = $scope.regyear;
        }

        $scope.childtestdate = function (flag, diff) {
            var childcheck = 0;
            if ($scope.IGchilddate == undefined && flag == 1) {
                $scope.datechilderror = true;
            }
            else if ($scope.IGchildmonth == undefined && flag == 2) {
                $scope.datechilderror = true;
            }
            else if ($scope.IGchildyear == undefined && flag == 3) {
                $scope.datechilderror = true;
            }
            //            else if (parseInt($scope.IGchilddate) == 0 || parseInt($scope.IGchildmonth) == 0 || parseInt($scope.IGchildyear) == 0) {
            //                $scope.datechilderror = true;
            //                childcheck = 1;
            //            }
            else {
                $scope.datechilderror = false;
                $scope.testdatespecific(flag, $scope.IGchilddate, $scope.IGchildmonth, $scope.IGchildyear);
                $scope.datespecificmsgchild = $scope.datespecificmsg;
            }
            if ($scope.datechilderror == true) {
                $scope.datespecificmsg = '';
                $scope.datespecificmsgchild = '';
            }
            if ($scope.datespecificmsg == '') {
                if ($scope.IGchildmonth != undefined && $scope.IGchilddate != undefined && $scope.IGchildyear != undefined && $scope.IGchildmonth != '' && $scope.IGchilddate != '' && $scope.IGchildyear != '') {
                    var d = new Date();
                    if ($rootScope.CurrenDateTimeService != undefined) {
                        d = new Date($rootScope.CurrenDateTimeService);
                    }
                    var n = d.getFullYear();
                    var m = d.getMonth();
                    var yy = $scope.IGchildmonth + '-' + $scope.IGchilddate + '-' + $scope.IGchildyear;
                    $scope.child_age = $scope.getAge(yy);

                    if (isNaN($scope.child_age) == true || isNaN(parseInt($scope.IGchildmonth)) == true || isNaN(parseInt($scope.IGchilddate)) == true || isNaN(parseInt($scope.IGchildyear)) == true) {
                        childcheck = 1;
                        $scope.child_age = undefined;
                    }
                    if ($scope.child_age >= 18) {
                        $scope.datechilderror = true;
                        childcheck = 1;
                    }
                    if (isNaN($scope.datechilderror) == true) {
                        check = 1;
                    }
                    if ((ValidationFactory.onlynumber($scope.IGchildmonth) == "False") || (ValidationFactory.onlynumber($scope.IGchilddate) == "False") || (ValidationFactory.onlynumber($scope.IGchildyear) == "False")) {
                        $scope.datechilderror = true;
                        childcheck = 1;
                    }
                    else if ($scope.child_age < 0) {
                        $scope.datechilderror = true;
                        childcheck = 1;
                    }
                    else if ($scope.IGchildyear % 4 != 0 && $scope.IGchildyear % 100 != 0 && ($scope.IGchildmonth == 2 || $scope.IGchildmonth == 02) && $scope.IGchilddate > 28) {
                        $scope.datechilderror = true;
                        childcheck = 1;
                    }
                    else if ($scope.IGchildyear % 400 != 0 && $scope.IGchildyear % 100 == 0 && ($scope.IGchildmonth == 2 || $scope.IGchildmonth == 02) && $scope.IGchilddate > 28) {
                        $scope.datechilderror = true;
                        childcheck = 1;
                    }
                    if ($scope.IGchildmonth > 12 || $scope.IGchildmonth <= 0) {
                        $scope.datechilderror = true;
                        childcheck = 1;
                    }
                    else if (($scope.IGchildmonth == 2 || $scope.IGchildmonth == 02) && $scope.IGchilddate > 29) {
                        $scope.datechilderror = true;
                        childcheck = 1;
                    }
                    else if (($scope.IGchildmonth == 4 || $scope.IGchildmonth == 6 || $scope.IGchildmonth == 9 || $scope.IGchildmonth == 11) && $scope.IGchilddate > 30) {
                        $scope.datechilderror = true;
                        childcheck = 1;
                    }

                    if ($scope.IGchilddate > 31 || $scope.IGchilddate <= 0) {
                        $scope.datechilderror = true;
                        childcheck = 1;
                    }
                }

                if (childcheck == 1) {
                    $scope.datechilderror = true;
                    $scope.formchilddob = undefined;
                    $scope.chatchildageflag = false;
                }

                if (childcheck == 0 && $scope.IGchilddate != undefined && $scope.IGchildmonth != undefined && $scope.IGchildyear != undefined) {
                    $scope.datechilderror = false;
                    $scope.chatchildageflag = true;
                    $scope.formchilddob = $scope.IGchilddate + '-' + $scope.IGchildmonth + '-' + $scope.IGchildyear;
                }
                $scope.checkchilddate = childcheck;
            }
        }

        $scope.getAge = function (dateString) {
            if (dateString != undefined) {
                var today = new Date();
                if ($rootScope.CurrenDateTimeService != undefined) {
                    today = new Date($rootScope.CurrenDateTimeService);
                }
                var tempage = dateString.split("-");
                var birthDate = new Date(parseInt(tempage[2]), (parseInt(tempage[1]) - 1), parseInt(tempage[0]));
                var age = today.getFullYear() - birthDate.getFullYear();
                var m = today.getMonth() - birthDate.getMonth();
                if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                    age--;
                }
                return age;
            }
        }
        $scope.getmonth = function (dateString) {
            var tempage = dateString.split("-");
            var past_date = new Date(tempage[2], tempage[1], tempage[0]);
            var current_date = new Date();
            if ($rootScope.CurrenDateTimeService != undefined) {
                current_date = new Date($rootScope.CurrenDateTimeService);
            }
            var difference = (current_date.getFullYear() * 12 + current_date.getMonth()) - (past_date.getFullYear() * 12 + past_date.getMonth());
            return difference;
        }
        $scope.checkdatepattern = function (dd, mm, yyyy, flag) {
            var check = DataFactory.CheckdatePattern(dd, mm, yyyy);
            if (flag == 1) {
                $scope.carregerror = false;
                if (check == 1) {
                    $scope.carregerror = true;
                    $scope.regfill = false;
                }
                else if (check == 2) {
                    $scope.carregerror = true;
                }
                else {
                    $scope.carregerror = false;
                    $scope.regfill = true;
                }
            }
            else if (flag == 2) {
                $scope.policyerror = false;
                if (check == 1) {
                    $scope.policyerror = true;
                    $scope.regfill = false;
                }
                else if (check == 2) {
                    $scope.policyerror = true;
                }
                else {
                    $scope.policyerror = false;
                    $scope.regfill = true;
                }
            }
            return check;
        }
        $scope.testdate = function (flag, diff) {
            var check = 0;
            if ($scope.IGdate == undefined && flag == 1) {
                $scope.dateerror = true;
            }
            else if ($scope.IGmonth == undefined && flag == 2) {
                $scope.dateerror = true;
            }
            else if ($scope.IGyear == undefined && flag == 3) {
                $scope.dateerror = true;
            }
            else {
                $scope.dateerror = false;
                $scope.testdatespecific(flag, $scope.IGdate, $scope.IGmonth, $scope.IGyear);
            }
            if ($scope.dateerror == true) {
                $scope.datespecificmsg = '';
            }
            $scope.datespecificmsgparent = $scope.datespecificmsg;
            if ($scope.datespecificmsg == '') {
                if ($scope.IGdate != undefined && $scope.IGmonth != undefined && $scope.IGyear != undefined && $scope.IGdate != '' && $scope.IGmonth != '' && $scope.IGyear != '') {
                    var d = new Date();
                    if ($rootScope.CurrenDateTimeService != undefined) {
                        d = new Date($rootScope.CurrenDateTimeService);
                    }
                    var n = d.getFullYear();
                    var m = d.getMonth();

                    var yy = $scope.IGdate + '-' + $scope.IGmonth + '-' + $scope.IGyear;
                    if (diff == 1) {
                        $scope.age = $scope.getAge(yy);
                    }

                    if (isNaN($scope.age) == true || isNaN(parseInt($scope.IGmonth)) == true || isNaN(parseInt($scope.IGdate)) == true || isNaN(parseInt($scope.IGyear)) == true) {
                        check = 1;
                        $scope.age = undefined;
                    }

                    if ($scope.age < 18) {
                        $scope.dateerror = true;
                        check = 1;
                    }

                    if ((ValidationFactory.onlynumber($scope.IGmonth) == "False") || (ValidationFactory.onlynumber($scope.IGdate) == "False") || (ValidationFactory.onlynumber($scope.IGyear) == "False")) {
                        $scope.dateerror = true;
                        check = 1;
                    }

                    else if ($scope.age > 65 && $scope.product != 'Health' && $scope.product != 'Pension') {
                        $scope.dateerror = true;
                        check = 1;
                    }
                    else if ($scope.age > 100 && $scope.product == 'Health') {
                        $scope.dateerror = true;
                        check = 1;
                    }
                    else if ($scope.age > 60 && $scope.product == 'Pension') {
                        $scope.dateerror = true;
                        check = 1;
                    }
                    if ($scope.IGyear % 4 != 0 && $scope.IGyear % 100 != 0 && ($scope.IGmonth == 2 || $scope.IGmonth == 02) && $scope.IGdate > 28) {
                        $scope.dateerror = true;
                        check = 1;
                    }
                    else if ($scope.IGyear % 400 != 0 && $scope.IGyear % 100 == 0 && ($scope.IGmonth == 2 || $scope.IGmonth == 02) && $scope.IGdate > 28) {
                        $scope.dateerror = true;
                        check = 1;
                    }

                    if ($scope.IGmonth > 12 || $scope.IGmonth <= 0) {
                        $scope.dateerror = true;
                        check = 1;
                    }
                    else if (($scope.IGmonth == 2 || $scope.IGmonth == 02) && $scope.IGdate > 29) {
                        $scope.dateerror = true;
                        check = 1;
                    }
                    else if (($scope.IGmonth == 4 || $scope.IGmonth == 6 || $scope.IGmonth == 9 || $scope.IGmonth == 11) && $scope.IGdate > 30) {
                        $scope.dateerror = true;
                        check = 1;
                    }

                    if ($scope.IGdate > 31 || $scope.IGdate <= 0) {
                        $scope.dateerror = true;
                        check = 1;
                    }
                }
                if ($scope.product == 'Child') {
                    if ($scope.age < 18 || $scope.age > 65) {
                        $scope.DobMessage = "Parent's age should be (Min. 18 yrs & Max. 65 yrs)";
                        $scope.dateerror = true;
                        check = 1;
                    }
                }
                if (check == 1) {
                    $scope.formdob = undefined;
                    $scope.dateerror = true;
                    $scope.chatageflag = false;
                }

                if (check == 0 && $scope.IGdate != undefined && $scope.IGmonth != undefined && $scope.IGyear != undefined) {
                    $scope.dateerror = false;
                    $scope.chatageflag = true;
                    $scope.agemonth = $scope.getmonth(yy);
                    console.log($scope.agemonth);
                    $scope.formdob = $scope.IGdate + '-' + $scope.IGmonth + '-' + $scope.IGyear;
                }
                $scope.parentage = check;
            }
        }
        $scope.datefocus = function (flag) {
            if (flag == 1) {
                if ($scope.IGdate.length == 2) {
                    $('#Tel14').focus();
                    $('#Tel33').focus();
                    $('#Tel34').focus();
                    $('#Tel2').focus();
                    $('#Tel44').focus();
                    $('#Tel54').focus();
                    $('#Tel5').focus();
                    $('#Tel14').focus();
                    $('#Tel16').focus();
                    $('#Tel17').focus();
                    // $('#Tel18').focus();
                    $('#Tel20').focus();
                    $('#Te95').focus();
                }
            }
            else if (flag == 6 && $scope.carregdate != undefined) {
                if ($scope.carregdate.length == 2) {
                    $('#Tel1').focus();
                }
            }
            else if (flag == 7 && $scope.policydate != undefined) {
                if ($scope.policydate.length == 2) {
                    $('#Tel4').focus();
                }
            }
            else if (flag == 2 && $scope.regdate != undefined) {
                if ($scope.regdate.toString().length == 2) {
                    $('#Tel17').focus();

                }
            }
            else if (flag == 4 && $scope.expdate != undefined) {
                if ($scope.expdate.toString().length == 2) {
                    $('#Tel14').focus();
                }
            }
            else if (flag == 3 && $scope.IGchilddate != undefined) {
                if ($scope.IGchilddate.length == 2) {
                    $('#Tel24').focus();
                    $('#Te98').focus();
                }
            }
        }

        $scope.monthfocus = function (flag) {
            if (flag == 2 && $scope.IGmonth != undefined) {
                if ($scope.IGmonth == 3) {
                    $('#Tel15').focus();
                    $('#Tel35').focus();
                    $('#Tel3').focus();
                    $('#Tel45').focus();
                    $('#Tel55').focus();
                    $('#Te96').focus();
                }
                else if ($scope.IGmonth.length == 2) {
                    $('#Tel15').focus();
                    $('#Tel34').focus();
                    $('#Tel35').focus();
                    $('#Tel3').focus();
                    $('#Tel45').focus();
                    $('#Tel55').focus();
                    $('#Te96').focus();
                    $('#Tel6').focus();
                    $('#Tel15').focus();
                    $('#Tel18').focus();
                    $('#Tel21').focus();
                }

            }
            else if (flag == 6 && $scope.regmonth != undefined) {
                if ($scope.regmonth.toString().length == 2) {
                    $('#Tel18').focus();
                }
            }
            else if (flag == 7 && $scope.carregmonth != undefined) {
                if ($scope.carregmonth.toString().length == 2) {
                    $('#Tel2').focus();
                }
            }
            else if (flag == 8 && $scope.policymonth != undefined) {
                if ($scope.policymonth.toString().length == 2) {
                    $('#Tel5').focus();
                }
            }
            else if (flag == 5 && $scope.expmonth != undefined) {
                if ($scope.expmonth.toString().length == 2) {
                    $('#Tel15').focus();
                }
            }
            else if (flag == 4 && $scope.IGchildmonth != undefined) {
                if ($scope.IGchildmonth == 3) {
                    $('#Tel25').focus();
                    $('#Te99').focus();
                }
                else if ($scope.IGchildmonth.length == 2) {
                    $('#Tel25').focus();
                    $('#Te99').focus();
                }
            }

        }

        $scope.clicktocallpopopen = function (value) {
            if ($scope.quotesrequest.utmSource.toLowerCase() != "epnetwork") {
                $scope.clicktocallOtp = false;
                $scope.showcantdecide = false;
                $scope.clicktocallflag = false;
                if ($rootScope.clickToCallShow != true) {
                    $(".phoneIcon").animate({ right: '-141px' }, 500);
                    $(".phoneIconBg").fadeIn(1000);
                    $rootScope.clickToCallShow = true;
                    $location.search("callsearch", "true");
                    $rootScope.c2cviewflag = 1;
                    $rootScope.scrollhide = 'scollClass';
                }
                else {
                    $rootScope.scrollhide = '';
                    $scope.historyback("c2c");
                    $(".phoneIcon").animate({ right: '-433px' }, 500);
                    $(".phoneIconBg").fadeOut(1001);
                    $rootScope.clickToCallShow = false;
                    var a = 'Click to Call ' + $scope.gaProduct;
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });
                }
            }
            else {
                $scope.TermSliderpopupSrc = '../HomePage/Template/TermSliderpopup.html';
                ConnectAgent($scope.quotesrequest.IGQuoteId, $scope.quotesrequest.PartnerAgentId);
            }
            return $scope;
        }




        $scope.getuserdetails = function (result) {

            $scope.getCPIDdatatime1 = 1;

            if (result.UserName != "" && result.UserName != undefined) {

                $scope.userName = result.UserName;
            }
            if (result.Email != "" && result.Email != undefined) {
                $scope.userEmailID = result.Email;
                $scope.Email = result.Email;
            }

            if (result.MobileNo != "" && result.MobileNo != undefined && result.MobileNo != $scope.IGquoteId + '999') {
                $scope.userMobileNumber = parseInt(result.MobileNo);
                $scope.usertxtMobileNumber = parseInt(result.MobileNo);
                $localStorage.mobile = $scope.usertxtMobileNumber;
            }
        }

        $scope.leadpopshow = function () {
            $rootScope.showleadpopup = true;
            $rootScope.scrollhide = 'scollClass';

            $scope.showcloseleadpop = false;
            $rootScope.showleadpopupInner = true;
            $scope.firstleadpop = 1;
            $scope.template("Lead", true);
        }

        function callquotes() {
            if ($scope.quotesrequest.BrowserId == undefined) {
                $scope.quotesrequest.IsQuotesfirst = true;
            }
            else {
                $scope.quotesrequest.IsQuotesfirst = false;
            }
            $scope.getuserdetails($scope.quotesrequest);
            $scope.quotesrequest.DeviceType = apidevice;
            $scope.quotesrequest.DeviceName = apios;
            $scope.quotesrequest.Browser = apiBrowser;
            DataFactory.GetEncryptedString($scope);

            DataFactory.GetOTPString($scope);

            DataFactory.GetLeadCreationEncryptedString($scope);

            $scope.utmSource = $scope.quotesrequest.utmSource;
            if ($scope.quotesrequest.Requests[0].RenewalUrl == "" || $scope.quotesrequest.Requests[0].RenewalUrl == null || $scope.quotesrequest.Requests[0].RenewalUrl == undefined) {
                $scope.quotesrequest.Requests[0].IsRenewal = false;
            }
            if ($scope.quotesrequest.utmSource != undefined) {
                if ($scope.quotesrequest.utmSource.toLowerCase() == "epnetwork") {
                    $scope.forcelead = true;
                    $scope.shareidshow = 1;
                    var leadpopforceflag = QuoteService.GetUserDetail($scope);
                    leadpopforceflag.then(function (data) {
                        console.log(data);
                        $scope.AgentMobile = data.data.MobileNumber;
                    }, function (response) {
                        ServiceRespnse(response);
                    });

                }
            }

            $rootScope.scrollhide = 'scollClass';
            if ($scope.product.toLowerCase() == "travel") {
                $scope.setcalendar();
            }
            if ($scope.quotesrequest.MobileNo != undefined) {
                $scope.usertxtMobileNumber = $scope.quotesrequest.MobileNo;
            }

            // if ($scope.product == "Twowheeler" || $scope.product == "Car") {   

            //    for(var i=0;i<$scope.quotesrequest.Requests[0].Features.length;i++)
            //    {
            //        $scope.quotesrequest.Requests[0].Features[i].IsSelected = true;
            //    }


            // }
            $scope.Initialzedata();
        }

        $scope.checkInvCal = function () {
            var flag = 0;
            if ($scope.calinvamt < 1 || $scope.calinvamt == undefined) {
                $scope.calinvamterror = true;
                flag = 1;
            }
            else {
                $scope.calinvamterror = false;
            }
            if ($scope.caldur < 1 || $scope.caldur == undefined) {
                $scope.caldurerror = true;
                flag = 1;
            }
            else {
                $scope.caldurerror = false;


            }
            if ($scope.calint < 1 || $scope.calint == undefined) {
                $scope.calinterror = true;
                flag = 1;
            }
            else {
                $scope.calinterror = false;
            }


            var a = $scope.calfreq + ' Calculator Open ' + $scope.gaProduct;

            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            if (flag == 0) {

                $scope.calfreq1 = $scope.calfreq;
                $scope.caldur1 = $scope.caldur;
                $scope.calinvamt1 = $scope.calinvamt;
                if ($scope.calfreq == "Yearly") {
                    NonTermFactory.calculateAnnually($scope);
                }
                else if ($scope.calfreq == "Half Yearly") {
                    NonTermFactory.calculateHalfYearly($scope);
                }
                else if ($scope.calfreq == "Quaterly") {
                    NonTermFactory.calculateQuaterly($scope);
                }
                else if ($scope.calfreq == "Monthly") {
                    NonTermFactory.calculateMonthly($scope);
                }
                else if ($scope.calfreq == "One Time") {
                    NonTermFactory.calculateOneTime($scope);
                }
            }

        }

        $scope.closecalpop = function () {
            $scope.OpenCalculator = false;
            $scope.Calculatorsrc = "";
            $rootScope.scrollhide = '';
        }

        $scope.customCal = function () {
            $scope.OpenCalculator = true;
            $rootScope.scrollhide = 'scollClass';
            if ($scope.calfreq == undefined) {
                $scope.calfreq = "Yearly";
            }
            // $scope.calfreq = "Y";
            $scope.futureValue = undefined;
            $scope.Calculatorsrc = '../HomePage/Template/calculator.html';
            var a = 'Calculator Open ' + $scope.gaProduct;

            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

        }

        function carrequestdata() {
            $scope.ProductId = 4;

            // $scope.$root.showmainloader = false;
            $scope.flaclaim($scope.year - 6);
            $scope.lastclaimtaken = $scope.regyear;
            $scope.product = 'Car';
            $rootScope.product = 'Car';


            $scope.quotesrequest = $rootScope.cardata;
            $rootScope.LandingUrl = $rootScope.cardata.LandingURL;
            $scope.quotes_userdata = $rootScope.cardata.Requests[0];
            showSanitizecust($rootScope.cardata.Email, $rootScope.cardata.MobileNo);
            $scope.setClientLogo($rootScope.cardata.utmSource);
            $rootScope.channelId = $rootScope.cardata.ChannelID;
            if ($scope.quotes_userdata.IsNewVehicle != true) {
                $scope.insurancetypeshow = true;
                $scope.newmotorshow = true;
            }

            $scope.IsCorporate = 0;
            $scope.quotesrequest.Requests[0].IsCorporate = false;
            // $localStorage.quotes_userdata = $scope.quotes_userdata;

            var result = DataFactory.carinitdata($scope);
            $scope = result;

            var request = DataFactory.CarQuotesNew($scope, 2);
            $scope = request;




            //var continuedata = TwowheelerFactory.Continuejourneydata($scope);
            if ($rootScope.cardata.Requests[0].PreviousPolicyType == "PREVBUNDLECO") {
                $scope.quotesrequest.Requests[0].InsuranceType = 'OD';
                $scope.insurancetypefn('OD');
                $scope.insurancetype = "22";
            }
            $scope.quotesrequest.Requests[0].IDV = 0;
            if ($scope.quotesrequest.Requests[0].IDV == 0) {
                $scope.data11.group1 = 0;
            }

            else {
                $scope.data11.group1 = 0;
                // $scope.enteridvvalue = parseInt($scope.quotesrequest.Requests[0].IDV);
                $scope.manualidv = false;
            }

            if ($scope.quotes_userdata.RTOCode == undefined || $scope.quotes_userdata.RTOCode == ""
                || $scope.quotes_userdata.BreakingDays == undefined || $scope.quotes_userdata.BreakingDays < 0
                || ($scope.quotes_userdata.ClaimTaken != true && $scope.quotes_userdata.ClaimTaken != false)
                || $scope.quotes_userdata.ClaimedNCB == undefined
                || $scope.quotes_userdata.KitValue == undefined || $scope.quotes_userdata.KitValue < 0
                || $scope.quotes_userdata.ModelId == undefined || $scope.quotes_userdata.ModelId == ""
                || $scope.quotes_userdata.MotorName == undefined || $scope.quotes_userdata.MotorName == ""
                || $scope.quotes_userdata.RequiredNCB == undefined
                || $scope.quotes_userdata.RegistrationYear == undefined || $scope.quotes_userdata.RegistrationYear == ""
                || $scope.quotes_userdata.RegistrationDate == undefined || $scope.quotes_userdata.RegistrationDate == "") {
                $scope.editsearch();
                $scope.editcross = false;
            }
            else {
                for (var i = 0; i < $scope.lastclaimtaken.length; i++) {
                    if ($scope.quotesrequest.Requests[0].ClaimedNCB == $scope.lastclaimtaken[i].value.split('~')[1]) {
                        $scope.carclaim = $scope.lastclaimtaken[i].value;
                    }
                }
                var date;
                var date1;
                if ($scope.prepolicydate1 == undefined) {


                    if ($scope.quotesrequest.Requests[0].InsuranceType == 'TP' && ($scope.quotesrequest.Requests[0].BreakingDays != 0 || $scope.quotesrequest.Requests[0].BreakingDays != '0')) {
                        $scope.prepolicydate = new Date().getDate() + '-' +
                            (new Date().getMonth() + 1) + '-' +
                            new Date().getFullYear();
                        $scope.policydate = new Date().getDate();
                        $scope.policymonth = new Date().getMonth() + 1;
                        $scope.policyyear = new Date().getFullYear();
                        $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate);
                    }
                    else {
                        $scope.prepolicydate = new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getDate() + '-' +
                            (new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getMonth() + 1) + '-' +
                            new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getFullYear();
                        date = $scope.prepolicydate.split('-');
                        $scope.policydate = (parseInt(date[0]) < 9 ? '0' + date[0] : date[0]);
                        $scope.policymonth = (parseInt(date[1]) < 9 ? '0' + date[1] : date[1]);
                        $scope.policyyear = parseInt(date[2]);
                    }

                }
                else {
                    if ($scope.quotesrequest.Requests[0].InsuranceType == 'TP' && ($scope.quotesrequest.Requests[0].BreakingDays != 0 || $scope.quotesrequest.Requests[0].BreakingDays != '0')) {
                        $scope.policydate = new Date().getDate();
                        $scope.policymonth = new Date().getMonth() + 1;
                        $scope.policyyear = new Date().getFullYear();
                        $scope.prepolicydate = new Date().getDate() + '-' +
                            (new Date().getMonth() + 1) + '-' +
                            new Date().getFullYear();
                        $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate);
                    }
                    else {
                        date = $scope.prepolicydate1.split('-');
                        $scope.policydate = parseInt(date[0]);
                        $scope.policymonth = parseInt(date[1]);
                        $scope.policyyear = parseInt(date[2]);
                    }

                }

                if ($scope.registrationdate == undefined) {
                    $scope.registrationdate = new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getFullYear();
                    date1 = $scope.registrationdate.split('-');
                    $scope.carregdate = (parseInt(date1[0]) < 9 ? '0' + date1[0] : date1[0]);
                    $scope.carregmonth = (parseInt(date1[1]) < 9 ? '0' + date1[1] : date1[1]);
                    $scope.carregyear = parseInt(date1[2]);
                }
                else {
                    if ($scope.registrationdate1 != undefined) {
                        date1 = $scope.registrationdate1.split('-');
                        $scope.carregdate = parseInt(date1[0]);
                        $scope.carregmonth = parseInt(date1[1]);
                        $scope.carregyear = parseInt(date1[2]);
                    }
                }
                callquotes();
            }
            $scope.NewPolicyDate = new Date($scope.policymonth + '/' + $scope.policydate + '/' + $scope.policyyear);
            $scope.NewCarregDate = new Date($scope.carregmonth + '/' + $scope.carregdate + '/' + $scope.carregyear);
            for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                if ($scope.quotesrequest.Requests[0].Features[i].Name == "CNG") {
                    if ($scope.quotesrequest.Requests[0].Features[i].Type == "INTERNAL") {
                        $scope.carkitstatus = "Kit2";
                    }
                    else if ($scope.quotesrequest.Requests[0].Features[i].Type == "EXTERNAL") {
                        $scope.carkitstatus = "Kit3";
                    }
                    else {
                        $scope.carkitstatus = "Kit1";
                    }
                }
                if ($scope.quotesrequest.Requests[0].Features[i].Name == "PAOwnerDriver") {
                    $scope.Paownermodel = $scope.quotesrequest.Requests[0].Features[i].IsSelected;
                }
            }
        }

        $scope.buyclaimchange = function () {
            if ($scope.lastclaim == 1) {
                $scope.tempcarclaim = angular.copy($scope.carclaim);
                $scope.tempcarncb = angular.copy($scope.carclaimedncb);
                $scope.tempcarreqncb = angular.copy($scope.carrequiredncb);
                $scope.tempreqncb = angular.copy($scope.RequiredNCB);
                $scope.carclaim = "Yes~0";
                $scope.carclaimedncb = 0;
                $scope.RequiredNCB = 0;
                $scope.carrequiredncb = 0;
                $scope.hideclaim = true;
            }
            else {
                if ($scope.tempcarclaim != undefined) {
                    $scope.carclaim = $scope.tempcarclaim;
                    $scope.carclaimedncb = $scope.tempcarncb;
                    $scope.carrequiredncb = $scope.tempcarreqncb;
                    $scope.RequiredNCB = $scope.tempreqncb;

                }
                else {
                    $scope.carclaim = "Yes~0";
                    $scope.carclaimedncb = 0;
                    $scope.RequiredNCB = 0;
                    $scope.carrequiredncb = 0;
                }
                $scope.hideclaim = false;
            }

        }

        function criticalrequestdata() {
            $scope.ProductId = 9;
            $scope.criticalfeature = [];
            $scope.showcriticalrider = true;
            $scope.$root.showmainloader = false;
            $scope.userincomedropdown = TermFactory.userActualIncome($scope);
            $scope.userincometemp = $scope.userActualIncome;
            var disease = QuoteService.GetCriticalDiseaseList();
            disease.then(function (pl) {
                $scope.CriticalDiseaseList = pl.data;
            }, function (response) {
                ServiceRespnse(response);
            });

            $scope.product = 'Critical';
            $rootScope.product = 'Critical';
            var fngetMasterData = QuoteService.citydetails($rootScope.criticaldata.Requests[0].CityId);
            fngetMasterData.then(function (pl) {
                if ($rootScope.AgentId != null || $rootScope.AgentId != undefined) {
                    if ($rootScope.criticaldata.Email != "") {
                        $scope.userEmailID = $rootScope.criticaldata.Email;
                        $scope.disableEmail = true;
                    }
                    else {
                        $scope.disableEmail = false;
                    }
                    if ($rootScope.criticaldata.MobileNo != "") {
                        $scope.agentphonenumber = true;
                        $scope.userphone = false;
                        $scope.tempmobile = "999*******99";
                        $scope.userMobileNumber = parseInt($rootScope.criticaldata.MobileNo);
                        $scope.disableMobile = true;
                    }
                    else {
                        $scope.disableMobile = false;
                        $scope.agentphonenumber = false;
                    }
                }
                else {
                    if ($rootScope.criticaldata != undefined) {
                        if ($rootScope.criticaldata.Email != "") {
                            $scope.userEmailID = $rootScope.criticaldata.Email;
                            $scope.disableEmail = false;
                        }
                        else {
                            $scope.disableEmail = false;
                        }
                        if ($rootScope.criticaldata.MobileNo != "") {
                            $scope.userMobileNumber = parseInt($rootScope.criticaldata.MobileNo);
                            $scope.disableMobile = false;
                        }
                        else {
                            $scope.disableMobile = false;
                        }
                    }

                }
                $scope.criticaldatacontinuejourney = $rootScope.criticaldata;
                var Feature = $rootScope.criticaldata.Requests[0].Features;
                $scope.quotes_userdata = $rootScope.criticaldata.Requests[0];
                // $localStorage.quotes_userdata = $scope.quotes_userdata;
                localStorage.setItem("QuoteId", $rootScope.criticaldata.IGQuoteId);
                var masterdata = DataFactory.continuejourneycriticalinitdata($scope, pl);
                $scope = masterdata;
                TermFactory.calculateSumAssuredRange($scope, $scope.quotes_userdata.actualincome);
                $scope.txtActualIncome = { ActualIncomeText: TermFactory.convertActualIncomeToText($scope.quotes_userdata.actualincome), ActualIncomeValue: $scope.quotes_userdata.actualincome };
                $scope.quotes_userdata.userMinAnnualIncomeRange = $scope.minincome;
                $scope.quotes_userdata.userMaxAnnualIncomeRange = $scope.maxincome;
                $scope = TermFactory.calculatemonthlyincome($scope);

                $scope = DataFactory.criticalrequestdata($scope, 1);
                $scope.actualincome = TermFactory.convertincomeintotext($scope, $scope.quotes_userdata.actualincome);
                $scope.DateOfBirth = $scope.quotes_userdata.dateofbirth;
                $scope.AgeTerm = $scope.getAge($scope.DateOfBirth);
                //$scope.pixeldata();
                $scope.AgeInMonths = $scope.quotes_userdata.AgeMonths;
                $rootScope.LandingUrl = $rootScope.criticaldata.LandingURL;
                showSanitizecust($rootScope.criticaldata.Email, $rootScope.criticaldata.MobileNo);
                // $scope.PolicyTermPeriod = $scope.quotes_userdata.PolicyTerm;
                IGquoteId = $rootScope.criticaldata.IGQuoteId;
                var riderdata = FeatureService.GetCriticalSelectedRider(IGquoteId);
                riderdata.then(function (getRiderData) {
                    var feature = getRiderData.data;
                    if (feature != null && feature.length > 0) {
                        for (var i = 0; i < feature.length; i++) {
                            var leng = feature[i].FeatureName.split(" ");
                            var text = "";
                            for (var l = 0; l < leng.length; l++) {
                                text = text + leng[l];
                            }
                            if (feature[i].FeatureID == 22 || feature[i].FeatureID == 23 || feature[i].FeatureID == 25) {
                                checktext = "paymentmode";
                                text = "Is" + text;
                            }
                            else {
                                checktext = "rider";
                                if (text.indexOf("disease") == -1) {
                                    text = "Is" + text + "Disease";
                                }
                                if (text.indexOf("'") != -1) {
                                    var text1 = text.split("'");
                                    text = "Is" + text1[0] + text1[1];
                                }
                                if (text.indexOf("/") != -1) {
                                    var text1 = text.split("/");
                                    text = text1[0] + text1[1];
                                }
                                if (text.indexOf("Is") == -1) {
                                    text = "Is" + text;
                                }
                            }
                            $scope.HealthRefineChips.push({ value: feature[i].FeatureName, id: feature[i].FeatureID, check: checktext, text: text });
                            $scope.mdpaymentmode[feature[i].FeatureID] = true;
                            $scope.criticalfeature[feature[i].FeatureID] = true
                        }
                    }
                    if ($scope.quotes_userdata.UserInputIncome == undefined || $scope.quotes_userdata.UserInputIncome == ""
                        || $scope.quotes_userdata.IsTobacco == undefined
                        || $scope.quotes_userdata.Gender == undefined || $scope.quotes_userdata.Gender == ""
                        || $scope.quotes_userdata.DateOfBirth == undefined || $scope.quotes_userdata.DateOfBirth == ""
                        || $scope.quotes_userdata.CityId == undefined || $scope.quotes_userdata.CityId == "") {
                        $scope.editsearch();
                        $scope.editcross = false;
                    }
                    else {
                        callquotes();
                    }
                }, function (response) {
                    ServiceRespnse(response);
                });

            }, function (response) {
                ServiceRespnse(response);
            });

        }

        function grouprequestdata() {
            $scope.usergrpAge = {};
            $scope.TermSliderpopupSrc = '../HomePage/Template/TermSliderpopup.html';
            $scope.lead_data = { username: "EP", userpass: "Ep@123", vendorid: "2018", productid: 17 };
            if ($rootScope.groupdata.UserName != "") {
                $scope.userName = $rootScope.groupdata.UserName;
            }
            if ($rootScope.groupdata.Email != "") {
                $scope.userEmailID = $rootScope.groupdata.Email;
            }
            if ($rootScope.groupdata.MobileNo != "") {
                $scope.userMobileNumber = $rootScope.groupdata.MobileNo;
            }
            if ($rootScope.groupdata.LandingURL != undefined) {
                if ($rootScope.groupdata.LandingURL.indexOf('ignew/Partners/') == -1 && $rootScope.groupdata.LandingURL.indexOf('group-plan/group-term-insurance-plan.html') == -1 && $rootScope.groupdata.LandingURL.indexOf('Buy.html') == -1) {
                    $scope.showgroupmsg = true;
                    $scope.showgrouppop = true;
                }
            }
            else {
                $scope.showgroupmsg = true;
                $scope.showgrouppop = true;
            }
            var encryptdata = DataFactory.GetEncryptedString($scope);
            $scope = encryptdata;
            var otpdata = DataFactory.GetOTPString($scope);
            $scope = otpdata;
            var leaddata = DataFactory.GetLeadCreationEncryptedString($scope);
            $scope = leaddata;
            $scope.quotesrequest = $rootScope.groupdata;
            showSanitizecust($rootScope.groupdata.Email, $rootScope.groupdata.MobileNo);
            $scope.usergrpAge = $scope.quotesrequest.Requests[0].Age;
            $scope.GroupSumassured = $scope.quotesrequest.Requests[0].SumAssured;
            $scope.Initialzedata();
        }


        $scope.AgeChange = function (flag) {
            if ($scope.usergrpAge != undefined && $scope.usergrpAge != null && $scope.usergrpAge >= $scope.AgeMin && $scope.usergrpAge <= $scope.AgeMax) {
                $scope.quotesrequest.Requests[0].Age = $scope.usergrpAge;
                $scope.noshowloader = false;
                $scope.showloader = true;
                $scope.Initialzedata();
                $scope.AgeError = false;
            }
            else {
                //$scope.usergrpAge = $scope.usergrpAge1;
                $scope.AgeError = true;

            }

        }

        $scope.SumAssuredChange = function (flag) {

            if (parseInt($scope.GroupSumassured) != $scope.GroupSumassured1) {
                $scope.showloader = true;
                $scope.Initialzedata();
                $scope.quotesrequest.Requests[0].SumAssured = $scope.GroupSumassured;

            }


        }



        function termrequestdata() {

            $scope.ProductId = 3;
            cookieproductcode = "T51";
            if ($rootScope.termdata.Requests[0].DateOfBirth == null && $rootScope.termdata.Requests[0].DefaultDateOfBirth != null) {
                // $rootScope.termdata.Requests[0].DateOfBirth = $rootScope.termdata.Requests[0].DefaultDateOfBirth;
                $scope.askDOB = true;
            }
            $scope.$root.showmainloader = false;
            // TermFactory.userActualIncome($scope);
            $rootScope.product = 'Term';
            showSanitizecust($rootScope.termdata.Email, $rootScope.termdata.MobileNo);
            var fngetMasterData = QuoteService.citydetails($rootScope.termdata.Requests[0].CityId);
            fngetMasterData.then(function (pl) {
                if ($rootScope.AgentId != null && $rootScope.AgentId != undefined) {
                    if ($rootScope.termdata.Email != "") {
                        $scope.userEmailID = $rootScope.termdata.Email;
                        $scope.disableEmail = true;
                    }
                    else {
                        $scope.disableEmail = false;
                    }
                    if ($rootScope.termdata.MobileNo != "") {
                        $scope.agentphonenumber = true;
                        $scope.userphone = false;
                        $scope.tempmobile = "999*******99";
                        $scope.userMobileNumber = parseInt($rootScope.termdata.MobileNo);
                        $scope.disableMobile = true;
                    }
                    else {
                        $scope.disableMobile = false;
                        $scope.agentphonenumber = false;
                    }
                }
                var Feature = $rootScope.termdata.Requests[0].RPFeatures;
                $rootScope.LandingUrl = $rootScope.termdata.LandingURL;
                $scope.quotes_userdata = $rootScope.termdata.Requests[0];
                $scope.quotes_userdata.IPAddress = $rootScope.termdata.IPAddress;
                // $localStorage.quotes_userdata = $scope.quotes_userdata;
                localStorage.setItem("QuoteId", $rootScope.termdata.IGQuoteId);
                DataFactory.continuejourneyterminitdata($scope, pl);
                var termyear = 0;
                var PolicyTermPeriod = $scope.quotes_userdata.PolicyTerm + $scope.AgeTerm;
                if ($rootScope.termdata.IsProposalJourney == false || PolicyTermPeriod == 100 || $scope.quotes_userdata.PolicyTerm == 0) {
                    if ($rootScope.termdata.Requests[0].Age > 0 && $rootScope.termdata.Requests[0].Age != undefined && $rootScope.termdata.Requests[0].Age != '') {
                        termyear = 75 - ($rootScope.termdata.Requests[0].Age);
                        $scope.AgeTerm = $rootScope.termdata.Requests[0].Age;
                    }
                    else {
                        termyear = 75 - ($scope.getAge($rootScope.termdata.Requests[0].dateofbirth));
                        $scope.AgeTerm = $scope.getAge($rootScope.termdata.Requests[0].dateofbirth);
                    }
                    if (termyear < 5) {
                        $rootScope.termdata.Requests[0].PolicyTerm = 0;
                    }
                    else {
                        $rootScope.termdata.Requests[0].PolicyTerm = termyear;
                    }
                }
                else {
                    $rootScope.termdata.Requests[0].PolicyTerm = $scope.quotes_userdata.PolicyTerm;
                }
                $scope.PolicyTermPeriod = $scope.quotes_userdata.PolicyTerm + $scope.AgeTerm;
                TermFactory.calculateSumAssuredRange($scope, $scope.quotes_userdata.actualincome);
                $scope.quotes_userdata.userMinAnnualIncomeRange = $scope.minincome;
                $scope.quotes_userdata.userMaxAnnualIncomeRange = $scope.maxincome;
                TermPTandPPTDiy();
                $scope = DataFactory.termrequestdata($scope, 1);
                $scope.DateOfBirth = $scope.quotes_userdata.dateofbirth;

                Termlimitedoption();
                // $scope.pixeldata();
                //$scope.AgeInMonths = $scope.quotes_userdata.AgeMonths;

                //$scope.LimitedPayingTerm = $scope.PolicyTermPeriod;
                if (Feature != null && Feature.length > 0) {
                    var rText = '';
                    var changeRiderName = '';
                    for (var i = 0; i < Feature.length; i++) {
                        var item = { riderCode: Feature[i].Id, riderName: Feature[i].Name };
                        var leng = item.riderName.split(" ");
                        var text = "";
                        for (var l = 0; l < leng.length; l++) {
                            text = text + leng[l];
                        }
                        if (item.riderCode == 26) {
                            $scope.termfeature[item.riderCode] = true
                        }
                        else {
                            $scope.HealthRefineChips.push({ value: item.riderName, id: item.riderCode, check: "rider", text: text });
                            $scope.termfeature[item.riderCode] = true;
                        }

                    }
                }

                IGquoteId = $rootScope.termdata.IGQuoteId;
                $scope.actualincome = TermFactory.convertincomeintotext($scope, $scope.quotes_userdata.actualincome);
                $scope.txtActualIncome = { ActualIncomeText: $scope.actualincome };
                TermFactory.calculatemonthlyincome($scope, 1);
                $scope.quotesrequest.Requests[0].MonthlyIncome = $scope.DefaultMonthlyIncome;
                $scope.quotesrequest.IsProposalJourney = true;
                if ($rootScope.termdata.Requests[0].QuotesPincode != null && $rootScope.termdata.Requests[0].QuotesPincode != undefined && $rootScope.termdata.Requests[0].QuotesPincode != 0) {
                    $scope.quotesrequest.Requests[0].Pincode = $rootScope.termdata.Requests[0].QuotesPincode;
                    $scope.tempPincode = $rootScope.termdata.Requests[0].QuotesPincode;
                }
                if ($rootScope.termdata.DefaultInsurerId > 0) {
                    $scope.quotesrequest.DefaultInsurerId = $rootScope.termdata.DefaultInsurerId;
                }
                // $scope.tempPolicyTermPeriod = $scope.PolicyTermPeriod;
                // $scope.tempPolicyTerm = $scope.quotes_userdata.PolicyTerm;               
                $scope.quotesrequest.Requests[0].PlanTypeId = 25;
                callquotes();
                // }

            });
        }


        function bikerequestdata() {
            $scope.product = 'Twowheeler';
            $rootScope.product = 'Twowheeler';
            $scope.ProductId = 8;
            $scope.$root.showmainloader = false;

            $scope.flaclaim($scope.year - 6);
            $scope.lastclaimtaken = $scope.regyear;
            $scope.quotesrequest = $rootScope.twowheelerdata;
            $rootScope.LandingUrl = $rootScope.twowheelerdata.LandingURL;

            $scope.quotes_userdata = $rootScope.twowheelerdata.Requests[0];
            if ($scope.quotes_userdata.IsNewVehicle != true) {
                $scope.insurancetypeshow = true;
                $scope.newmotorshow = true;
            }
            else {
                $scope.insurancetypeshow = false;
                $scope.newmotorshow = false;
            }
            showSanitizecust($rootScope.twowheelerdata.Email, $rootScope.twowheelerdata.MobileNo);
            $scope.setClientLogo($rootScope.twowheelerdata.utmSource);
            $rootScope.channelId = $rootScope.twowheelerdata.ChannelID;
            // $localStorage.quotes_userdata = $scope.quotes_userdata;

            var result = DataFactory.bikeinitdata($scope);
            $scope = result;
            var request = DataFactory.BikeQuotesNew($scope, 2);
            $scope = request;
            if ($rootScope.twowheelerdata.Requests[0].RegistrationDate != undefined) {
                $scope.quotesrequest.Requests[0].RegistrationDate = $rootScope.twowheelerdata.Requests[0].RegistrationDate;
            }
            if ($rootScope.twowheelerdata.Requests[0].PreviousPolicyEndDate != undefined && $rootScope.twowheelerdata.Requests[0].InsuranceType != 'TP') {
                $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = $rootScope.twowheelerdata.Requests[0].PreviousPolicyEndDate;
            }
            if ($rootScope.twowheelerdata.Requests[0].PreviousPolicyEndDate != undefined && $rootScope.twowheelerdata.Requests[0].InsuranceType == 'TP' && ($rootScope.twowheelerdata.Requests[0].InsuranceType != 0 || $rootScope.twowheelerdata.Requests[0].InsuranceType != '0')) {
                $scope.prepolicydate3 = new Date().getDate() + '-' + (new Date().getMonth() + 1) + '-' + new Date().getFullYear();
                $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = DataFactory.convertToJSONDate($scope.prepolicydate3);
            }
            if ($rootScope.twowheelerdata.Requests[0].PreviousPolicyEndDate != undefined && $rootScope.twowheelerdata.Requests[0].InsuranceType == 'TP' && ($rootScope.twowheelerdata.Requests[0].InsuranceType == 0 || $rootScope.twowheelerdata.Requests[0].InsuranceType == '0')) {
                $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = $rootScope.twowheelerdata.Requests[0].PreviousPolicyEndDate;
            }

            var result = DataFactory.carB2Bdata($scope);
            $scope = result;

            var continuedata = TwowheelerFactory.Continuejourneydata($scope);
            $scope.quotesrequest.Requests[0].IDV = 0;
            $scope.IsCorporate = 0;
            $scope.quotesrequest.Requests[0].IsCorporate = false;
            if ($scope.quotesrequest.Requests[0].IDV == 0) {
                $scope.data11.group1 = 0;
            }
            else {
                $scope.data11.group1 = 3;
                $scope.enteridvvalue = parseInt($scope.quotesrequest.Requests[0].IDV);
                $scope.manualidv = false;
            }
            if ($rootScope.twowheelerdata.DefaultInsurerId > 0) {
                $scope.quotesrequest.DefaultInsurerId = $rootScope.twowheelerdata.DefaultInsurerId;
            }

            if ($rootScope.twowheelerdata.Requests[0].PreviousPolicyType == "PREVBUNDLECO") {
                $scope.quotesrequest.Requests[0].InsuranceType = 'OD';
                $scope.insurancetypefn('OD');
                $scope.insurancetype = "22";
            }

            if ($scope.quotes_userdata.RTOCode == undefined || $scope.quotes_userdata.RTOCode == ""
                || $scope.quotes_userdata.BreakingDays == undefined || $scope.quotes_userdata.BreakingDays < 0
                || ($scope.quotes_userdata.ClaimTaken != true && $scope.quotes_userdata.ClaimTaken != false)
                || $scope.quotes_userdata.ClaimedNCB == undefined
                || $scope.quotes_userdata.ModelId == undefined || $scope.quotes_userdata.ModelId == ""
                || $scope.quotes_userdata.MotorName == undefined || $scope.quotes_userdata.MotorName == ""
                || $scope.quotes_userdata.RequiredNCB == undefined
                || $scope.quotes_userdata.RegistrationYear == undefined || $scope.quotes_userdata.RegistrationYear == ""
                || $scope.quotes_userdata.RegistrationDate == undefined || $scope.quotes_userdata.RegistrationDate == "") {
                $scope.editsearch();
                $scope.editcross = false;
            }
            else {
                for (var i = 0; i < $scope.lastclaimtaken.length; i++) {
                    if ($scope.quotesrequest.Requests[0].ClaimedNCB == $scope.lastclaimtaken[i].value.split('~')[1]) {
                        $scope.carclaim = $scope.lastclaimtaken[i].value;
                    }
                }
                var date = "";
                var date1 = "";
                var ab = "/Date(1506105000000)/";
                date = new Date(parseInt(ab.substring(6, 19))).getDate() + '-' +
                    (new Date(parseInt(ab.substring(6, 19))).getMonth() + 1) + '-' +
                    new Date(parseInt(ab.substring(6, 19))).getFullYear();
                if ($scope.prepolicydate1 == undefined) {
                    $scope.prepolicydate = new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getFullYear();
                    date = $scope.prepolicydate.split('-');
                    $scope.policydate = (parseInt(date[0]) < 9 ? '0' + date[0] : date[0]);
                    $scope.policymonth = (parseInt(date[1]) < 9 ? '0' + date[1] : date[1]);
                    $scope.policyyear = parseInt(date[2]);
                }
                else {
                    date = $scope.prepolicydate1.split('-');
                    $scope.policydate = parseInt(date[0]);
                    $scope.policymonth = parseInt(date[1]);
                    $scope.policyyear = parseInt(date[2]);
                }

                if ($scope.registrationdate == undefined) {
                    $scope.registrationdate = new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getFullYear();
                    date1 = $scope.registrationdate.split('-');
                    $scope.carregdate = (parseInt(date1[0]) < 9 ? '0' + date1[0] : date1[0]);
                    $scope.carregmonth = (parseInt(date1[1]) < 9 ? '0' + date1[1] : date1[1]);
                    $scope.carregyear = parseInt(date1[2]);
                }
                else {
                    date1 = $scope.registrationdate1.split('-');
                    $scope.carregdate = parseInt(date1[0]);
                    $scope.carregmonth = parseInt(date1[1]);
                    $scope.carregyear = parseInt(date1[2]);
                }
                callquotes();
            }
            $scope.NewPolicyDate = new Date($scope.policymonth + '/' + $scope.policydate + '/' + $scope.policyyear);
            $scope.NewCarregDate = new Date($scope.carregmonth + '/' + $scope.carregdate + '/' + $scope.carregyear);

            for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {

                if ($scope.quotesrequest.Requests[0].Features[i].Name == "PAOwnerDriver") {
                    $scope.Paownermodel = $scope.quotesrequest.Requests[0].Features[i].IsSelected;
                }
            }
        }

        function investrequestdata() {
            $scope.ProductId = 5;
            $scope.$root.showmainloader = false;
            $scope.product = 'Investment';
            $rootScope.product = 'Investment';
            $scope.nontermfeature = [];
            $scope.mdrider = [];
            cookieproductcode = "U98";
            $scope.quotes_userdata = $rootScope.investmentdata;
            $scope.quotesrequest = $rootScope.investmentdata;
            var dateofbirth = new Date(parseInt($scope.quotes_userdata.Requests[0].DOBs[0].substring(6, 19))).getDate() + '-' +
                (new Date(parseInt($scope.quotes_userdata.Requests[0].DOBs[0].substring(6, 19))).getMonth() + 1) + '-' +
                new Date(parseInt($scope.quotes_userdata.Requests[0].DOBs[0].substring(6, 19))).getFullYear();
            $scope.quotes_userdata.dateofbirth = dateofbirth;

            if ($scope.quotesrequest.Requests[0].IsGuaranteed == true || $rootScope.investmentdata.LandingURL.indexOf("investment-plans/guaranteed") != -1 || $rootScope.investmentdata.LandingURL.indexOf("/investment-trd") != -1) {
                $scope.plantypemodel = 2;
                $scope.activeMonTab = 2;
                $scope.IsGuaranteed = true;
                $scope.guaranteedplan = true;

            }
            $rootScope.LandingUrl = $rootScope.investmentdata.LandingURL;
            showSanitizecust($rootScope.investmentdata.Email, $rootScope.investmentdata.MobileNo);
            $scope.setClientLogo($rootScope.investmentdata.utmSource);
            $rootScope.channelId = $rootScope.investmentdata.ChannelID;
            var masterdata = DataFactory.continuejourneynonterminitdata($scope);
            var request = DataFactory.investmentrequestdata($scope, 5);
            $scope.quotesrequest.Requests[0].IsMonthly = false;
            if ($scope.quotesrequest.Requests[0].PayingMode.toLowerCase() == 'm') {
                $scope.quotesrequest.Requests[0].IsMonthly = true;
            }
            $scope.RiskLevel = { minValue: $scope.MinRisk, maxValue: $scope.MaxRisk, options: { id: 'Risk', floor: 1, ceil: 5, step: 1, showTicksValues: true, stepsArray: [{ value: 1, legend: 'Very Low' }, { value: 2, legend: 'Low' }, { value: 3, legend: 'Moderate' }, { value: 4, legend: 'High' }, { value: 5, legend: 'Very High' },] } };
            $scope.PolicyMaturitytext = $scope.MaxMaturityTerm;
            $scope.PolicyMaturity = { minValue: $scope.MaxMaturityTerm, options: { id: 'PolicyMaturityTerm', floor: 10, ceil: 40, showTicksValues: 5, showSelectionBar: true } };
            $scope.PremimumPayingtext = $scope.PaymentDuration;
            $scope.PremimumPayingTerm = { maxValue: $scope.PaymentDuration, options: { id: 'PremimumPayingTerm', floor: 10, ceil: 40, showTicksValues: 5, showSelectionBar: true } };
            $scope = request;
            //$scope.pixeldata();
            $scope.quotesrequest.DefaultInsurerId = $rootScope.investmentdata.DefaultInsurerId;
            if ($scope.quotes_userdata.Requests[0].Gender == undefined || $scope.quotes_userdata.Requests[0].Gender == ""
                || $scope.quotes_userdata.Requests[0].Amount == undefined || $scope.quotes_userdata.Requests[0].Amount == ""
                || $scope.quotes_userdata.Requests[0].DOBs == undefined || $scope.quotes_userdata.Requests[0].DOBs == ""
                || $scope.quotes_userdata.Requests[0].PayingMode == undefined || $scope.quotes_userdata.Requests[0].PayingMode == "") {
                $scope.editsearch();
                $scope.editcross = false;
            }
            else {
                callquotes();
            }

            console.log('after data bind in slider. $scope.PremimumPayingTerm: ' + $scope.PremimumPayingTerm.minValue);
            $scope.riders = FeatureService.nonTermRiders($scope);
            $scope.riders.then(function (result) {
                var riders = [];
                $scope.nonTermRiderDetails = result.data;
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        function childrequestdata() {
            $scope.ProductId = 7;
            $scope.$root.showmainloader = false;
            $scope.product = 'Child';
            cookieproductcode = "UA8";
            $rootScope.product = 'Child';
            $scope.quotes_userdata = $rootScope.childdata;
            $rootScope.LandingUrl = $rootScope.childdata.LandingURL;
            var masterdata = DataFactory.continuejourneynonterminitdata($scope);
            $scope = masterdata;
            var request = DataFactory.childRequestData($scope);
            $scope.riders = FeatureService.nonTermRiders($scope);
            $scope.riders.then(function (result) {
                $scope.nonTermRiderDetails = result.data;
            }, function (response) {
                ServiceRespnse(response);
            });

            showSanitizecust($rootScope.childdata.Email, $rootScope.childdata.MobileNo);
            $scope.RiskLevel = { minValue: $scope.MinRisk, maxValue: $scope.MaxRisk, options: { id: 'Risk', floor: 1, ceil: 5, step: 1, showTicksValues: true, stepsArray: [{ value: 1, legend: 'Very Low' }, { value: 2, legend: 'Low' }, { value: 3, legend: 'Moderate' }, { value: 4, legend: 'High' }, { value: 5, legend: 'Very High' },] } };
            $scope.PolicyMaturitytext = $scope.MaxMaturityTerm;
            $scope.PolicyMaturity = { minValue: $scope.MaxMaturityTerm, options: { id: 'PolicyMaturityTerm', floor: 10, ceil: 40, showTicksValues: 5, showSelectionBar: true } };
            $scope.PremimumPayingtext = $scope.PaymentDuration;
            $scope.PremimumPayingTerm = { maxValue: $scope.PaymentDuration, options: { id: 'PremimumPayingTerm', floor: 10, ceil: 40, showTicksValues: 5, showSelectionBar: true } };
            $scope = request;

            if ($scope.quotes_userdata.Requests[0].Gender == undefined || $scope.quotes_userdata.Requests[0].Gender == ""
                || $scope.quotes_userdata.Requests[0].Amount == undefined || $scope.quotes_userdata.Requests[0].Amount == ""
                || $scope.quotes_userdata.Requests[0].DOBs == undefined || $scope.quotes_userdata.Requests[0].DOBs == "") {
                $scope.editsearch();
                $scope.editcross = false;
            }
            else {
                callquotes();
            }
        }
        function pensionrequestdata() {
            $scope.ProductId = 6;
            $scope.$root.showmainloader = false;
            $scope.product = 'Pension';
            cookieproductcode = "U96";
            $rootScope.product = 'Pension';
            $scope.quotes_userdata = $rootScope.pensiondata;
            $rootScope.LandingUrl = $rootScope.pensiondata.LandingURL;
            showSanitizecust($rootScope.pensiondata.Email, $rootScope.pensiondata.MobileNo);
            var masterdata = DataFactory.continuejourneynonterminitdata($scope);
            $scope = masterdata;
            var request = DataFactory.pensionRequestData($scope);
            $scope.RiskLevel = { minValue: $scope.MinRisk, maxValue: $scope.MaxRisk, options: { id: 'Risk', floor: 1, ceil: 5, step: 1, showTicksValues: true, stepsArray: [{ value: 1, legend: 'Very Low' }, { value: 2, legend: 'Low' }, { value: 3, legend: 'Moderate' }, { value: 4, legend: 'High' }, { value: 5, legend: 'Very High' },] } };


            $scope.quotesrequest.Requests[0].MaturityTerm = parseInt($scope.TermPeriod1 - $scope.quotes_userdata.userAge);
            $scope.quotesrequest.Requests[0].PaymentDuration = parseInt($scope.payTill - $scope.quotes_userdata.userAge);
            if ($scope.quotes_userdata.Requests[0].Gender == undefined || $scope.quotes_userdata.Requests[0].Gender == ""
                || $scope.quotes_userdata.Requests[0].Amount == undefined || $scope.quotes_userdata.Requests[0].Amount == ""
                || $scope.quotes_userdata.Requests[0].DOBs == undefined || $scope.quotes_userdata.Requests[0].DOBs == ""
                || $scope.quotes_userdata.Requests[0].PayingMode == undefined || $scope.quotes_userdata.Requests[0].PayingMode == "") {
                $scope.editsearch();
                $scope.editcross = false;
            }
            else {
                callquotes();
            }
            //$scope.pensionPayTill.value = $scope.PaymentDuration;
            //                    $scope.pensionPayTill = { value: payduration, options: { floor: parseInt( $scope.quotes_userdata.userAge ), ceil: $scope.TermPeriod, step: 1, minLimit: parseInt( $scope.quotes_userdata.userAge ), maxLimit: 90} };

            $scope = request;
            $scope.riders = FeatureService.nonTermRiders($scope);
            $scope.riders.then(function (result) {
                $scope.nonTermRiderDetails = result.data;
            }, function (response) {
                ServiceRespnse(response);
            });

        }

        $scope.availableFund = function (item) {
            $scope.NonTermChargesUrl = '../HomePage/Template/NonTermCharges.html';
            $rootScope.scrollhide = 'scollClass';
            $scope.selectedFundItem = item;
            $scope.availableFundPop = true;
            $analytics.eventTrack('Click', { category: $scope.gaProduct, label: "Available Fund", value: $scope.productID });
        }
        function healthrequestdata(pl) {
            //$scope.ProductId = 2;
            var a = $rootScope.healthdata.LandingURL;
            $scope.policyTermYearValue = 1;
            if ($rootScope.healthdata.Requests[0].DeductibleAmount) {
                if ($rootScope.healthdata.Requests[0].DeductibleAmount > 0) {
                    $scope.deductamount = [{ value: 200000, text: "2 Lac" }, { value: 300000, text: "3 Lac" }, { value: 400000, text: "4 Lac" }, { value: 500000, text: "5 Lac" }, { value: 600000, text: "6 Lac" }, { value: 700000, text: "7 Lac" }
                        , { value: 800000, text: "8 Lac" }, { value: 900000, text: "9 Lac" }, { value: 1000000, text: "10 Lac" }];

                    if ($scope.device == "Desktop") {

                        $scope.gaProduct = "Health Super";
                        $scope.UiVersion = 1;
                        $rootScope.loadcardtemplate = '../HomePage/Template/HealthSuper.html';


                    }
                    else if ($scope.device == "Mobile") {
                        $rootScope.loadcardtemplate = '../HomePage/Template/HealthSuperMobile.html';
                        //$scope.policyTermYearValue = 1;
                        // $scope.clickToCallShow = false;
                        $scope.gaProduct = "Health Super";
                    }

                    for (var i = 0; i < $scope.deductamount.length; i++) {
                        if ($rootScope.healthdata.Requests[0].DeductibleAmount == $scope.deductamount[i].value) {
                            $scope.HealthExistCover = $scope.deductamount[i];
                        }
                    }

                }
            }
            else {
                if ($scope.device == "Desktop") {
                    if (a.indexOf('lp/health-insurance') != -1 || a.indexOf('ignew') != -1 || a.indexOf('HealthLanding') != -1 || a.indexOf('life-insurance') != -1 || $rootScope.healthdata.utmSource == "health1") {
                        $scope.gaProduct = "Health1";
                        UiVersion = 2;
                        $rootScope.loadcardtemplate = '../HomePage/Template/Health.html';
                        //$scope.policyTermYearValue = 1;
                    }

                    else {
                        $scope.gaProduct = "Health";
                        $scope.UiVersion = 1;
                        if ($rootScope.healthdata.Requests[0].IsCovid)
                            $rootScope.loadcardtemplate = '../HomePage/Template/Covid.html';
                        else
                            $rootScope.loadcardtemplate = '../HomePage/Template/Health.html';
                    }

                }
                else if ($scope.device == "Mobile") {
                    if ($rootScope.healthdata.Requests[0].IsCovid)
                        $rootScope.loadcardtemplate = '../HomePage/Template/CovidMobile.html';
                    else
                        $rootScope.loadcardtemplate = '../HomePage/Template/HealthMobile.html';
                    // $scope.policyTermYearValue = 1;
                    $scope.gaProduct = "Health";
                    //  $scope.clickToCallShow = false;
                }

                if ($rootScope.healthdata.Requests[0].IsCovid) {
                    $scope.policyPeriodList = [{ value: "105", text: "105 days" }, { value: "195", text: "195 days" }, { value: "285", text: "285 days" }];
                    $scope.policyPeriod = $rootScope.healthdata.Requests[0].PolicyTermDays;
                }
            }
            $scope.$root.showmainloader = false;
            $scope.product = 'Health';
            $scope.$root.product = "Health";
            $scope.sortkey = 'Rank';
            $scope.orderByField = 'Rank';
            HealthFactory.SumAssured($scope, $rootScope.healthdata.ChannelName, $rootScope.healthdata.Requests[0].IsCovid);
            if ($rootScope.healthdata.Requests[0].DOB == null && $rootScope.healthdata.Requests[0].DefaultDOB != null) {
                $scope.askDOB = true;
            }
            showSanitizecust($rootScope.healthdata.Email, $rootScope.healthdata.MobileNo);
            $scope.setClientLogo($rootScope.healthdata.utmSource);
            $rootScope.channelId = $rootScope.healthdata.ChannelID;
            var fngetMasterData = QuoteService.citydetails($rootScope.healthdata.Requests[0].CityId);
            fngetMasterData.then(function (pl) {
                $scope.quotes_userdata = $rootScope.healthdata.Requests[0];
                $rootScope.LandingUrl = $rootScope.healthdata.LandingURL;
                DataFactory.HealthInitMasterdata($scope, pl);
                if ($scope.quotes_userdata.Birthdate != undefined) {
                    $scope.AgeTerm = $scope.getAge($scope.quotes_userdata.Birthdate);
                }
                else {
                    $scope.AgeTerm = $scope.quotes_userdata.Age;
                }

                var Feature = $rootScope.healthdata.Requests[0].Features;
                if (Feature.length > 1) {
                    if (Feature[0].Id > 0) {
                        if (($filter('filter')(Feature, function (d) { return d.Name == 'DiseasesId' }).length) > 0) {
                            for (var dis = 0; dis < ($filter('filter')(Feature, function (d) { return d.Name == 'DiseasesId' }).length); dis++) {
                                $scope.DiseaseID = $scope.DiseaseID + "," + $filter('filter')(Feature, function (d) { return d.Name == 'DiseasesId' })[dis].Id;
                                $scope.suffer[$filter('filter')(Feature, function (d) { return d.Name == 'DiseasesId' })[dis].Id] = true;
                                var Diseasestext = $filter('filter')($scope.HealthSufferrData, function (d) { return d.id == $filter('filter')(Feature, function (d) { return d.Name == 'DiseasesId' })[dis].Id });
                                if (Diseasestext.length > 0) {
                                    $scope.HealthRefineChips.push({ value: Diseasestext[0].text, text: "Disease", check: "Disease" })
                                }
                            }

                        }

                        if (($filter('filter')(Feature, function (d) { return d.Name == 'MedicalId' }).length) > 0) {
                            $scope.Medicaltest = $filter('filter')(Feature, function (d) { return d.Name == 'MedicalId' })[0].Id;
                            if ($scope.Medicaltest == 1)
                                $scope.HealthRefineChips.push({ value: "I don't mind", text: 'Medical Test', check: "Medical Test" });
                            if ($scope.Medicaltest == 2)
                                $scope.HealthRefineChips.push({ value: "I'd like to avoid", text: 'Medical Test', check: "Medical Test" });
                        }


                        if (($filter('filter')(Feature, function (d) { return d.Name == 'FeatureId' }).length) > 0) {
                            for (var dis = 0; dis < ($filter('filter')(Feature, function (d) { return d.Name == 'FeatureId' }).length); dis++) {
                                $scope.FeatureID = $scope.FeatureID + "," + $filter('filter')(Feature, function (d) { return d.Name == 'FeatureId' })[dis].Id;
                                $scope.benefit[$filter('filter')(Feature, function (d) { return d.Name == 'FeatureId' })[dis].Id] = true;
                                var featureText = $filter('filter')($scope.HealthFeatureData, function (d) { return d.id == $filter('filter')(Feature, function (d) { return d.Name == 'FeatureId' })[dis].Id; });
                                if (featureText.length > 0) {
                                    $scope.HealthRefineChips.push({ value: featureText[0].text, text: "Feature", check: "Feature" });
                                }
                            }
                        }

                        if (($filter('filter')(Feature, function (d) { return d.Name == 'HospitalId' }).length) > 0) {
                            for (var dis = 0; dis < ($filter('filter')(Feature, function (d) { return d.Name == 'HospitalId' }).length); dis++) {
                                $scope.HospitalID = $scope.HospitalID + "," + $filter('filter')(Feature, function (d) { return d.Name == 'HospitalId' })[dis].Id;
                            }
                        }
                    }
                }
                if ($rootScope.healthdata.IsProposalJourney == false) {
                    $scope.HealthSumInsurednew = { sumassuredtext: '5 Lacs', sumassuredValue: 500000 };
                    $scope.HealthSumInsuredmobile = '5 Lacs';
                    $scope.SumInsuredForHealth = 500000;
                }
                else {
                    $scope.SumInsuredForHealth = $rootScope.healthdata.Requests[0].SumInsured;
                    var value;
                    if ($rootScope.healthdata.Requests[0].SumInsured.toString().length < 8) {
                        value = ($rootScope.healthdata.Requests[0].SumInsured / 100000) + " Lacs";
                    }
                    else {
                        value = ($rootScope.healthdata.Requests[0].SumInsured / 10000000) + " Crore";
                    }
                    $scope.HealthSumInsurednew = { sumassuredtext: value, sumassuredValue: $scope.SumInsuredForHealth };
                    $scope.HealthSumInsuredmobile = value;
                }
                $scope.data11.group1 = $scope.quotes_userdata.PolicyTerm.toString();
                $scope.quotes_userdata.PolicyTerm = $scope.data11.group1;
                // $localStorage.quotes_userdata = $scope.quotes_userdata;
                if ($rootScope.AgentId != null || $rootScope.AgentId != undefined) {
                    if ($rootScope.healthdata.UserName != "") {
                        $scope.userName = $rootScope.healthdata.UserName;
                    }
                    if ($rootScope.healthdata.Email != "") {
                        $scope.userEmailID = $rootScope.healthdata.Email;
                        $scope.disableEmail = true;
                    }
                    else {
                        $scope.disableEmail = false;
                    }
                    if ($rootScope.healthdata.MobileNo != "") {
                        $scope.agentphonenumber = true;
                        $scope.userphone = false;
                        $scope.tempmobile = "999*******99";
                        $scope.userMobileNumber = parseInt($rootScope.healthdata.MobileNo);
                        $scope.disableMobile = true;
                    }
                    else {
                        $scope.disableMobile = false;
                        $scope.agentphonenumber = false;
                    }

                }
                localStorage.setItem("QuoteId", $rootScope.healthdata.IGQuoteId);
                if ($rootScope.healthdata.Requests[0].IsCovid)
                    DataFactory.covidrequestdataNew($scope, $rootScope);
                else
                    DataFactory.healthrequestdataNew($scope, $rootScope);

                var fngetHealth_NetworkHospital = FeatureService.fngetHealth_NetworkHospital($scope);
                fngetHealth_NetworkHospital.then(function (pl) {
                    $scope.Network_Hospital = angular.fromJson(angular.fromJson(pl.data)).fngetHealth_NetworkHospitalResult;
                    var hospitalarray = $scope.HospitalID.split(',');
                    for (var i = 1; i < hospitalarray.length; i++) {
                        var val = $filter('filter')($scope.Network_Hospital, function (d) { return d.NetworkHospitalID == hospitalarray[i] });
                        $scope.todos.push({ text: val[0].NetworkHospitalName, done: false, id: val[0].NetworkHospitalID });
                        $scope.quotesrequest.Requests[0]['NetworkHospital' + (i + 1)] = val[0].NetworkHospitalName;
                    }
                    if ($scope.todos.length == 3) { $scope.IsVisible = false; }
                    IGquoteId = $rootScope.healthdata.IGQuoteId;
                    // $scope.pixeldata();
                    callquotes();
                });
            });



        }
        function travelrequestdata() {
            $scope.ProductId = 1;
            $scope.$root.showmainloader = false;
            //$scope.SetMaxTravelEndDate();
            $scope.product = 'Travel';
            $rootScope.product = 'Travel';
            var fngetMasterData = FeatureService.fngetMasterData($scope.ProductId);
            fngetMasterData.then(function (pl) {

                if ($scope.quotes_userdata != undefined) {
                    $scope.quotes_userdata = $scope.quotes_userdata.userdetails;
                    // $localStorage.quotes_userdata = $scope.quotes_userdata;
                    $localStorage.travelquotes_userdata = $scope.quotes_userdata;
                    var masterdata = DataFactory.travelinitdata($scope);
                    $scope = masterdata;
                    var request = DataFactory.travelrequestdata($scope);
                    $scope = request;
                    $scope.quotesrequest.PartnerAgentId = $scope.quotes_userdata.PartnerAgentId;
                }
                else {
                    $scope.quotes_userdata1 = $rootScope.traveldata;
                    var masterdata = DataFactory.continuejourneytravelinitdata($scope, pl);
                    $scope = masterdata;
                    var request = DataFactory.travelrequestdata($scope);
                    $scope = request;
                    $scope.quotesrequest.PartnerAgentId = $rootScope.traveldata.PartnerAgentId;
                }
                $rootScope.LandingUrl = $rootScope.traveldata.LandingURL;
                showSanitizecust($rootScope.traveldata.Email, $rootScope.traveldata.MobileNo);
                $scope = request;
                if ($scope.quotes_userdata.Destination == undefined || $scope.quotes_userdata.Destination == ""
                    || $scope.quotes_userdata.StartDate == undefined || $scope.quotes_userdata.StartDate == ""
                    || $scope.quotes_userdata.EndDate == undefined || $scope.quotes_userdata.EndDate == ""
                    || $scope.quotes_userdata.TravellerAges == undefined || $scope.quotes_userdata.TravellerAges == "") {
                    $scope.editsearch();
                    $scope.editcross = false;
                }
                else {
                    callquotes();
                }

            }, function (response) {
                ServiceRespnse(response);
            });

        }


        function affixScroll(ev) {

            if ($scope.Compareselection != undefined && $scope.Compareselection != [] && window.pageYOffset > 60) {
                $scope.affixclass = "affix";
            }
            else {
                $scope.affixclass = "";
            }

        }
        window.onscroll = affixScroll


        $scope.Init = function () {
            var newflag = 0;
            var servicedate = QuoteService.CurrentDateTime();
            servicedate.then(function (result) {
                newflag = 1;
                var CurrenDateTimeServicetemp = angular.fromJson(result.data);
                var datenew = new Date(parseInt(CurrenDateTimeServicetemp[0].CurrentDateTime.substring(6, 19))).getDate() + '-' +
                    (new Date(parseInt(CurrenDateTimeServicetemp[0].CurrentDateTime.substring(6, 19))).getMonth() + 1) + '-' +
                    new Date(parseInt(CurrenDateTimeServicetemp[0].CurrentDateTime.substring(6, 19))).getFullYear();
                var datenew1 = datenew.toString().split("-");
                $rootScope.CurrenDateTimeService = angular.copy(datenew1[2] + "/" + datenew1[1] + "/" + datenew1[0]);
                // $rootScope.CurrenDateTimeService = angular.copy(datenew1[2] , datenew1[1] , datenew1[0]);
                $scope.todayDate = new Date($rootScope.CurrenDateTimeService);
                $scope.date = new Date($rootScope.CurrenDateTimeService);

                var beforeexpirydate = new Date($rootScope.CurrenDateTimeService);
                beforeexpirydate.setDate(beforeexpirydate.getDate() - 87);
                var beforeDATE1 = beforeexpirydate.getDate();
                var beforeMONTH1 = monthlist[beforeexpirydate.getMonth()];
                var beforeYEAR1 = beforeexpirydate.getFullYear();

                var date1 = new Date($rootScope.CurrenDateTimeService);
                date1.setDate(date1.getDate() + 180);

                var date2 = new Date($rootScope.CurrenDateTimeService);
                date2.setDate(date2.getDate() + 1);


                if (newflag != 2) {
                    $scope.Init1(datenew1, date1, date2);
                }
            });
            $timeout(function () {
                if (newflag == 0) {
                    newflag = 2;
                    $scope.Init1();
                }
            }, 2000);
        }
        $scope.Init1 = function (datenew1, date1, date2) {
            $window.scrollTo(0, 0);
            // $rootScope.scrollhide = 'scollClass';
            $scope.editcross = true;

            $scope.browserInfo = browserInfo.giveMeAllYouGot();
            if ($scope.browserInfo != undefined) {
                apios = $scope.browserInfo.os.name + "-" + $scope.browserInfo.os.version;
                apiBrowser = $scope.browserInfo.browser.name + "-" + $scope.browserInfo.browser.version;
                apiBrowserSize = $scope.browserInfo.screenSize.height + "X" + $scope.browserInfo.screenSize.width;
                if ($scope.browserInfo.screenSize.width >= 850) {
                    apidevice = "Desktop";
                }
                else if ($scope.browserInfo.screenSize.width >= 520) {
                    apidevice = "Tablet";
                }
                else if ($scope.browserInfo.screenSize.width < 520) {
                    apidevice = "Mobile";
                }
            }


            $rootScope.showloadcardtemplate = true;
            // $scope.showbtnloader1 = [];
            $scope.$root.showTopHeading = false;


            $scope.$root.quotesheader = true;

            $scope.$root.scrollhide = "whitebg"
            //$scope.clickToCallShow = true;
            $scope.servicetaxrate = globals.ServiceTax / 100;
            $scope.noshowloader = false;
            $scope.showloader = true;





            var currentpage = $location.absUrl();
            var currenturl = currentpage.split('?');

            var splitbyand = currenturl[1].split('&');
            if (splitbyand.length > 1) {
                var ID = splitbyand[1].split('=')[1];
                if (ID != '' && ID != null && ID != undefined) {
                    CommonService.TrackbirthdayMailer(parseInt(ID));
                }
            }

            var temp1 = $location.absUrl().split('&');
            // $scope.otpverify = true;
            for (var i = 0; i < temp1.length; i++) {
                if (temp1[i].indexOf("revisit") != -1) {
                    $scope.revisitedflag = true;
                }
                if (temp1[i].indexOf("tpshow") != -1) {
                    $scope.tpshow = false;
                }
                if (temp1[i].indexOf("email") != -1) {
                    $scope.leademail = true;
                    $scope.leadmod = false;
                }
                if (temp1[i].indexOf("mobile") != -1) {
                    $scope.leadmobile = true;
                    $scope.leadmod = false;
                }
                if (temp1[i].indexOf("name") != -1) {
                    $scope.leadname = true;
                    $scope.leadmod = false;
                }
                // if (temp1[i].indexOf("instantleadpop") != -1) {
                //     $scope.instantpopupflag = temp1[i].split('=')[1];
                // }
                if (temp1[i].indexOf("otpverify") != -1) {
                    $scope.otpverify = temp1[i].split('=')[1];
                }
                if (temp1[i].indexOf("Leadpopup") != -1) {
                    if (temp1[i].split('=')[1] == false || temp1[i].split('=')[1] == 'false') {
                        $scope.noleadpop = true;
                    }

                }

            }


            if ($scope.leadmod != false) {
                $scope.leadmod = true;
            }

            var currenturl = $scope.currentpage.split('?');
            var splitbyand = currenturl[1].split('&');
            if (splitbyand.length > 1) {
                if (splitbyand[0].split('CPID=')[1].indexOf("!") != -1) {
                    var cpidtemp = splitbyand[0].split('CPID=')[1];
                    $scope.IGquoteId = atob(cpidtemp.split('!')[1]);
                    //$rootScope.agentHide = true;
                }
                else {
                    $scope.IGquoteId = atob(splitbyand[0].split('CPID=')[1]);
                }
                // $scope.IGquoteId = atob(splitbyand[0].split('CPID=')[1]);


                if ($localStorage.IGQuoteId == undefined) {
                    $localStorage.IGQuoteId = parseInt($scope.IGquoteId);

                }
                else {
                    if ($localStorage.IGQuoteId != undefined || $localStorage.IGQuoteId.length > 0) {
                        $localStorage.IGQuoteId = null;
                        $localStorage.IGQuoteId = parseInt($scope.IGquoteId);

                    }
                }

            }
            else {

                if (currenturl[1].split('CPID=')[1].split('#')[0].indexOf("!") != -1) {
                    var cpidtemp = currenturl[1].split('CPID=')[1].split('#')[0];
                    $scope.IGquoteId = atob(cpidtemp.split('!')[1]);
                    //$rootScope.agentHide = true;
                    $localStorage.IGQuoteId = atob(cpidtemp.split('!')[1]);
                }
                else {
                    $localStorage.IGQuoteId = atob(currenturl[1].split('CPID=')[1].split('#')[0]);
                    $scope.IGquoteId = atob(currenturl[1].split('CPID=')[1].split('#')[0]);
                }






            }

            $scope = DataFactory.appinitdata($scope, $rootScope);
            if ($scope.currentpage.indexOf("Term") != -1) {


                // $analytics.eventTrack('View', { category: 'Quotes Page', label: 'Product Term', value: 3 });

                $rootScope.urlDefaultFlag = 0;
                $scope.product = "Term";
                $scope.productID = 3;
                $scope.sortfiltermobileshow = true;

                $scope.$root.sharethepage = true;

                $scope.setPixel($scope.IGquoteId, $scope.productID);
                $scope.$root.title = "insurejoy.com - Term Insurance";
                // if ($rootScope.termdata == undefined) {

                var data = CommonService.getCPIDdata($scope.IGquoteId, true);
                data.then(function (result) {
                    result.data = angular.fromJson(result.data);
                    $scope.GetPincodeFn(result.data.QuoteRequest.Requests[0].CityID);

                    if (result.data.QuoteRequest.Requests[0].ProductId == 17) {
                        $location.path("/Group");
                    }
                    else {
                        if (result.data.QuoteRequest.utmSource != undefined) {

                            //$scope.$root.utm_Source = result.data.QuoteRequest.utmSource.toLowerCase();
                            $scope.setClientLogo(result.data.QuoteRequest.utmSource);
                        }
                        $rootScope.termdata = result.data.QuoteRequest;
                        if (result.data.S_ID != undefined && result.data.S_ID != null && result.data.S_ID != "")
                            $scope.sId = result.data.S_ID;

                        if (result.data.QuoteRequest.ChannelID != undefined && result.data.QuoteRequest.ChannelID != null && result.data.QuoteRequest.ChannelID != "")
                            $rootScope.channelId = result.data.QuoteRequest.ChannelID; //for easylik
                        var a = $rootScope.termdata.LandingURL;

                        if ($scope.device == "Desktop") {

                            if ($rootScope.termdata.LandingURL.indexOf('life-insurance/term-insurance') != -1) {
                                //$rootScope.loadcardtemplate = '../HomePage/Template/TermNew1.html';
                                //$scope.gaProduct = "TermNew1";
                                //UiVersion = 3;
                                //$scope.plantypemodelnew = 25;
                                $rootScope.loadcardtemplate = '../HomePage/Template/Term.html';
                                $scope.gaProduct = "Term";
                            }
                            else if ($rootScope.termdata.LandingURL.indexOf('lp/life-term-plans/v1') != -1 || $rootScope.termdata.LandingURL.indexOf('life-insurance') != -1) {
                                $rootScope.loadcardtemplate = '../HomePage/Template/Term.html';
                                $scope.gaProduct = "TermNew";
                                UiVersion = 2;
                                $scope.plantypemodelnew = 25;

                            }
                            else {
                                $rootScope.loadcardtemplate = '../HomePage/Template/Term.html';
                                $scope.gaProduct = "Term";

                                $scope.plantypemodel = 0;
                            }


                        }
                        else if ($scope.device == "Mobile") {
                            if ($rootScope.termdata.LandingURL.indexOf('life-insurance/term-insurance') != -1) {
                                //$rootScope.loadcardtemplate = '../HomePage/Template/TermNewMobile1.html';
                                //$scope.gaProduct = "TermNew1";
                                //UiVersion = 3;
                                //$scope.plantypemodelnew = 25;
                                $rootScope.loadcardtemplate = '../HomePage/Template/TermMobile.html';
                                $scope.gaProduct = "Term";
                                $scope.plantypemodel = 0;

                            }
                            else if ($rootScope.termdata.LandingURL.indexOf('lp/life-term-plans/v1') != -1 || $rootScope.termdata.LandingURL.indexOf('life-insurance') != -1 || $rootScope.termdata.LandingURL.indexOf('V1') != -1) {
                                $rootScope.loadcardtemplate = '../HomePage/Template/TermMobile.html';
                                $scope.gaProduct = "TermNew";
                                UiVersion = 2;
                                $scope.plantypemodelnew = 25;
                            }
                            else {
                                $rootScope.loadcardtemplate = '../HomePage/Template/TermMobile.html';
                                $scope.gaProduct = "Term";
                                $scope.plantypemodel = 0;
                            }
                        }
                        $rootScope.agentHide = result.data.SanitizeCustomerInfo;
                        termrequestdata();
                        //$scope.runGTAG();
                    }
                }, function (response) {
                    ServiceRespnse(response);
                });
            }
            else if ($scope.currentpage.indexOf("Group") != -1) {
                $rootScope.urlDefaultFlag = 0;
                //$scope.showProductMoreTemplate = true;
                //$scope.loadProductMoreTemplate = '../HomePage/Template/TermMore.html';
                $scope.gaProduct = "Group";
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/Groupterm.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/GrouptermMobile.html';
                }
                $scope.product = "Group";
                $scope.productID = 17;

                $scope.sortfiltermobileshow = true;
                $scope.quotes_userdata = {};

                $scope.$root.sharethepage = true;


                $scope.$root.title = "insurejoy.com - Group Insurance";
                if ($rootScope.groupdata == undefined) {

                    var data = CommonService.getCPIDdata($scope.IGquoteId);
                    data.then(function (result) {
                        result.data = angular.fromJson(result.data);
                        if (result.data.QuoteRequest.utmSource != undefined) {
                            //$scope.$root.utm_Source = result.data.QuoteRequest.utmSource.toLowerCase();
                            $scope.setClientLogo(result.data.QuoteRequest.utmSource);
                        }
                        $rootScope.groupdata = result.data.QuoteRequest;
                        $rootScope.agentHide = result.data.SanitizeCustomerInfo;

                        if (result.data.S_ID != undefined && result.data.S_ID != null && result.data.S_ID != "")
                            $scope.sId = result.data.S_ID;
                        if (result.data.QuoteRequest.ChannelID != undefined && result.data.QuoteRequest.ChannelID != null && result.data.QuoteRequest.ChannelID != "")
                            $rootScope.channelId = result.data.QuoteRequest.ChannelID; //for easylik
                        grouprequestdata();
                    }, function (response) {
                        ServiceRespnse(response);
                    });

                }
                else {
                    grouprequestdata();
                }

            }
            else if ($scope.currentpage.indexOf("Car") != -1) {
                $scope.$root.title = "insurejoy.com - Car Insurance";

                // $rootScope.scrollmotor = "scrollmotor";
                // $scope.loadProductMoreTemplate = '../HomePage/Template/CarMore.html';
                $scope.gaProduct = "Car";
                $scope.Paownermodel = true;
                $rootScope.urlDefaultFlag = 0;
                $scope.continuejourneyaddons = [];
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/Car.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/CarMobile.html';
                    $scope.sortfiltermobileshow = true;
                }

                //$scope.loadEmailtemplatesrc = '../HomePage/Template/carallemailtable.html';

                $scope.$root.sharethepage = true;
                $scope.$root.product = "Car";
                $scope.productID = 4;
                $scope.product = "Car";
                if ($rootScope.cardata == undefined) {
                    var data = CommonService.getCPIDdata($scope.IGquoteId);
                    data.then(function (result) {
                        result.data = angular.fromJson(result.data);
                        if (result.data.QuoteRequest.utmSource != undefined) {
                            // $scope.$root.utm_Source = result.data.QuoteRequest.utmSource.toLowerCase();
                            $scope.setClientLogo(result.data.QuoteRequest.utmSource);
                        }
                        $rootScope.cardata = result.data.QuoteRequest;

                        if (result.data.S_ID != undefined && result.data.S_ID != null && result.data.S_ID != "")
                            $scope.sId = result.data.S_ID;
                        if (result.data.QuoteRequest.ChannelID != undefined && result.data.QuoteRequest.ChannelID != null && result.data.QuoteRequest.ChannelID != "")
                            $rootScope.channelId = result.data.QuoteRequest.ChannelID; //for easylik
                        $rootScope.agentHide = result.data.SanitizeCustomerInfo;
                        if (result.data.QuoteRequest.Requests[0].RegistrationYear >= 2018 && !result.data.QuoteRequest.Requests[0].IsNewVehicle) {
                            $scope.vechicleForPreviousYear = true;
                        }
                        // CommonFactory.carB2Bdata($scope, result.data.QuoteRequest.utmSource);
                        if (!$scope.vechicleForPreviousYear)
                            carrequestdata();
                    }, function (response) {
                        ServiceRespnse(response);
                    });
                }
                else {
                    if ($rootScope.cardata.Requests[0].RegistrationYear >= 2018 && !$rootScope.cardata.Requests[0].IsNewVehicle) {
                        $scope.vechicleForPreviousYear = true;
                    }
                    // CommonFactory.carB2Bdata($scope, result.data.QuoteRequest.utmSource);
                    if (!$scope.vechicleForPreviousYear) {
                        carrequestdata();
                    }
                }


            }
            else if ($scope.currentpage.indexOf("Twowheeler") != -1) {
                $scope.showProductMoreTemplate = true;
                // $scope.loadProductMoreTemplate = '../HomePage/Template/TWMore.html';
                $scope.gaProduct = "Two Wheeler";
                $scope.Paownermodel = true;
                $rootScope.scrollmotor = "scrollmotor";
                $scope.$root.title = "insurejoy.com - Two Wheeler Insurance";
                $rootScope.urlDefaultFlag = 0;
                $scope.continuejourneyaddons = [];
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/TW.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/TWMobile.html';
                }
                $scope.product = "Twowheeler";
                $scope.productID = 8;
                // var translate = CommonService.AngularTranslate($scope, lang);
                // translate.then(function (data) {
                //     var translatedata1 = data.data;
                //     $scope.translatedata = [];
                //     for (var i = 0; i < translatedata1.length; i++) {
                //         $scope.translatedata[translatedata1[i].Tag] = translatedata1[i].Value;
                //     }
                // }, function (response) {
                //     ServiceRespnse(response);
                // });

                if ($rootScope.twowheelerdata == undefined) {

                    $scope.sortfiltermobileshow = true;
                    $scope.$root.product = "Twowheeler";
                    var data = CommonService.getCPIDdata($scope.IGquoteId);
                    data.then(function (result) {
                        result.data = angular.fromJson(result.data);
                        if (result.data.QuoteRequest.utmSource != undefined) {
                            // $scope.$root.utm_Source = result.data.QuoteRequest.utmSource.toLowerCase();
                            $scope.setClientLogo(result.data.QuoteRequest.utmSource);
                        }

                        $rootScope.twowheelerdata = result.data.QuoteRequest;
                        if (result.data.S_ID != undefined && result.data.S_ID != null && result.data.S_ID != "")
                            $scope.sId = result.data.S_ID;
                        if (result.data.QuoteRequest.ChannelID != undefined && result.data.QuoteRequest.ChannelID != null && result.data.QuoteRequest.ChannelID != "")
                            $rootScope.channelId = result.data.QuoteRequest.ChannelID; //for easylik
                        $rootScope.agentHide = result.data.SanitizeCustomerInfo;
                        CommonFactory.carB2Bdata($scope, result.data.QuoteRequest.utmSource);
                        if (result.data.QuoteRequest.Requests[0].RegistrationYear >= 2018 && !result.data.QuoteRequest.Requests[0].IsNewVehicle) {
                            $scope.vechicleForPreviousYear = true;
                        }
                        // CommonFactory.carB2Bdata($scope, result.data.QuoteRequest.utmSource);
                        if (!$scope.vechicleForPreviousYear)
                            bikerequestdata();

                    }, function (response) {
                        ServiceRespnse(response);
                    });
                }
                else {
                    if ($rootScope.twowheelerdata.Requests[0].RegistrationYear >= 2018 && !$rootScope.twowheelerdata.Requests[0].IsNewVehicle) {
                        $scope.vechicleForPreviousYear = true;
                    }
                    // CommonFactory.carB2Bdata($scope, result.data.QuoteRequest.utmSource);
                    if (!$scope.vechicleForPreviousYear) { bikerequestdata(); }
                }




            }
            else if ($scope.currentpage.indexOf("Critical") != -1) {
                //$scope.showProductMoreTemplate = true;
                //$scope.loadProductMoreTemplate = '../HomePage/Template/TermMore.html';
                $scope.showbtnleadloader = [];
                $scope.gaProduct = "Critical";
                $scope.$root.title = "insurejoy.com - Critical Illness ";
                $scope.product = "Critical";
                $scope.productID = 9;
                // var translate = CommonService.AngularTranslate($scope, lang);
                // translate.then(function (data) {
                //     var translatedata1 = data.data;
                //     $scope.translatedata = [];
                //     for (var i = 0; i < translatedata1.length; i++) {
                //         $scope.translatedata[translatedata1[i].Tag] = translatedata1[i].Value;
                //     }
                // }, function (response) {
                //     ServiceRespnse(response);
                // });

                $rootScope.urlDefaultFlag = 0;
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/Critical.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/CriticalMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;

                if ($rootScope.criticaldata == undefined) {
                    $scope.$root.product = "Critical";
                    var data = CommonService.getCPIDdata($scope.IGquoteId);
                    data.then(function (result) {
                        result.data = angular.fromJson(result.data);
                        if (result.data.S_ID != undefined && result.data.S_ID != null && result.data.S_ID != "")
                            $scope.sId = result.data.S_ID;
                        if (result.data.QuoteRequest.ChannelID != undefined && result.data.QuoteRequest.ChannelID != null && result.data.QuoteRequest.ChannelID != "")
                            $rootScope.channelId = result.data.QuoteRequest.ChannelID; //for easylik
                        if (result.data.QuoteRequest.utmSource != undefined) {
                            // $scope.$root.utm_Source = result.data.QuoteRequest.utmSource.toLowerCase();
                            $scope.setClientLogo(result.data.QuoteRequest.utmSource);
                        }
                        $rootScope.criticaldata = result.data.QuoteRequest;
                        $rootScope.agentHide = result.data.SanitizeCustomerInfo;
                        criticalrequestdata();
                    }, function (response) {
                        ServiceRespnse(response);
                    });
                }
                else {
                    criticalrequestdata();
                }
            }
            else if ($scope.currentpage.indexOf("Investment") != -1) {
                //$scope.showProductMoreTemplate = true;
                //$scope.loadProductMoreTemplate = '../HomePage/Template/NonTermMore.html';
                $scope.showbtnleadloader = [];
                $scope.product = "Investment";
                $scope.gaProduct = "Investment";
                $scope.productID = 5;
                // var translate = CommonService.AngularTranslate($scope, lang);
                // translate.then(function (data) {
                //     var translatedata1 = data.data;
                //     $scope.translatedata = [];
                //     for (var i = 0; i < translatedata1.length; i++) {
                //         $scope.translatedata[translatedata1[i].Tag] = translatedata1[i].Value;
                //     }
                // }, function (response) {
                //     ServiceRespnse(response);
                // });

                $scope.$root.title = "insurejoy.com - Investment Plans";
                $rootScope.urlDefaultFlag = 0;
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTerm.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTermMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;

                if ($rootScope.investmentdata == undefined) {
                    $scope.$root.product = "Investment";
                    var data = CommonService.getCPIDdata($scope.IGquoteId);
                    data.then(function (result) {
                        result.data = angular.fromJson(result.data);

                        if (result.data.QuoteRequest.utmSource != undefined) {
                            // $scope.$root.utm_Source = result.data.QuoteRequest.utmSource.toLowerCase();
                            $scope.setClientLogo(result.data.QuoteRequest.utmSource);
                        }
                        $rootScope.investmentdata = result.data.QuoteRequest;
                        if (result.data.S_ID != undefined && result.data.S_ID != null && result.data.S_ID != "")
                            $scope.sId = result.data.S_ID;
                        if (result.data.QuoteRequest.ChannelID != undefined && result.data.QuoteRequest.ChannelID != null && result.data.QuoteRequest.ChannelID != "")
                            $rootScope.channelId = result.data.QuoteRequest.ChannelID; //for easylik
                        $rootScope.agentHide = result.data.SanitizeCustomerInfo;
                        if ($rootScope.investmentdata.Requests[0].PayingMode == "Monthly" || $rootScope.investmentdata.Requests[0].PayingMode == "M") {
                            $rootScope.nontermpaymode = 'm'
                        }
                        else {
                            $rootScope.nontermpaymode = 'y'
                        }
                        investrequestdata();
                    }, function (response) {
                        ServiceRespnse(response);
                    });


                }
                else {
                    investrequestdata();
                }
                //$scope.runGTAG();
            }
            else if ($scope.currentpage.indexOf("Pension") != -1) {
                //$scope.showProductMoreTemplate = true;
                //$scope.loadProductMoreTemplate = '../HomePage/Template/NonTermMore.html';
                $scope.showbtnleadloader = [];
                $scope.gaProduct = "Pension";
                $scope.product = "Pension";
                $scope.productID = 6;
                // var translate = CommonService.AngularTranslate($scope, lang);
                // translate.then(function (data) {
                //     var translatedata1 = data.data;
                //     $scope.translatedata = [];
                //     for (var i = 0; i < translatedata1.length; i++) {
                //         $scope.translatedata[translatedata1[i].Tag] = translatedata1[i].Value;
                //     }
                // }, function (response) {
                //     ServiceRespnse(response);
                // });

                $scope.$root.title = "insurejoy.com - Pension Plans";
                $rootScope.urlDefaultFlag = 0;
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTerm.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTermMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
                if ($rootScope.pensiondata == undefined) {
                    $scope.$root.product = "Pension";
                    var data = CommonService.getCPIDdata($scope.IGquoteId);
                    data.then(function (result) {
                        result.data = angular.fromJson(result.data);
                        if (result.data.QuoteRequest.utmSource != undefined) {
                            //$scope.$root.utm_Source = result.data.QuoteRequest.utmSource.toLowerCase();
                            $scope.setClientLogo(result.data.QuoteRequest.utmSource);
                        }
                        $rootScope.pensiondata = result.data.QuoteRequest;
                        if (result.data.S_ID != undefined && result.data.S_ID != null && result.data.S_ID != "")
                            $scope.sId = result.data.S_ID;
                        if (result.data.QuoteRequest.ChannelID != undefined && result.data.QuoteRequest.ChannelID != null && result.data.QuoteRequest.ChannelID != "")
                            $rootScope.channelId = result.data.QuoteRequest.ChannelID; //for easylik
                        $rootScope.agentHide = result.data.SanitizeCustomerInfo;
                        if ($rootScope.pensiondata.Requests[0].PayingMode == "Monthly" || $rootScope.pensiondata.Requests[0].PayingMode == "M") {
                            $rootScope.nontermpaymode = 'm'
                        }
                        else {
                            $rootScope.nontermpaymode = 'y'
                        }
                        pensionrequestdata();
                    }, function (response) {
                        ServiceRespnse(response);
                    });
                }
                else {
                    pensionrequestdata();
                }


            }
            else if ($scope.currentpage.indexOf("Child") != -1) {
                //$scope.showProductMoreTemplate = true;
                //$scope.loadProductMoreTemplate = '../HomePage/Template/NonTermMore.html';
                $scope.showbtnleadloader = [];
                $scope.product = "Child";
                $scope.gaProduct = "Child";
                $scope.productID = 7;
                // var translate = CommonService.AngularTranslate($scope, lang);
                // translate.then(function (data) {
                //     var translatedata1 = data.data;
                //     $scope.translatedata = [];
                //     for (var i = 0; i < translatedata1.length; i++) {
                //         $scope.translatedata[translatedata1[i].Tag] = translatedata1[i].Value;
                //     }
                // }, function (response) {
                //     ServiceRespnse(response);
                // });

                $scope.$root.title = "insurejoy.com - Child Insurance";
                $rootScope.urlDefaultFlag = 0;
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTerm.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTermMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
                if ($rootScope.childdata == undefined) {
                    $scope.$root.product = "Child";
                    var data = CommonService.getCPIDdata($scope.IGquoteId);
                    data.then(function (result) {
                        result.data = angular.fromJson(result.data);
                        if (result.data.QuoteRequest.utmSource != undefined) {
                            // $scope.$root.utm_Source = result.data.QuoteRequest.utmSource.toLowerCase();
                            $scope.setClientLogo(result.data.QuoteRequest.utmSource);
                        }
                        $rootScope.childdata = result.data.QuoteRequest;
                        if (result.data.S_ID != undefined && result.data.S_ID != null && result.data.S_ID != "")
                            $scope.sId = result.data.S_ID;
                        if (result.data.QuoteRequest.ChannelID != undefined && result.data.QuoteRequest.ChannelID != null && result.data.QuoteRequest.ChannelID != "")
                            $rootScope.channelId = result.data.QuoteRequest.ChannelID; //for easylik
                        $rootScope.agentHide = result.data.SanitizeCustomerInfo;
                        if ($rootScope.childdata.Requests[0].PayingMode == "Monthly" || $rootScope.childdata.Requests[0].PayingMode == "M") {
                            $rootScope.nontermpaymode = 'm'
                        }
                        else {
                            $rootScope.nontermpaymode = 'y'
                        }
                        childrequestdata();
                    }, function (response) {
                        ServiceRespnse(response);
                    });


                }
                else {
                    childrequestdata();
                }


            }
            else if ($scope.currentpage.indexOf("Travel") != -1) {
                //$scope.showProductMoreTemplate = true;
                //$scope.loadProductMoreTemplate = '../HomePage/Template/TravelMore.html';
                $scope.gaProduct = "Travel";
                $scope.$root.title = "insurejoy.com - Travel Insurance";
                $scope.product = "Travel";
                $scope.$root.travelsecondpop = false;
                $scope.$root.popuptravelpage = false;
                $scope.productID = 1;
                $scope.singlequotestravel = '../Homepage/commonfiles/emailtemplates/singlequotestravel.html';
                if (datenew1 != undefined) {
                    $scope.travelStartDate = new Date($rootScope.CurrenDateTimeService);
                    $scope.minstartdatetravel = datenew1[1] + "/" + datenew1[0] + "/" + datenew1[2]
                    $scope.maxenddatetravel = date1.getMonth() + 1 + "/" + date1.getDate() + "/" + date1.getFullYear();
                    $scope.minenddatetravel = date2.getMonth() + 1 + "/" + date2.getDate() + "/" + date2.getFullYear();
                }

                // var translate = CommonService.AngularTranslate($scope, lang);
                // translate.then(function (data) {
                //     var translatedata1 = data.data;
                //     $scope.translatedata = [];
                //     for (var i = 0; i < translatedata1.length; i++) {
                //         $scope.translatedata[translatedata1[i].Tag] = translatedata1[i].Value;
                //     }
                // }, function (response) {
                //     ServiceRespnse(response);
                // });

                $rootScope.urlDefaultFlag = 0;
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/Travel.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/TravelMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
                if ($rootScope.traveldata == undefined) {
                    $scope.$root.product = "Travel";
                    var data = CommonService.getCPIDdata($scope.IGquoteId);
                    data.then(function (result) {
                        result.data = angular.fromJson(result.data);
                        if (result.data.QuoteRequest.utmSource != undefined) {
                            //$scope.$root.utm_Source = result.data.QuoteRequest.utmSource.toLowerCase();
                            $scope.setClientLogo(result.data.QuoteRequest.utmSource);
                        }
                        $rootScope.traveldata = result.data.QuoteRequest;
                        if (result.data.S_ID != undefined && result.data.S_ID != null && result.data.S_ID != "")
                            $scope.sId = result.data.S_ID;
                        if (result.data.QuoteRequest.ChannelID != undefined && result.data.QuoteRequest.ChannelID != null && result.data.QuoteRequest.ChannelID != "")
                            $rootScope.channelId = result.data.QuoteRequest.ChannelID; //for easylik
                        $rootScope.agentHide = result.data.SanitizeCustomerInfo;
                        travelrequestdata();
                    }, function (response) {
                        ServiceRespnse(response);
                    });


                }
                else {
                    travelrequestdata();
                }

            }

            else if ($scope.currentpage.indexOf("Health") != -1) {
                $scope.$root.title = "insurejoy.com - Health Insurance";
                $scope.gaProduct = "Health";
                $scope.productID = 2;



                // $analytics.eventTrack('View', { category: 'Quotes Page', label: 'Product Health', value: 2 });
                $rootScope.urlDefaultFlag = 0;

                $scope.product = "Health";
                // $scope.ReligarePopupSrc = '../HomePage/Template/ReligarePopup.html';

                $scope.setPixel($scope.IGquoteId, $scope.productID);

                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
                if ($rootScope.healthdata == undefined) {
                    $scope.$root.product = "Health";

                    var data = CommonService.getCPIDdata($scope.IGquoteId);
                    data.then(function (result) {
                        result.data = angular.fromJson(result.data);
                        if (result.data.Page == "PostPaymentProposalPage") {
                            window.location.href = globals.RedirectURL + "Health-Proposal/" + btoa($scope.IGquoteId);
                        }
                        if (result.data.QuoteRequest.utmSource != undefined) {
                            // $scope.$root.utm_Source = result.data.QuoteRequest.utmSource.toLowerCase();
                            $scope.setClientLogo(result.data.QuoteRequest.utmSource);
                        }
                        $scope.utmSource = result.data.QuoteRequest.utmSource;
                        $rootScope.healthdata = result.data.QuoteRequest;
                        $rootScope.agentHide = result.data.SanitizeCustomerInfo;

                        if (result.data.S_ID != undefined && result.data.S_ID != null && result.data.S_ID != "")
                            $scope.sId = result.data.S_ID;
                        if (result.data.QuoteRequest.ChannelID != undefined && result.data.QuoteRequest.ChannelID != null && result.data.QuoteRequest.ChannelID != "")
                            $rootScope.channelId = result.data.QuoteRequest.ChannelID; //for easylik

                        healthrequestdata();
                    }, function (response) {
                        ServiceRespnse(response);
                    });

                }
                else {
                    healthrequestdata();
                }

               // $scope.runGTAG();
            }
            RemoveSearchUrl();
        }

        $scope.setClientLogo = function (utmText) {
            DataFactory.clientLogoList($scope, utmText);
        }
        $scope.viewGarage = function (item, id) {
            var motorFlag = 2;
            if ($scope.product == "Car") {
                motorFlag = 2;
            }
            else {
                motorFlag = 1;
            }
            if (id == undefined) {
                $scope.garageIrto = $scope.quotesrequest.Requests[0].RTOCode;
            }
            else {
                $scope.garageIrto = item.RTOCode;
            }
            if (item.InsurerId) {
                $scope.garageInsurerId = item.InsurerId;
            }
            MotorCity(motorFlag, $scope.garageIrto).then(function (pl) {
                $scope.garagename = undefined;
                $scope.garageIitem = item;
                
                var req = FeatureService.GarageListFn($scope.garageInsurerId, $scope.motorCityId, $scope.productID, $scope.quotesrequest.Requests[0].ModelId);
                req.then(function (result) {
                    result.data = angular.fromJson(result.data);
                    $scope.CarGarageList = result.data;
                    $scope.showrtocitylist = false;
                    $rootScope.motorGarageshow = true;
                    $scope.showbtnrtoloader = false;
                    $rootScope.scrollhide = 'scollClass';
                    $rootScope.motorGarageSRC = '../HomePage/Template/motorGarage.html';
                    if (result.data.length == 0) {
                        $scope.nogrghosp = true;
                    }
                    else {
                        $scope.nogrghosp = false;
                    }
                }, function (response) {
                    ServiceRespnse(response);
                });
            });
        }
        $scope.SubmitrtoNo = function () {
            if ($scope.garageRto == undefined || $scope.garageRto == null) {
                $scope.garageRtoerror = true;
            }
            else {
                for (var q = 0; q < $scope.motorCitystateList.length; q++) {
                    if ($scope.motorCitystateList[q].RTOCode == $scope.garageRto.RTOCode) {
                        $scope.motorCityId = $scope.motorCitystateList[q].IGCityId;
                    }
                }
                $scope.showbtnrtoloader = true;
                $scope.garageRtoerror = false;
                $scope.garageIrto = $scope.garageRto.RTOCode;
                $scope.viewGarage($scope.garageRto, 1);
            }
        }

        $(document).ready(function () {
            var idleState = false;
            var idleTimer = null;
            $('*').bind('mousemove click mouseup mousedown keydown keypress keyup submit change mouseenter scroll resize dblclick', function () {
                clearTimeout(idleTimer);
                if (idleState == true) {
                    $("body").css('background-color', '#fff');
                }
                idleState = false;
                idleTimer = setTimeout(function () {
                    $("body").css('background-color', '#000');
                    idleState = true;
                }, 2000);
            });
            $("body").trigger("mousemove");
        });
        function MotorCity(id, rto, flag) {
            var defer = $q.defer();
            var req = CommonService.getmotorcity(id);
            req.then(function (result) {
                $scope.motorCitystateList = [];
                $scope.motorCitystateList = result.data;
                for (var q = 0; q < $scope.motorCitystateList.length; q++) {
                    if ($scope.motorCitystateList[q].RTOCode == rto) {
                        $scope.motorCityId = $scope.motorCitystateList[q].IGCityId;
                    }
                }
                defer.resolve(result);
            }, function (reject) {
                defer.reject(reject);
            });
            return defer.promise;
        }
        function RemoveSearchUrl() {
            var currentpage = $location.absUrl();
            if (currentpage.indexOf('viewmore') != -1) {
                if ($location.$$search.viewmore) {
                    delete $location.$$search.viewmore;
                    $location.$$compose();
                }
            }
            if (currentpage.indexOf('comparepop') != -1) {
                if ($location.$$search.comparepop) {
                    delete $location.$$search.comparepop;
                    $location.$$compose();
                }
            }

            if (currentpage.indexOf('filterpop') != -1) {
                if ($location.$$search.filterpop) {
                    delete $location.$$search.filterpop;
                    $location.$$compose();
                }
            }
            if (currentpage.indexOf('sortpop') != -1) {
                if ($location.$$search.sortpop) {
                    delete $location.$$search.sortpop;
                    $location.$$compose();
                }
            }

            if (currentpage.indexOf('editsearch') != -1) {
                if ($location.$$search.editsearch) {
                    delete $location.$$search.editsearch;
                    $location.$$compose();
                }
            }

        }
        $scope.ApplySort = function (flag) {
            if (flag == 'sort') {
                $scope.historyback("sort");
                $rootScope.popsortmobile = false;
                $scope.sortBtnLoader = true;
                $scope.showresuslt = true;
                if ($location.$$search.sortpop) {
                    delete $location.$$search.sortpop;
                    $location.$$compose();
                }

                var a = "Sort Apply " + $scope.gaProduct;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            }
            else if (flag == 'filter') {
                $scope.historyback("filter");
                $rootScope.popfiltermobile = false;

                // $scope.Mobilefilter();
                var a = "Filter Apply " + $scope.gaProduct;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


                if ($location.$$search.filterpop) {
                    delete $location.$$search.filterpop;
                    $location.$$compose();
                }
            }
        }
       

        $scope.Initialzedata = function (flag, valueterm, typeterm) {
            $scope.reload = undefined;
            $scope.reload1 = undefined;
            $scope.reload2 = undefined;
            $scope.$root.header = true;
            $scope.$root.showfooter = true;
            //$rootScope.leadFlag = 1;
            $scope.showclickcall = true;


            $scope.quotesrequest.UiVersion = UiVersion;
            $scope.quotesrequest.Language = $rootScope.babliclang;
            if ($scope.product == "Term") {
                $scope.userselectionrider = [];
                $rootScope.jointlifemodel = [];
                var b;
                if ($rootScope.termdata != undefined) {
                    b = $rootScope.termdata.BrowserId;
                }
                if ($localStorage.IsPulseCPID == $scope.IGquoteId || (b != null && b != undefined && b != "")) {
                    $scope.showpulseLoader = true;
                }
                else {

                    $localStorage.IsPulseCPID = $scope.IGquoteId;
                }

                if ($scope.quotesrequest.Requests[0].riderList != undefined && $scope.quotesrequest.Requests[0].riderList != null && $scope.quotesrequest.Requests[0].riderList != []) {
                    for (var i = 0; i < $scope.quotesrequest.Requests[0].riderList.length; i++) {
                        $scope.quotesrequest.Requests[0].riderList[i].SelectedSumAssured = 0;
                    }
                }
            }




            if ($scope.currentpage.indexOf("revisit") != -1) {

                var revisitflag = CommonService.revisit($scope, globals, $scope.IGquoteId);
                revisitflag.then(function (data) {

                }, function (response) {
                    ServiceRespnse(response);
                });

            }

            $window.scrollTo(0, 0);
            if ($scope.canceller != undefined && $scope.quotesrequest.DefaultInsurerId == 0) {
                $scope.cancelit();
            }
            if ($localStorage.IsNewRequest == !1 && $scope.currentpage.indexOf("CPID") == -1) { $scope.utmSource = $localStorage.utmSource; $scope.quotesrequest.utmSource = $localStorage.utmSource; $scope.quotesrequest.utmCompaign = $localStorage.utmCompaign; $scope.quotesrequest.utmMedium = $localStorage.utmMedium; $scope.quotesrequest.utmTerm = $localStorage.utmTerm; }
            if ($scope.quotesrequest.MobileNo != undefined && $scope.quotesrequest.MobileNo != "") {
                $scope.userMobileNumber = $scope.quotesrequest.MobileNo;
                if ($scope.quotesrequest.BrowserId == undefined) { $scope.usertxtMobileNumber = $scope.userMobileNumber; }
            }
            if ($scope.quotesrequest.UserName != undefined && $scope.quotesrequest.UserName != "") {
                $scope.userName = $scope.quotesrequest.UserName;

            }
            if ($scope.quotesrequest.Email != undefined && $scope.quotesrequest.Email != "") {
                $scope.userEmailID = $scope.quotesrequest.Email;
            }

            if ($scope.quotesrequest.utmSource != undefined) {
                if ($scope.quotesrequest.utmSource.toLowerCase() == "policymanager") {
                    $scope.$root.showHeaderClass = "display-none";
                }



            }
            if ($rootScope.LandingUrl == undefined) {
                $rootScope.LandingUrl = $scope.quotesrequest.LandingURL;
            }
            if (parseInt($scope.instantpopupflag) == 2 && $scope.firstleadpop != 1 && $scope.userName == undefined && $scope.userMobileNumber == undefined && $scope.userEmailID == undefined && $scope.currentpage.indexOf("CPID") != -1) {
                $scope.leadpopshow();
            }

            if ($scope.product == "Twowheeler" || $scope.product == "Car") {
                $scope.ErrorQuotesData = [];

                if ($scope.quotesrequest.Requests[0].InsuranceType == undefined || $scope.quotesrequest.Requests[0].InsuranceType == null || $scope.quotesrequest.Requests[0].InsuranceType == "") {
                    $scope.quotesrequest.Requests[0].InsuranceType = "CO";
                }
                if ($scope.quotesrequest.Requests[0].ClaimTaken == true) {
                    $scope.lastclaim = 1;
                }
                else {
                    $scope.lastclaim = 0;
                }
                $scope.policyterm3show = false;
                $scope.policyterm5show = false;
                $scope.policyterm2show = false;
                $scope.policyterm1show = false;
                // $scope.totalplanlength = 0;
                $scope.quotesrequest.Requests[0].IsOffline = false;
                if ($scope.lazyloadcycle == 0) {
                    $scope.lazyloader = false;
                    $scope.noshowloader = false;
                    if ($scope.$root.showmainloader == false) {
                        $scope.showloader = true;
                    }


                    if ($scope.product == "Twowheeler") {

                        $scope.quotesrequest.Requests[0].InsurerIds = [1, 2, 7, 61, 10];

                        $scope.quotesrequest.Requests[0].PolicyTerm = 0;
                    }
                    if ($scope.product == "Car") {
                        if ($scope.reload2 == undefined) {
                            $scope.quotesrequest.Requests[0].InsurerIds = [1, 2, 7, 10, 61];
                            $scope.reload2 = 0;
                        }
                    }
                    $scope.quotesrequest.Requests[0].QuoteCycle = 0;


                }

                if (flag != 2) {
                    var selectedDefferd = $q.defer();
                    selectedDefferd.reject('Rejected!');
                }
                new Fingerprint2({ canvas: true }).get(function (result, components) {
                    console.log(result); //a hash, representing your device fingerprint
                    $scope.fingreprint = result;
                    console.log(components); // an array of FP components
                    var c;
                    if ($scope.product == "Car") {
                        if ($rootScope.cardata != undefined) {
                            c = $rootScope.cardata.BrowserId;
                        }

                    }


                    if ($scope.product == "Twowheeler") {
                        if ($rootScope.twowheelerdata != undefined) {
                            c = $rootScope.twowheelerdata.BrowserId;
                        }

                    }



                    if (c != null && c != undefined && c != "") {
                        $scope.quotesrequest.IsQuotesfirst = false;
                    }
                    else {

                        $scope.quotesrequest.IsQuotesfirst = true;
                    }
                    $scope.quotesrequest.BrowserId = $scope.fingreprint;

                    $scope.quotesrequest.DeviceType = $scope.device;
                    $scope.quotesrequest.DeviceName = apios;
                    $scope.quotesrequest.Browser = apiBrowser;
                    if ($scope.quotesrequest.DefaultInsurerId > 0) {
                        $scope.quotesrequest.Requests[0].InsurerIds = [$scope.quotesrequest.DefaultInsurerId]
                    }
                    $scope.quotesapireq = QuoteService.Quotes_Service1($scope.quotesrequest, 1, $scope);
                    $scope.Quotes_Data = [];
                    $scope.quotesdatatemp = undefined;
                    $scope.lazyloadcycleterm = 0;
                    $scope.quotesdata = undefined;
                    $scope.lazyloadcyclelength = 0;
                    $scope.quotesdatatemp1 = undefined;
                    $scope.selectedaddon = undefined;
                    $scope.Quotesdata1();
                    if ($scope.quotesrequest.DefaultInsurerId == 0 || $scope.quotesrequest.DefaultInsurerId == null || $scope.quotesrequest.DefaultInsurerId == undefined) {
                        $scope.lazyloadcycle1();
                        $scope.lazyloadcycle2();
                    }
                    $scope.Quotesbreakingdays = $scope.quotesrequest.Requests[0].BreakingDays;

                });

            }
            else {
                $scope.noshowloader = false;
                if ($scope.$root.showmainloader == false) {
                    $scope.showloader = true;
                }

                $scope.Quotes_Data = undefined;
                $scope.quotesdatatemp = undefined;
                $scope.quotesdata = undefined;
                $scope.quotesdatatemp1 = undefined;
                new Fingerprint2({ canvas: true }).get(function (result, components) {
                    console.log(result); //a hash, representing your device fingerprint
                    $scope.fingreprint = result;
                    console.log(components); // an array of FP components
                    var c;
                    if ($rootScope.healthdata != undefined) {
                        c = $rootScope.healthdata.BrowserId;
                    }
                    if (c != null && c != undefined && c != "") {
                        $scope.quotesrequest.IsQuotesfirst = false;
                    }
                    else {

                        $scope.quotesrequest.IsQuotesfirst = true;
                    }
                    $scope.quotesrequest.UiVersion = UiVersion;
                    $scope.quotesrequest.BrowserId = $scope.fingreprint;
                    $scope.quotesrequest.DeviceType = $scope.device;
                    $scope.quotesrequest.DeviceName = apios;
                    $scope.quotesrequest.Browser = apiBrowser;
                    if ($scope.product == "Health") {
                        $scope.quotesrequest.Requests[0].PlanID = undefined;
                        $scope.quotesrequest.Requests[0].IsSmartSelected = undefined;
                        if (!$scope.quotesrequest.Requests[0].IsCovid)
                            $scope.quotesrequest.Requests[0].PolicyTerm = 1;
                        $scope.quotesrequest.Requests[0].SumInsured = $scope.quotesrequest.Requests[0].MinSumInsured;
                        if ($rootScope.healthdata.DefaultInsurerId > 0) {
                            $scope.quotesrequest.DefaultInsurerId = $rootScope.healthdata.DefaultInsurerId;
                        }
                    }

                    if ($scope.product.toLowerCase() == "investment") {
                        if ($scope.quotesrequest.Requests[0].PayingMode != undefined) {
                            if ($scope.quotesrequest.Requests[0].PayingMode.toLowerCase() == "monthly") {
                                $scope.quotesrequest.Requests[0].PayingMode = "M";
                            }
                        }
                        $scope.quotesrequest.Requests[0].PlanID = undefined;
                        $scope.quotesrequest.Requests[0].IsSmartSelected = undefined;
                        $scope.quotesrequest.Requests[0].PolicyTerm = 1;
                        $scope.userselectionrider = [];
                        $scope.editmdrider = [];
                    }
                    if ($scope.quotesrequest.DefaultInsurerId > 0) {
                        $scope.quotesrequest.Requests[0].InsurerIds = [$scope.quotesrequest.DefaultInsurerId]
                    }
                    if ($scope.productID == 3) {
                        $scope.quotesrequest.Requests[0].IncomePeriod = $scope.IncomePeriod;
                        $scope.quotesrequest.Requests[0].IncreasingMonthlyIncome = $scope.IncreasingMonthlyIncome;
                    }
                    if ($scope.productID == 2) {
                        $scope.quotesrequest.Requests[0].DeductibleAmount = $scope.HealthExistCover.value;
                    }
                    if ($scope.productID == 5) {
                        $scope.quotesrequest.Requests[0].Features = [];

                        $scope.quotesrequest.Requests[0].IsOffline = true;

                    }
                    $scope.quotesapireq = QuoteService.Quotes_Service($scope.quotesrequest, $scope);
                    $scope.Quotesdata1(valueterm, typeterm);


                });
            }

            $rootScope.resultData = $scope.quotesrequest;
            if ($rootScope.resultData.ChannelName == "B2B") {
                $rootScope.isIGnetwork = true;
            }
        }

        $scope.lazyloadcycle1 = function () {
            var urlservice = globals.ServiceURL + "/quoteservice.svc/web/getquotes";
            var ServiceName = "quoteservice";
            if ($scope.lazyloadcycleterm == 0) {
                $timeout(function () {
                    if ($scope.quotestimeout2 == 0) {
                        if ($scope.Quotes_Data == undefined) {
                            $scope.ToastText = "Fetching quotes, please wait. It is taking longer than usual which might be due to network issues. We appreciate your patience.";
                            $scope.showSimpleToast();
                        }
                        $scope.responsenull['lazyloadcycle2'] = 0;

                        $scope.TimeOutService("30000", urlservice, ServiceName);

                    }
                    else {
                        $scope.quotestimeout2 = 0;
                        $scope.ToastText = "";
                        $scope.responsenull['lazyloadcycle2'] = 1;
                    }
                }, 30000);

            }
            if ($scope.reload == undefined) {
                $scope.quotesrequest.Requests[0].InsurerIds = [12, 17, 14, 41, 16, 63, 15, 5,49];
                $scope.reload = 0;
            }

            $scope.quotesrequest.Requests[0].QuoteCycle = 0;
            $scope.quotesapireq1 = QuoteService.Quotes_Service2($scope.quotesrequest, 1, $scope);
            $scope.quotesapireq1.then(function (result) {
                $scope.quotestimeout2 = 1;
                $scope.GetTime['lazyloadcycle2'] = new Date().getTime();
                if ($scope.responsenull['lazyloadcycle2'] == 0) {
                    $scope.totaltime['lazyloadcycle2'] = parseInt($scope.GetTime['lazyloadcycle2'] - $scope.HitTime['lazyloadcycle2']);
                    $scope.TimeOutService("30000", urlservice, ServiceName, $scope.totaltime['lazyloadcycle2']);
                }
                if (result.data != undefined) {
                    if (result.data.Errors != undefined) {
                        for (var i = 0; i < result.data.Errors.length; i++) {
                            if (result.data.Errors[i].IsUserError == true) { $scope.ErrorQuotesData.push(result.data.Errors[i]); }
                        }
                    }
                }
                if ($scope.lazyloadcycleterm == 0) {
                    if (result.data.Quotes != undefined && result.data.Quotes != null) {
                        if (result.data.Quotes.length > 0) {
                            $scope.showloader = false;
                            $scope.lazyloader = true;

                        }

                    }

                    $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;

                }
                else if ($scope.lazyloadcycleterm == 1) {
                    if (result.data.Quotes != undefined && result.data.Quotes != null) {
                        if (result.data.Quotes.length > 0) {
                            $scope.showloader = false;
                            $scope.lazyloader = true;

                        }

                    }


                    $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                }
                else if ($scope.lazyloadcycleterm == 2) {
                    $scope.lazyloader = false;
                    $scope.showloader = false;
                    $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                    if (result.data.Quotes == undefined || result.data.Quotes == "") {
                        DataFactory.GetTotalPlan($scope);
                    }
                    else if (result.data.Quotes.length == 0) {
                        DataFactory.GetTotalPlan($scope);
                    }
                }
                $scope.lazyloadcycle = 2;

                if (result.data.Quotes != undefined) {
                    $scope.tpshow = result.data.isTP;
                    if (result.data.Quotes.length > 0) {

                        $scope.showloader = false;
                        $scope.showresuslt = true;
                        $scope.noshowloader = true;
                        $scope.orderByField = "BasicODPremium";
                        if ($scope.product == "Twowheeler") {

                            $scope.Twowheelerquotesfn1(result.data.Quotes);
                        }
                        if ($scope.product == "Car") {
                            $scope.Carquotesfn1(result.data.Quotes);
                        }


                    }
                    else if ($scope.lazyloadcycleterm == 1 && $scope.Quotes_Data.length == 0) {
                        $scope.showloader = true;
                        $scope.lazyloader = false;
                        $scope.noshowloader = false;
                    }

                }
                else if ($scope.lazyloadcycleterm == 1 && $scope.Quotes_Data.length == 0) {
                    $scope.showloader = true;
                    $scope.lazyloader = false;
                    $scope.noshowloader = false;
                }



            }, function (response) {
                ServiceRespnse(response);
            });

        }

        $scope.lazyloadcycle2 = function () {
            var urlservice = globals.ServiceURL + "/quoteservice.svc/web/getquotes";
            var ServiceName = "quoteservice";
            if ($scope.lazyloadcycleterm == 1) {
                $timeout(function () {
                    if ($scope.quotestimeout3 == 0) {

                        if ($scope.Quotes_Data == undefined) {
                            $scope.ToastText = "Fetching quotes, please wait. It is taking longer than usual which might be due to network issues. We appreciate your patience.";
                            $scope.showSimpleToast();
                        }

                        $scope.responsenull['lazyloadcycle3'] = 0;
                        $scope.TimeOutService("45000", urlservice, ServiceName);

                    }
                    else {
                        $scope.quotestimeout3 = 0;
                        $scope.ToastText = "";
                        $scope.responsenull['lazyloadcycle3'] = 1;
                    }
                }, 45000);
            }

            if ($scope.product == "Twowheeler") {

                $scope.quotesrequest.Requests[0].InsurerIds = [6, 47, 34, 49, 50, 68];
            }
            if ($scope.product == "Car") {
                $scope.quotesrequest.Requests[0].InsurerIds = [6, 47, 34, 50, 68];

            }
            $scope.quotesrequest.Requests[0].QuoteCycle = 0;
            $scope.quotesapireq2 = QuoteService.Quotes_Service3($scope.quotesrequest, 1, $scope);
            $scope.quotesapireq2.then(function (result) {

                if (result.data != undefined) {
                    if (result.data.Errors != undefined) {
                        for (var i = 0; i < result.data.Errors.length; i++) {
                            if (result.data.Errors[i].IsUserError == true) { $scope.ErrorQuotesData.push(result.data.Errors[i]); }
                        }
                    }
                }
                $scope.GetTime['lazyloadcycle3'] = new Date().getTime();
                $scope.quotestimeout3 = 1;
                if ($scope.responsenull['lazyloadcycle3'] == 0) {
                    $scope.totaltime['lazyloadcycle3'] = parseInt($scope.GetTime['lazyloadcycle3'] - $scope.HitTime['lazyloadcycle3']);
                    $scope.TimeOutService("45000", urlservice, ServiceName, $scope.totaltime['lazyloadcycle3']);
                }

                if ($scope.lazyloadcycleterm == 0) {
                    if (result.data.Quotes != undefined && result.data.Quotes != null) {
                        if (result.data.Quotes.length > 0) {
                            $scope.showloader = false;
                            $scope.lazyloader = true;

                        }
                    }
                    $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                }
                else if ($scope.lazyloadcycleterm == 1) {
                    if (result.data.Quotes != undefined && result.data.Quotes != null) {
                        if (result.data.Quotes.length > 0) {
                            $scope.showloader = false;
                            $scope.lazyloader = true;

                        }

                    }
                    $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                }
                else if ($scope.lazyloadcycleterm == 2) {
                    $scope.lazyloader = false;
                    $scope.showloader = false;
                    $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                    if (result.data.Quotes == undefined || result.data.Quotes == "") {
                        DataFactory.GetTotalPlan($scope);
                    }
                    else if (result.data.Quotes.length == 0) {
                        DataFactory.GetTotalPlan($scope);
                    }
                }
                if (result.data.Quotes != undefined) {
                    $scope.tpshow = result.data.isTP;
                    if (result.data.Quotes.length > 0) {
                        $scope.noshowloader = true;
                        $scope.showresuslt = true;


                        $scope.orderByField = "BasicODPremium";
                        if ($scope.product == "Twowheeler") {

                            $scope.Twowheelerquotesfn1(result.data.Quotes);
                        }
                        if ($scope.product == "Car") {
                            $scope.Carquotesfn1(result.data.Quotes);
                        }

                    }
                    else if ($scope.lazyloadcycleterm == 1 && $scope.Quotes_Data.length == 0) {
                        $scope.showloader = true;
                        $scope.lazyloader = false;
                        $scope.noshowloader = false;
                    }

                }
                else if ($scope.lazyloadcycleterm == 1 && $scope.Quotes_Data.length == 0) {
                    $scope.showloader = true;
                    $scope.lazyloader = false;
                    $scope.noshowloader = false;
                }


            }, function (response) {
                ServiceRespnse(response);
            });

        }

        $scope.showcardaddon = function (item, flag) {
            console.log(item);
            var text = item.addonlisttext.split(' ');
            item.addonlisttext = '';
            item.addonlistviewflag = false;
            if (flag == undefined) {
                for (var i = 0; i < item.addonavl.length; i++) {
                    item.addonavl[i].visibility = true;
                }
                $timeout(function () {
                    item.addonlisttext = 'View less..';
                    var a = 'Mobile' + flag + " " + $scope.gaProduct;

                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Left panel filter view more", value: $scope.productID });

                },1000)
            }
            else {
                for (var i = 3; i < item.addonavl.length; i++) {
                    item.addonavl[i].visibility = false;
                }
                item.addonlisttext = "";
                item.addonlistviewflag = true;
                $timeout(function () {
                    var num = item.addonavl.length - 3;
                    item.addonlisttext = num + ' more..';
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Left panel filter view less", value: $scope.productID });
                }, 1000)
                
            }
            $scope.Quotes_Data[item.objectid] = item;
            console.log($scope.quotesdata);

        }

        $scope.showcompfn = function () {
            if ($scope.showcompcon == true) {
                $scope.showcompcon = false;
                $scope.compclass = "";
                $scope.bordercl = "";
                $scope.Comparedisplay = false;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'compare function de-selection', value: $scope.productID });
            }
            else {
                $scope.showcompcon = true;
                $scope.compclass = "compclass";
                $scope.bordercl = "borderactiv";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'compare function selection', value: $scope.productID });
                if ($scope.Compareselection.length > 0) {
                    $scope.Comparedisplay = true;
                }
            }
        }


        $scope.Quotesdata1 = function (valueTerm, TypeTerm) {

            //$rootScope.leadFlag = 1;
            $rootScope.scrollhide = '';
            var urlservice = globals.ServiceURL + "/quoteservice.svc/web/getquotes";
            var ServiceName = "quoteservice";
            if ($scope.lazyloadcycle == 0) {
                $timeout(function () {
                    if ($scope.quotestimeout1 == 0) {
                        if ($scope.Quotes_Data == undefined) {
                            $scope.ToastText = "Fetching quotes, please wait. It is taking longer than usual which might be due to network issues. We appreciate your patience.";
                            $scope.showSimpleToast();

                        }

                        $scope.responsenull['lazyloadcycle1'] = 0;
                        $scope.TimeOutService("15000", urlservice, ServiceName);
                    }
                    else {
                        $scope.quotestimeout1 = 0;
                        $scope.ToastText = "";
                        $scope.responsenull['lazyloadcycle1'] = 1;
                    }
                }, 15000);
            }
            return $scope.quotesapireq.then(function (result) {
                result.data = angular.fromJson(result.data);
                //if ($scope.product != "Health") {
                //    $scope.showloader = false;
                //}
                $rootScope.scrollhide = '';
                if ($scope.product != "Car" || $scope.product != "Twowheeler") {
                    $scope.GetTime['lazyloadcycle1'] = new Date().getTime();

                    if ($scope.responsenull['lazyloadcycle1'] == 0) {
                        $scope.totaltime['lazyloadcycle1'] = parseInt($scope.GetTime['lazyloadcycle1'] - $scope.HitTime['lazyloadcycle1']);
                        $scope.TimeOutService("15000", urlservice, ServiceName, $scope.totaltime['lazyloadcycle1']);
                    }
                }
                if ($scope.product == 3) {
                    $scope.maxincomediy = parseInt($scope.quotesrequest.Requests[0].UserInputIncome / 12);
                }
                if (result.data.CustomerId != null && result.data.CustomerId != "" && result.data.CustomerId != undefined && result.data.CustomerId > 0 && $scope.quotesrequest.Email != undefined && $scope.quotesrequest.MobileNo != undefined && $scope.quotesrequest.UserName != undefined && $scope.quotesrequest.Email != "" && $scope.quotesrequest.MobileNo != "" && $scope.quotesrequest.UserName != "")
                    $scope.noleadpop = true;
                //                $scope.noshowloader = true;
                //                $scope.showloader = false;
                $scope.$root.progressbar.complete();
                if ($scope.timeout3 == 0) {
                    $scope.timeout3 = 1;
                    $scope.callService($scope);
                }
                $scope.showresuslt = true;
                $scope.$root.showmainloader = false;
                $scope.showbtntermloader = false;
                $scope.showbtnhealthloader = false;
                $scope.showbtninvestloader = false;
                $scope.showbtntravelloader = false;
                $scope.showbtnpensionloader = false;
                $scope.showbtnchildloader = false;
                $scope.showbtncarloader = false;
                $scope.showbtnbikeloader = false;
                if (result.data.Quotes == null || result.data.Quotes == undefined) {
                    result.data.Quotes = [];
                }
                else if (result.data.Quotes.length > 0 || result.data.Errors.length > 0) {
                    $scope.quotestimeout1 = 1;
                    $scope.quotestimeout2 = 1;
                    $scope.quotestimeout3 = 1;
                }
                $scope.IGquoteId = result.data.IGQuoteId;
                $scope.quotesrequest.IGQuoteId = result.data.IGQuoteId;
                $localStorage.IGQuoteId = $scope.IGquoteId;
                var x = 0;
                var preclass = $scope.product + "ico";
                console.log($location.absUrl());

                if ($scope.product == "Car") {
                    var firstquoteslen = 0;
                    $scope.manualidv = true;
                    if (result.data != undefined) {
                        if (result.data.Errors != undefined) {
                            for (var i = 0; i < result.data.Errors.length; i++) {
                                if (result.data.Errors[i].IsUserError == true) { $scope.ErrorQuotesData.push(result.data.Errors[i]); }
                            }
                        }
                    }
                    if ($scope.lazyloadcycleterm == 0) {
                        if (result.data.Quotes != undefined && result.data.Quotes != null) {
                            if (result.data.Quotes.length > 0) {
                                $scope.showloader = false;
                                $scope.lazyloader = true;
                            }
                            else {
                                $scope.showloader = true;
                            }
                        }
                        $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                    }
                    else if ($scope.lazyloadcycleterm == 1) {
                        if (result.data.Quotes != undefined && result.data.Quotes != null) {
                            if (result.data.Quotes.length > 0) {
                                $scope.showloader = false;
                                $scope.lazyloader = true;
                            }
                        }
                        $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                    }
                    else if ($scope.lazyloadcycleterm == 2) {
                        $scope.lazyloader = false;
                        $scope.showloader = false;
                        $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                        if (result.data.Quotes == undefined || result.data.Quotes == "") {
                            DataFactory.GetTotalPlan($scope);
                        }
                        else if (result.data.Quotes.length == 0) {
                            DataFactory.GetTotalPlan($scope);
                        }
                    }
                    if (result.data.Quotes != undefined) {
                        $scope.tpshow = result.data.isTP;
                        if (result.data.Quotes.length > 0) {
                            if (result.data.Quotes[0].BreakingDays == 91) {
                                $scope.quotes_userdata.BreakingDays = 91;
                                $scope.RequiredNCB = 0;
                            }

                            $scope.lazyloadcycle = 1;
                            $scope.orderByField = "BasicODPremium";
                            $scope.Carquotesfn(result.data.Quotes);
                            $scope.noshowloader = true;

                        }
                        else {
                            firstquoteslen = 1;
                        }
                    }
                    else {
                        firstquoteslen = 1;
                    }
                    if (firstquoteslen == 1) {

                        $scope.lazyloadcycle = 1;

                    }
                    if ($scope.quotesrequest.DefaultInsurerId > 0) {
                        $scope.lazyloader = false;
                    }
                }
                else if ($scope.product == "Twowheeler") {
                    $scope.manualidv = true;
                    if (result.data != undefined) {
                        if (result.data.Errors != undefined) {
                            for (var i = 0; i < result.data.Errors.length; i++) {
                                if (result.data.Errors[i].IsUserError == true) { $scope.ErrorQuotesData.push(result.data.Errors[i]); }
                            }
                        }
                    }
                    var firstquoteslen = 0;
                    if ($scope.lazyloadcycleterm == 0) {
                        $scope.showloader = false;
                        $scope.lazyloader = true;
                        $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                    }
                    else if ($scope.lazyloadcycleterm == 1) {
                        $scope.showloader = false;
                        $scope.lazyloader = true;
                        $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                    }
                    else if ($scope.lazyloadcycleterm == 2) {
                        $scope.lazyloader = false;
                        $scope.showloader = false;
                        $scope.lazyloadcycleterm = $scope.lazyloadcycleterm + 1;
                        if (result.data.Quotes == undefined || result.data.Quotes == "") {
                            DataFactory.GetTotalPlan($scope);
                        }
                        else if (result.data.Quotes.length == 0) {
                            DataFactory.GetTotalPlan($scope);
                        }
                    }

                    if (result.data.Quotes != undefined) {
                        if (result.data.Quotes.length > 0) {
                            $scope.tpshow = result.data.isTP;
                            if (result.data.Quotes[0].BreakingDays == 91) {
                                $scope.quotes_userdata.BreakingDays = 91;
                                $scope.RequiredNCB = 0;
                            }
                            if (result.data.Quotes[0].InsurerId != 12 && result.data.Quotes[0].InsurerId != 14 && result.data.Quotes[0].InsurerId != 17 && result.data.Quotes[0].InsurerId != 41) {
                                $scope.lazyloadcycle = 1;
                                $scope.orderByField = "BasicODPremium";

                                $scope.Twowheelerquotesfn(result.data.Quotes);
                                $scope.noshowloader = true;

                            }

                        }

                    }

                    if ($scope.quotesrequest.DefaultInsurerId > 0) {
                        $scope.lazyloader = false;
                    }
                }


                else if ($scope.product == "Health") {

                    if (result.data.Errors.length > 0) {
                        $scope.ToastText = result.data.Errors[0].Error;
                        $scope.showSimpleToast();
                        $scope.Quotes_Data = "";
                        $scope.Quotes_Data_Plan = "";
                        $scope.noshowloader = true;
                        $scope.showloader = false;
                    }
                    else {
                        $scope.Quotes_Data = result.data.Quotes;
                        testdata = angular.copy(result.data.Quotes);
                        $scope = DataFactory.GetTotalPlan($scope);
                        $scope.Quotes_Data_Plan = result.data.Quotes;
                        if ($scope.Quotes_Data != undefined) {
                            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                                $scope.Quotes_Data[i].ids = i;
                                $scope.Quotes_Data[i].compareshow = false;
                                $scope.Quotes_Data[i].PremiumForPolicyYear1 = $scope.Quotes_Data[i].Premium;
                                $scope.Quotes_Data[i].featurewidth = "featurebox-full";
                                if ($scope.Quotes_Data[i].PlanId == 780) {
                                    $scope.Quotes_Data[i].SortByFileds = 100000;
                                }
                                else {
                                    $scope.Quotes_Data[i].SortByFileds = $scope.Quotes_Data[i].FinalPremium;
                                }
                                if ($scope.Quotes_Data[i].PlanId == 930) {
                                    var data = CommonService.HealthNetworkHospitals($scope.quotesrequest.Requests[0].CityId, 46, 930);
                                    data.then(function (result) {
                                        $scope.smartselecthospnetworklist = result.data;
                                    });
                                }
                                if ($scope.Quotes_Data[i].AvailableRiders != undefined && $scope.Quotes_Data[i].AvailableRiders != "") {
                                    if ($scope.Quotes_Data[i].AvailableRiders.length > 0) {
                                        $scope.Quotes_Data[i].featurewidth = "featurebox-half";
                                    }
                                }
                                $scope.Quotes_Data[i].Riderlistforbuy = [];
                                if ($rootScope.healthdata.Requests[0].IsCovid) {
                                    $scope.Quotes_Data[i].TempPremium1 = angular.copy($scope.Quotes_Data[i].FinalPremium);
                                }
                                else {
                                    $scope.Quotes_Data[i].TempPremium1 = angular.copy($scope.Quotes_Data[i].FinalPremium1);
                                }
                                $scope.Quotes_Data[i].TempPremium2 = angular.copy($scope.Quotes_Data[i].FinalPremium2);
                                $scope.Quotes_Data[i].TempDiscountedPremium2 = angular.copy($scope.Quotes_Data[i].DiscountedFinalPremium2);
                                $scope.Quotes_Data[i].TempFinalPremium3 = angular.copy($scope.Quotes_Data[i].FinalPremium3);
                                $scope.Quotes_Data[i].TempDiscountedPremium3 = angular.copy($scope.Quotes_Data[i].DiscountedFinalPremium3);
                                if ($scope.Quotes_Data[i].AvailableRiders != undefined && $scope.Quotes_Data[i].AvailableRiders != "") {
                                    $scope.Quotes_Data[i].AvailableRiders.forEach(function (riderdata) {
                                        if (riderdata.IsInculded || $scope.mdrider[$scope.Quotes_Data[i].PlanId + ',' + riderdata.RiderId] == true) {
                                            $scope.HealthAddonSelection(riderdata, $scope.Quotes_Data[i], true);
                                        }
                                        if (riderdata.RiderId == 1 && riderdata.IsInculded && riderdata.InsurerId == globals.HealthInsurerId.Religare && riderdata.PlanId == $scope.Quotes_Data[i].PlanId) {

                                            var reducDesable = $filter('filter')($scope.Quotes_Data[i].AvailableRiders, function (d) {
                                                return d.InsurerId == 46 && d.PlanId == riderdata.PlanId && d.RiderId == 15
                                            })[0];
                                            if (reducDesable) {
                                                reducDesable.IsDisabled = false;
                                                $scope.mdrider[reducDesable.PlanId + ',' + reducDesable.RiderId] = false;
                                            }

                                        }
                                        if (riderdata.RiderId == 1 && !riderdata.IsInculded && riderdata.InsurerId == globals.HealthInsurerId.Religare && riderdata.PlanId == $scope.Quotes_Data[i].PlanId) {

                                            var reducDesable = $filter('filter')($scope.Quotes_Data[i].AvailableRiders, function (d) {
                                                return d.InsurerId == 46 && d.PlanId == riderdata.PlanId && d.RiderId == 15
                                            })[0];
                                            if (reducDesable) {
                                                reducDesable.IsDisabled = true;
                                                $scope.mdrider[reducDesable.PlanId + ',' + reducDesable.RiderId] = false;
                                            }

                                        }
                                    });
                                }
                            }
                        }
                    }
                    if ($scope.quotes_userdata.NumberOfAdults == undefined || $scope.quotes_userdata.NumberOfAdults < 0
                        || $scope.quotes_userdata.NumberOfChildren == undefined || $scope.quotes_userdata.NumberOfChildren < 0
                        || (($scope.quotes_userdata.Gender == undefined || $scope.quotes_userdata.Gender == "") && $scope.quotes_userdata.NumberOfAdults == 1 && $scope.quotes_userdata.NumberOfChildren == 0)
                        || (($scope.quotes_userdata.DOB == undefined || $scope.quotes_userdata.DOB == "") && $scope.askDOB != true)
                        || $scope.quotes_userdata.CityId == undefined || $scope.quotes_userdata.CityId == "") {

                        $scope.editsearch(1);
                        $scope.editcross = false;
                    }
                    if ($scope.HealthRefineChips.length > 0) {
                        var promise_request = FeatureService.GetHealthWeightage($scope);
                        promise_request.then(function (pl) {
                            $scope.HealthPlanWeightageValue = angular.fromJson(pl.data);
                            if (result.data.Errors.length <= 0) {
                                $scope = HealthFactory.RefineByDisease($scope);
                                HealthleftpanelDissablefn();
                                $scope.showloader = false;
                                $scope.noshowloader = true;
                                if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
                                    $scope.policyTermYearFn();
                                }
                            }
                        });
                    }
                    else {
                        HealthleftpanelDissablefn();
                        $scope.showloader = false;
                        $scope.noshowloader = true;
                        if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
                            $scope.policyTermYearFn();
                        }
                    }

                    //health quotes rehit online
                    $timeout(function () {
                        var healthQuotes = [];
                        $scope.quotesrequest.Requests[0].IsOffline = false;
                        $scope.quotesapireq1 = QuoteService.Quotes_Service($scope.quotesrequest, $scope);
                        return $scope.quotesapireq1.then(function (resultnew) {
                            resultnew.data = angular.fromJson(resultnew.data);
                            if (resultnew.data.Quotes) {
                                for (var q = 0; q < resultnew.data.Quotes.length; q++) {
                                    $scope.Quotes_Data.push(resultnew.data.Quotes[q]);
                                    healthQuotes.push(resultnew.data.Quotes[q]);
                                }
                                //$scope.Quotes_Data.push(healthQuotes);
                                $scope.healthQuotesReliance(resultnew);
                            }
                        });

                    }, 100);
                }
                else if ($scope.product == "Term") {
                    $scope.ShowleftpanelAddon = false;
                    termquotesdetails(result);
                }
                else if ($scope.product == "Group") {
                    if (result.data.Errors.length == 0) {
                        $scope.noshowloader = true;
                        $scope.showloader = false;
                        $scope.orderByField = 'Rank';
                        $scope.Filters = result.data.Filters;
                        $scope.Quotes_Data = result.data.Quotes;
                        $scope.Quotes_Data_Plan = result.data.Quotes;
                        $scope.usergrpAge1 = $scope.quotesrequest.Requests[0].Age;
                        $scope.GroupSumassured1 = parseInt($scope.quotesrequest.Requests[0].SumAssured);

                        for (var i = 0; i < $scope.Filters.length; i++) {
                            if ($scope.Filters[i].Name == "Age") {
                                $scope.AgeMin = $scope.Filters[i].Min;
                                $scope.AgeMax = $scope.Filters[i].Max;
                            }
                            else {
                                $scope.SumAssuredMaster = [];
                                for (var j = 0; j < $scope.Filters[i].List.length; j++) {

                                    $scope.SumAssuredMaster.push($scope.Filters[i].List[j]);

                                }

                            }
                        }
                        for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                            $scope.Quotes_Data[i].ids = i;
                        }

                        $scope = DataFactory.GetTotalPlan($scope);

                    }
                    else {
                        $scope.ToastText = result.data.Errors[0].Error;
                        $scope.showSimpleToast();
                    }



                }
                else if ($scope.product == "Critical") {
                    $scope.noshowloader = true;
                    $scope.orderByField = 'Rank';
                    $scope.sortkey = 'Rank';
                    $scope.showloader = false;
                    var critcolorarray = ['zrclass', 'twclass', 'frclass', 'siclass', 'etclass', 'huclass'];
                    $scope.Quotes_Data = result.data.Quotes;
                    if ($scope.Quotes_Data != undefined) {
                        for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                            $scope.Quotes_Data[i].ids = i;
                            $scope.Quotes_Data[i].compareshow = false;
                            $scope.Quotes_Data[i].heartbarclass = critcolorarray[$scope.Quotes_Data[i].Heart];
                            $scope.Quotes_Data[i].cancerbarclass = critcolorarray[$scope.Quotes_Data[i].Cancer];
                            $scope.Quotes_Data[i].clbarclass = critcolorarray[$scope.Quotes_Data[i].CriticalIllness];

                        }
                    }
                    $scope.Quotes_Data_Plan = result.data.Quotes;
                    DataFactory.GetTotalPlan($scope);

                    for (var i = 0; i < $scope.HealthRefineChips.length; i++) {
                        var item = { DiseaseID: $scope.HealthRefineChips[i].id, DiseaseName: $scope.HealthRefineChips[i].value };
                        $scope.HealthRefineChips.forEach(function (data) {
                            $scope.mdpaymentmode[item.DiseaseID] = true;
                            $scope.criticalfeature[item.DiseaseID] = true;
                        });
                        $scope = CriticalFactory.FiltersByFeatures($scope, item);
                    }
                }
                else if ($scope.product == "Travel") {
                    $scope.orderByField = "Rank";
                    $scope.noshowloader = true;
                    $scope.showloader = false;
                    $scope.Quotes_Data = result.data.Quotes;
                    if ($scope.Quotes_Data != undefined) {
                        for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                            $scope.Quotes_Data[i].ids = i;
                            $scope.Quotes_Data[i].compareshow = false;
                        }
                    }
                    $scope.Quotes_Data_Plan = result.data.Quotes;
                    DataFactory.GetTotalPlan($scope);

                }
                else if ($scope.product == "Investment") {

                    // $scope.nontermfeature = [];
                    $scope.noshowloader = true;
                    $scope.showloader = false;
                    Investmentquotes = result.data.Quotes;
                    if ($scope.quotesrequest.DefaultInsurerId > 0) {
                        $scope.Quotes_Data = $filter('filter')(result.data.Quotes, function (d) { return d.InsurerId == $scope.quotesrequest.DefaultInsurerId });
                    }
                    else {
                        $scope.Quotes_Data = result.data.Quotes;
                    }
                    Investmentquotesdetail();
                    $timeout(function () {

                        $scope.quotesrequest.Requests[0].IsOffline = false;
                        $scope.quotesapireq = QuoteService.Quotes_Service($scope.quotesrequest, $scope);
                        return $scope.quotesapireq.then(function (resultnew) {
                            resultnew.data = angular.fromJson(resultnew.data);
                            for (var q = 0; q < resultnew.data.Quotes.length; q++) {
                                Investmentquotes.push(resultnew.data.Quotes[q]);
                            }
                            $scope.Quotes_Data = Investmentquotes;
                            Investmentquotesdetail();
                        });

                    }, 100);
                }
                else if ($scope.product == "Pension") {
                    // $scope.orderByField = "-HistoricalMaturityBenefit";
                    // $scope.sortkey = '-HistoricalMaturityBenefit';
                    $scope.noshowloader = true;
                    $scope.showloader = false;
                    $scope.Quotes_Data = result.data.Quotes;
                    var maxpol = 0;
                    var polarray = [];
                    var sortarray = [];
                    $scope.chargeArray = [];
                    $scope.ulipplan = false;
                    $scope.guaranteedplan = false;
                    if ($scope.Quotes_Data != undefined) {
                        for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                            $scope.Quotes_Data[i].ids = i;
                            $scope.Quotes_Data[i].compareshow = false;
                            if (polarray.indexOf($scope.Quotes_Data[i].PremiumPayingTerm) == -1) {
                                polarray.push($scope.Quotes_Data[i].PremiumPayingTerm);
                            }
                            if ($scope.Quotes_Data[i].PremiumPayingTerm > maxpol) {
                                maxpol = $scope.Quotes_Data[i].PremiumPayingTerm;
                            }
                            if ($scope.Quotes_Data[i].PlanBenefits != undefined) {
                                var x = $scope.Quotes_Data[i].PlanBenefits.split("</br>");

                            }
                            var jso = {
                                Insurer: $scope.Quotes_Data[i].InsurerName, InsurerLogo: $scope.Quotes_Data[i].InsurerLogo, Planname: $scope.Quotes_Data[i].Bundles[0].Name, PremiumAllocationCharge: $scope.Quotes_Data[i].PremiumAllocationCharge,
                                PolicyAdministrationCharge: $scope.Quotes_Data[i].PolicyAdministrationCharge, FundManagementCharge: $scope.Quotes_Data[i].FundManagementCharge,
                                BenefitTopUp: $scope.Quotes_Data[i].BenefitTopUp, MortalityCharge: $scope.Quotes_Data[i].MortalityCharge,
                                BenefitLoyaltyAdditions: $scope.Quotes_Data[i].BenefitLoyaltyAdditions, SwitchingCharge: $scope.Quotes_Data[i].SwitchingCharge,
                                BenefitInvestmentStrategies: $scope.Quotes_Data[i].BenefitInvestmentStrategies, PremiumRedirectioncharges: $scope.Quotes_Data[i].PremiumRedirectioncharges, Isulip: $scope.Quotes_Data[i].IsUlip
                            };
                            $scope.chargeArray.push(jso);
                            if ($scope.Quotes_Data[i].IsUlip == true) {
                                $scope.ulipplan = true;
                            }
                            if ($scope.Quotes_Data[i].IsUlip == false) {
                                $scope.guaranteedplan = true;
                            }
                            $scope.Quotes_Data[i].PlanBenefitstext = x;
                        }
                        polarray.sort(function (a, b) { return b - a });


                        for (var j = 0; j < polarray.length; j++) {
                            var sortarray1 = [];
                            for (var z = 0; z < $scope.Quotes_Data.length; z++) {

                                if ($scope.Quotes_Data[z].PremiumPayingTerm == polarray[j]) {
                                    sortarray1.push($scope.Quotes_Data[z]);
                                }
                            }
                            sortarray1.sort(function (a, b) {
                                return parseFloat(a.HistoricalMaturityBenefit) - parseFloat(b.HistoricalMaturityBenefit);
                            });
                            for (var k = sortarray1.length - 1; k >= 0; k--) {
                                sortarray.push(sortarray1[k]);
                            }

                        }
                        $scope.InvestmentRefineChips = [];
                        for (var i = 0; i < $scope.nonTermRiderDetails.length; i++) {
                            if ($scope.nontermfeature[$scope.nonTermRiderDetails[i].Code] == true) {
                                $scope.InvestmentRefineChips.push(1);
                            }
                        }
                        $scope.Quotes_Data = sortarray;

                        for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                            $scope.Quotes_Data[i].EPRank = i;

                        }
                    }

                    $scope.Quotes_Data_Plan = result.data.Quotes;
                    //if ($scope.ulipplan == false) {
                    //    $scope.nonTermTab(2);
                    //    $scope.plantypemodel = 1;
                    //}
                    var income = $scope.quotes_userdata.Requests[0].Amount.toString().split(",");
                    $scope.txtActualIncomeInv = income[0];
                    $scope.orderByField = "Rank";
                    $scope.sortkey = "Rank";
                    $scope.nontermgetValue = CommonFactory.nontermriskLevel($scope);
                    DataFactory.GetTotalPlan($scope);
                    for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                        if ($scope.Quotes_Data[i].InsurerId == 19 && $scope.userMobileNumber != undefined && $scope.userMobileNumber != null && $scope.userMobileNumber != "") {
                            var mbl = angular.copy($scope.userMobileNumber);
                            var mblnum = mbl.toString();
                            if (mblnum.length == 10) {
                                $scope.iciciassociatenum = $scope.DOB.split("-")[2] + mblnum[5] + mblnum[6] + mblnum[7] + mblnum[8] + mblnum[9];

                               // icicicookiefn();
                            }
                        }
                    }

                }
                else if ($scope.product == "Child") {

                    $scope.orderByField = "Rank";
                    $scope.sortkey = 'Rank';
                    $scope.noshowloader = true;
                    $scope.showloader = false;
                    $scope.Quotes_Data = result.data.Quotes;
                    var maxpol = 0;
                    var polarray = [];
                    var sortarray = [];
                    $scope.chargeArray = [];
                    $scope.ulipplan = false;
                    $scope.guaranteedplan = false;

                    if ($scope.Quotes_Data != undefined) {
                        for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                            if ($scope.Quotes_Data[i].IsUlip == true) {
                                $scope.ulipplan = true;
                            }
                            if ($scope.Quotes_Data[i].IsUlip == false) {
                                $scope.guaranteedplan = true;
                            }
                            $scope.Quotes_Data[i].ids = i;
                            $scope.Quotes_Data[i].compareshow = false;
                            if (polarray.indexOf($scope.Quotes_Data[i].PremiumPayingTerm) == -1) {
                                polarray.push($scope.Quotes_Data[i].PremiumPayingTerm);
                            }
                            if ($scope.Quotes_Data[i].PremiumPayingTerm > maxpol) {
                                maxpol = $scope.Quotes_Data[i].PremiumPayingTerm;
                            }
                            if ($scope.Quotes_Data[i].PlanBenefits != undefined && $scope.Quotes_Data[i].PlanBenefits != null) {
                                var x = $scope.Quotes_Data[i].PlanBenefits.split("</br>");
                            }
                            $scope.Quotes_Data[i].PlanBenefitstext = x;
                            var jso = {
                                Insurer: $scope.Quotes_Data[i].InsurerName, InsurerLogo: $scope.Quotes_Data[i].InsurerLogo, Planname: $scope.Quotes_Data[i].Bundles[0].Name, PremiumAllocationCharge: $scope.Quotes_Data[i].PremiumAllocationCharge,
                                PolicyAdministrationCharge: $scope.Quotes_Data[i].PolicyAdministrationCharge, FundManagementCharge: $scope.Quotes_Data[i].FundManagementCharge,
                                BenefitTopUp: $scope.Quotes_Data[i].BenefitTopUp, MortalityCharge: $scope.Quotes_Data[i].MortalityCharge,
                                BenefitLoyaltyAdditions: $scope.Quotes_Data[i].BenefitLoyaltyAdditions, SwitchingCharge: $scope.Quotes_Data[i].SwitchingCharge,
                                BenefitInvestmentStrategies: $scope.Quotes_Data[i].BenefitInvestmentStrategies, PremiumRedirectioncharges: $scope.Quotes_Data[i].PremiumRedirectioncharges, Isulip: $scope.Quotes_Data[i].IsUlip
                            };
                            $scope.chargeArray.push(jso);
                        }
                        polarray.sort(function (a, b) { return b - a });


                        for (var j = 0; j < polarray.length; j++) {
                            var sortarray1 = [];
                            for (var z = 0; z < $scope.Quotes_Data.length; z++) {

                                if ($scope.Quotes_Data[z].PremiumPayingTerm == polarray[j]) {
                                    sortarray1.push($scope.Quotes_Data[z]);
                                }
                            }
                            sortarray1.sort(function (a, b) {
                                return parseFloat(a.HistoricalMaturityBenefit) - parseFloat(b.HistoricalMaturityBenefit);
                            });
                            for (var k = sortarray1.length - 1; k >= 0; k--) {
                                sortarray.push(sortarray1[k]);
                            }

                        }
                        $scope.Quotes_Data = sortarray;

                        for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                            $scope.Quotes_Data[i].EPRank = i;

                        }
                    }

                    $scope.Quotes_Data_Plan = angular.copy($scope.Quotes_Data);
                    DataFactory.GetTotalPlan($scope);
                    if ($scope.ulipplan == false) {
                        $scope.nonTermTab(2);
                        $scope.plantypemodel = 1;
                    }
                    else {
                        $scope.Quotes_Data = [];
                        if ($scope.activeMonTab == 1) {
                            for (var q = 0; q < $scope.Quotes_Data_Plan.length; q++) {
                                if ($scope.Quotes_Data_Plan[q].IsUlip) {
                                    $scope.Quotes_Data.push($scope.Quotes_Data_Plan[q]);
                                }
                            }
                        }
                        else {
                            for (var q = 0; q < $scope.Quotes_Data_Plan.length; q++) {
                                if (!$scope.Quotes_Data_Plan[q].IsUlip) {
                                    $scope.Quotes_Data.push($scope.Quotes_Data_Plan[q]);
                                }
                            }
                        }
                    }
                    $scope.orderByField = "Rank";
                    $scope.sortkey = "Rank";
                    var income = $scope.quotes_userdata.Requests[0].Amount.toString().split(",");
                    $scope.txtActualIncomeInv = income[0];
                    $scope.nontermgetValue = CommonFactory.nontermriskLevel($scope);
                    for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                        if ($scope.Quotes_Data[i].InsurerId == 19 && $scope.userMobileNumber != undefined && $scope.userMobileNumber != null && $scope.userMobileNumber != "") {
                            var mbl = angular.copy($scope.userMobileNumber);
                            var mblnum = mbl.toString();
                            if (mblnum.length == 10) {
                                $scope.iciciassociatenum = $scope.DOBs[0].split("-")[2] + mblnum[5] + mblnum[6] + mblnum[7] + mblnum[8] + mblnum[9];

                               // icicicookiefn();
                            }
                        }
                    }
                }

                return;
            });

        }
        $scope.callService = function ($scope) {
            $timeout(function () {
                if ($scope.timeout3 < 5) {
                    $scope.callService($scope);
                    $scope.timeout3 = $scope.timeout3 + 1;
                }


                var sss = CommonService.Exitservice($scope.IGquoteId, true);
                sss.then(function (result) {
                    result.data = angular.fromJson(result.data);
                    sss = result.data;
                }, function (response) {
                    ServiceRespnse(response);
                });

                console.log("himanshu");



            }, 570000);

        }
        $scope.tryRedirect = function () {
            $scope.OopsPopup = false;
            $scope.Initialzedata();
        }
        $scope.healthQuotesReliance = function (result) {
            if (result.data.Errors.length > 0) {
                $scope.ToastText = result.data.Errors[0].Error;
                $scope.showSimpleToast();
                //$scope.Quotes_Data = "";
                //$scope.Quotes_Data_Plan = "";
                $scope.noshowloader = true;
                $scope.showloader = false;
            }
            else {
                //$scope.Quotes_Data = result.data.Quotes;
                //testdata = angular.copy(result.data.Quotes);
                $scope = DataFactory.GetTotalPlan($scope);
                $scope.Quotes_Data_Plan = $scope.Quotes_Data;
                if ($scope.Quotes_Data != undefined) {
                    for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                        if ($scope.Quotes_Data[i].InsurerId == 2) {
                            $scope.Quotes_Data[i].ids = i;
                            $scope.Quotes_Data[i].compareshow = false;
                            $scope.Quotes_Data[i].PremiumForPolicyYear1 = $scope.Quotes_Data[i].Premium;
                            $scope.Quotes_Data[i].featurewidth = "featurebox-full";
                            if ($scope.Quotes_Data[i].PlanId == 780) {
                                $scope.Quotes_Data[i].SortByFileds = 100000;
                            }
                            else {
                                $scope.Quotes_Data[i].SortByFileds = $scope.Quotes_Data[i].FinalPremium;
                            }

                            if ($scope.Quotes_Data[i].AvailableRiders != undefined && $scope.Quotes_Data[i].AvailableRiders != "") {
                                if ($scope.Quotes_Data[i].AvailableRiders.length > 0) {
                                    $scope.Quotes_Data[i].featurewidth = "featurebox-half";
                                }
                            }
                            $scope.Quotes_Data[i].Riderlistforbuy = [];
                            if ($rootScope.healthdata.Requests[0].IsCovid) {
                                $scope.Quotes_Data[i].TempPremium1 = angular.copy($scope.Quotes_Data[i].FinalPremium);
                            }
                            else {
                                $scope.Quotes_Data[i].TempPremium1 = angular.copy($scope.Quotes_Data[i].FinalPremium1);
                            }
                            $scope.Quotes_Data[i].TempPremium2 = angular.copy($scope.Quotes_Data[i].FinalPremium2);
                            $scope.Quotes_Data[i].TempDiscountedPremium2 = angular.copy($scope.Quotes_Data[i].DiscountedFinalPremium2);
                            $scope.Quotes_Data[i].TempFinalPremium3 = angular.copy($scope.Quotes_Data[i].FinalPremium3);
                            $scope.Quotes_Data[i].TempDiscountedPremium3 = angular.copy($scope.Quotes_Data[i].DiscountedFinalPremium3);
                            if ($scope.Quotes_Data[i].AvailableRiders != undefined && $scope.Quotes_Data[i].AvailableRiders != "") {
                                $scope.Quotes_Data[i].AvailableRiders.forEach(function (riderdata) {
                                    if (riderdata.IsInculded || $scope.mdrider[$scope.Quotes_Data[i].PlanId + ',' + riderdata.RiderId] == true) {
                                        $scope.HealthAddonSelection(riderdata, $scope.Quotes_Data[i], true);
                                    }

                                });
                            }
                        }
                    }
                }
            }

            //if ($scope.HealthRefineChips.length > 0) {
            //    var promise_request = FeatureService.GetHealthWeightage($scope);
            //    promise_request.then(function (pl) {
            //        $scope.HealthPlanWeightageValue = angular.fromJson(pl.data);
            //        if (result.data.Errors.length <= 0) {
            //            $scope = HealthFactory.RefineByDisease($scope);
            //            HealthleftpanelDissablefn();
            //            $scope.showloader = false;
            //            $scope.noshowloader = true;
            //            if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
            //                $scope.policyTermYearFn();
            //            }
            //        }
            //    });
            //}
            //else {
            //    HealthleftpanelDissablefn();
            //    $scope.showloader = false;
            //    $scope.noshowloader = true;
            //    if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
            //        $scope.policyTermYearFn();
            //    }
            //}
        }
        //-----------------------------Non Term-------------------------------------------------------
        $scope.AdditionalBenifitSelect = function (Flag, PlanId, RiderDetails, Object, Amount, SumInsured, model) {

            var AdditionalBenifit = NonTermFactory.AdditionalBenifit(Flag, PlanId, RiderDetails, Object, Amount, SumInsured, model);
        }

        $scope.AddPremiuminScope = function (item, sumAssured) {
            item.PremiumValue = sumAssured;
        }
        //----------------------------Sort Value---------------------------
        $scope.SortValue = function () {
            if ($scope.sortkey == "-HistoricalMaturityBenefit") {
                $scope.selecteGrowth = "1";
            }
            else if ($scope.sortkey == "-MaturityBenefit") {
                $scope.selecteGrowth = "2";
            }

            $scope.hidedefaultlabel = false;
            $scope.orderByField = $scope.sortkey;
            $scope.reverseSort = !$scope.reverseSort;
            var a = $scope.gaProduct + " Sorting Changed " + $scope.sortkey;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


        }

        function termquotesdetails(result) {
            $rootScope.scrollhide = '';
            if (result.data.Errors.length == 0) {
                $scope.noshowloader = true;
                $scope.showloader = false;
                $scope.orderByField = 'Rank';
                $scope.Quotes_Data = result.data.Quotes;
                $scope.Quotes_Data_Plan = result.data.Quotes;
                if ($scope.Quotes_Data != undefined) {

                    for (var i = 0; i < $scope.Quotes_Data.length; i++) {

                        $scope.Quotes_Data[i].IncludedRiderlist = [];

                        if ($scope.Quotes_Data[i].InsurerId == 20) {
                            $scope.Quotes_Data[i].marclass = "maxmargtop";
                        }
                        var count = $scope.Quotes_Data[i].AvailableRiders.length;
                        if ($scope.Quotes_Data[i].IncreasingSumAssured == 3 && $scope.Quotes_Data[i].PremiumPayingTerm > 5) {
                            count++;
                        }
                        $scope.Quotes_Data[i].RiderlengthForMobile = count + $scope.Quotes_Data[i].ToolTipWaiveOff.length;
                        $scope.Quotes_Data[i].ids = i;
                        $scope.Quotes_Data[i].OriginalannualPremium = $scope.Quotes_Data[i].AnnualPremium;
                        $scope.Quotes_Data[i].OriginalmonthlyPremium = $scope.Quotes_Data[i].MonthlyPremium;
                        $scope.Quotes_Data[i].compareshow = false;

                        if ($scope.Quotes_Data[i].PlanId == 1597) {
                            $scope.hdfcMonthlyPremium = $scope.Quotes_Data[i].OriginalmonthlyPremium;
                            $scope.hdfcOriginalPremium = $scope.Quotes_Data[i].OriginalannualPremium;
                            $scope.hdfcMaturity = $scope.Quotes_Data[i].MaturityBenefit;
                            $scope.dummyPlanId = 1597;
                        }
                        if ($scope.Quotes_Data[i].MonthlyPremium > 0) {
                            $scope.payemodepremium = "month";
                            $scope.showMonthlyPremium = false;
                            $scope.showAnnualPremium = true;
                            $scope.term1monthlypaymodeCss = "activeclass";
                            $scope.term1yearlypaymodeCss = "";
                            $scope.Quotes_Data[i].Premium = $scope.Quotes_Data[i].MonthlyPremium;
                            $scope.Quotes_Data[i].OriginalPremium = $scope.Quotes_Data[i].MonthlyPremium;
                            $scope.Quotes_Data[i].PayingMode = "Monthly";
                        }
                        if ($scope.Quotes_Data[i].AvailableRiders.length > 0) {
                            for (var q = 0; q < $scope.Quotes_Data[i].AvailableRiders.length; q++) {
                                if ($scope.Quotes_Data[i].MonthlyPremium > 0) {
                                    $scope.Quotes_Data[i].AvailableRiders[q].RiderPremium = Math.round($scope.Quotes_Data[i].AvailableRiders[q].RiderMonthlyPremium);
                                }
                                if ($scope.Quotes_Data[i].AvailableRiders[q].BundleId > 0 && ($scope.Quotes_Data[i].AvailableRiders[q].IsDefault == true)) {
                                    $scope.editmdrider[$scope.Quotes_Data[i].PlanId + ',' + $scope.Quotes_Data[i].AvailableRiders[q].BundleId] = true;
                                    $scope.mdrider[$scope.Quotes_Data[i].PlanId + ',' + $scope.Quotes_Data[i].AvailableRiders[q].BundleId] = $scope.Quotes_Data[i].AvailableRiders[q].BundleId;
                                    $scope.Quotes_Data[i].Premium = $scope.Quotes_Data[i].OriginalPremium + $scope.Quotes_Data[i].AvailableRiders[q].RiderPremium;
                                    $scope.Quotes_Data[i].AnnualPremium = $scope.Quotes_Data[i].OriginalannualPremium + $scope.Quotes_Data[i].AvailableRiders[q].AnnualPremium;
                                    $scope.Quotes_Data[i].MonthlyPremium = $scope.Quotes_Data[i].OriginalmonthlyPremium + $scope.Quotes_Data[i].AvailableRiders[q].RiderMonthlyPremium;
                                    $scope.item1 = $scope.Quotes_Data[i];
                                    $scope.userselectionrider.push($scope.Quotes_Data[i].AvailableRiders[q]);
                                }
                                else {
                                    $scope.editmdrider[$scope.Quotes_Data[i].PlanId + ',' + $scope.Quotes_Data[i].AvailableRiders[q].BundleId] = false;
                                    $scope.mdrider[$scope.Quotes_Data[i].PlanId + ',' + $scope.Quotes_Data[i].AvailableRiders[q].BundleId] = undefined;
                                }
                                if ($scope.Quotes_Data[i].AvailableRiders[q].IsIncluded) {
                                    var mrd_Premium = 0;
                                    var yrd_Premium = 0;
                                    if ($scope.Quotes_Data[i].AvailableRiders[q].RiderMonthlyPremium != undefined && $scope.Quotes_Data[i].AvailableRiders[q].RiderMonthlyPremium != null && $scope.Quotes_Data[i].AvailableRiders[q].RiderMonthlyPremium != "") {
                                        mrd_Premium = $scope.Quotes_Data[i].AvailableRiders[q].RiderMonthlyPremium;
                                    }
                                    if ($scope.Quotes_Data[i].AvailableRiders[q].RiderPremium != undefined && $scope.Quotes_Data[i].AvailableRiders[q].RiderPremium != null && $scope.Quotes_Data[i].AvailableRiders[q].RiderPremium != "") {
                                        mrd_Premium = $scope.Quotes_Data[i].AvailableRiders[q].RiderPremium;
                                    }
                                    $scope.Quotes_Data[i].Premium = $scope.Quotes_Data[i].Premium + mrd_Premium;
                                    $scope.Quotes_Data[i].AnnualPremium = $scope.Quotes_Data[i].OriginalannualPremium + $scope.Quotes_Data[i].AvailableRiders[q].AnnualPremium;
                                    $scope.Quotes_Data[i].MonthlyPremium = $scope.Quotes_Data[i].MonthlyPremium + mrd_Premium;
                                    $scope.Quotes_Data[i].OriginalPremium = $scope.Quotes_Data[i].Premium;
                                    $scope.Quotes_Data[i].OriginalannualPremium = $scope.Quotes_Data[i].AnnualPremium;
                                    $scope.Quotes_Data[i].OriginalmonthlyPremium = $scope.Quotes_Data[i].MonthlyPremium;
                                    $scope.Quotes_Data[i].IncludedRiderlist.push({ "RiderName": $scope.Quotes_Data[i].AvailableRiders[q].RiderName + ' (Included)' });

                                }
                                if ($scope.mdrider[$scope.Quotes_Data[i].PlanId + ',' + $scope.Quotes_Data[i].AvailableRiders[q].RiderId] == true) {
                                    $scope.ridercalulationfrterm($scope.Quotes_Data[i].AvailableRiders[q], 1, $scope.Quotes_Data[i], 'getquote');
                                    $scope.Quotes_Data[i] = $scope.PlanItem;
                                    $scope.editmdrider[$scope.Quotes_Data[i].PlanId + ',' + $scope.Quotes_Data[i].AvailableRiders[q].RiderId] = true;
                                }
                                if ($scope.Quotes_Data[i].PlanId == 890 && $scope.Quotes_Data[i].AvailableRiders[q].RiderId == 1) {
                                    var data = $scope.TermIncomeOptionPlan($scope.Quotes_Data[i].AvailableRiders[q], $scope.Quotes_Data[i], true, q, i);
                                    $scope.Quotes_Data[i] = data;
                                }
                                if ($scope.Quotes_Data[i].InsurerId == 24) {
                                    if ($scope.Quotes_Data[i].AvailableRiders[q].MaxSumAssured == 0) {
                                        $scope.Quotes_Data[i].AvailableRiders.splice(q, 1);
                                        $scope.Quotes_Data[i].RiderlengthForMobile--;
                                    }
                                }
                            }
                        }
                        if ($scope.Quotes_Data[i].IsJointLife && $rootScope.jointlifemodel[$scope.Quotes_Data[i].PlanId] == true) {
                            //$scope.Addjointlifeplan(i);
                            $rootScope.jointlifemodel[$scope.Quotes_Data[i].PlanId] == false;
                        }
                        if ($scope.Quotes_Data[i].InsurerId == 19 && ($scope.quotesrequest.Browser.indexOf('Safari') == -1) && $scope.userMobileNumber != undefined && $scope.userMobileNumber != null && $scope.userMobileNumber != "") {
                            var mbl = angular.copy($scope.userMobileNumber);
                            var mblnum = mbl.toString();
                            if (mblnum.length == 10) {
                                if ($scope.DateOfBirth != undefined) {
                                    $scope.iciciassociatenum = $scope.DateOfBirth.split("-")[2] + mblnum[5] + mblnum[6] + mblnum[7] + mblnum[8] + mblnum[9];
                                    //icicicookiefn();
                                }
                            }
                        }

                    }
                }
                //$scope = DataFactory.GetTotalPlan($scope);
                $scope.mainriderselection = [];
                if ($scope.HealthRefineChips.length > 0) {
                    if ($scope.termrider == undefined || $scope.termrider.length == 0) {
                        var riderdata = FeatureService.GetRiderData($scope.AgeInMonths);
                        riderdata.then(function (getRiderData) {
                            $scope.termrider = angular.fromJson(getRiderData.data);
                            termriderselection();
                        });
                    }
                    else {
                        termriderselection();
                    }
                }
                // termselectedchip();

                quotefilteronplantype(plantype, 'getquote');
                $scope.AddonAvailableFn();

                $rootScope.scrollhide = '';
                if ($scope.device == "Mobile" && $rootScope.loadcardtemplate.indexOf('TermjointlifeMobile') != -1) {
                    $scope.Quotes_Data = [];
                    $scope.Quotes_Data.push(jointlifeparentplan);
                }
                if (((($scope.quotes_userdata.UserInputIncome == undefined || $scope.quotes_userdata.UserInputIncome == ""))
                    || $scope.quotes_userdata.IsTobacco == undefined
                    || $scope.quotes_userdata.Gender == undefined || $scope.quotes_userdata.Gender == ""
                    || (($scope.quotes_userdata.DateOfBirth == undefined || $scope.quotes_userdata.DateOfBirth == "") && $scope.askDOB == true)
                    || $scope.quotes_userdata.CityId == undefined || $scope.quotes_userdata.CityId == "")) {
                    $scope.editsearch(1);
                    $scope.editcross = false;
                }
                else {
                    if (pageload == true && $scope.hidepincodepop != true && ($scope.quotesrequest.Requests[0].Pincode == undefined || $scope.quotesrequest.Requests[0].Pincode == '' || $scope.quotesrequest.Requests[0].Pincode == null)) {
                        $scope.Termplansearchbypincode = false;
                        // $rootScope.scrollhide = 'scollClass';
                        $scope.hidepincodepop = true;
                    }
                }
            }


            else {
                $scope.ToastText = result.data.Errors[0].Error;
                $scope.showSimpleToast();
                $scope.showloader = false;
                $scope.noshowloader = true;
                $scope.Quotes_Data = result.data.Quotes;
                $scope.Quotes_Data_Plan = result.data.Quotes;
            }
        }


        //--------------------------------End------------------------------
        //------------------For Sorting-----------------------------------
        $scope.selecteGrowthChange = function (GrowthValue, id) {

            // var selecteGrowth = NonTermFactory.selecteGrowth($scope, GrowthValue);

            // if ($scope.selecteGrowth == "2") {
            //     $scope.orderByField = '-MaturityBenefit';
            //     $scope.sortkey = '-MaturityBenefit';
            // }
            // else {
            //     $scope.orderByField = '-HistoricalMaturityBenefit';
            //     $scope.sortkey = '-HistoricalMaturityBenefit';
            // }

            if (GrowthValue == 'sort') {
                $scope.selecteGrowth = id;
            }

            if ($scope.selecteGrowth == "2") {
                $scope.quotesrequest.Requests[0].GrowthOption = "8%";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "8% growth", value: $scope.productID });
                $scope.term1yearlypaymodeCss = "activeclass";
                $scope.term1monthlypaymodeCss = "";
            }
            else {
                $scope.quotesrequest.Requests[0].GrowthOption = "Historical";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Historical growth", value: $scope.productID });
                $scope.term1yearlypaymodeCss = "";
                $scope.term1monthlypaymodeCss = "activeclass";
            }

            $scope.Initialzedata();
        }
        //--------------------End---------------------------------------------

        $scope.calculateFundDetail = function (FundValue, Item, Name) {
            $scope.funds;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Fund Value Changed", value: $scope.productID });

            var calculateFund = NonTermFactory.calculateFund($scope, FundValue, Item, Name);
        }

        /////------------------Non Term END--------------------------------------------------
        $scope.refreshSlider = function () {
            console.log('refresh slider call');
            $timeout(function () {
                $scope.$broadcast('rzSliderForceRender');
                console.log('refresh slider call after timeout');
            }, 1000, true);

        }
        $scope.$on("slideEnded", function (event, id) {

            $scope.termsliderLoader = true;
            if ($scope.sliderhit == 0) {
                $timeout.cancel($scope.slidertimeout);
            }
            var id = event.targetScope.slider.options.id;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: id, value: $scope.productID });

            if (id == "PolicyMaturityTerm") {

                $scope.PolicyMaturitytext = $scope.PolicyMaturity.minValue;

            }
            if (id == "PremimumPayingTerm") {

                $scope.PremimumPayingtext = $scope.PremimumPayingTerm.maxValue;

            }
            $scope.sliderhit = 0;
            $scope.slidertimeout = $timeout(function () {


                if (id == "Risk") {

                    $scope.SwitchRider("RiskLevel", null, 1);
                }
                if (id == "pay") {

                    $scope.payTilltext = $scope.payTill;
                    $scope.SwitchRider("PayingDuration", $scope.payTill);
                }

                if (id == "PolicyMaturityTerm") {

                    $scope.SwitchRider("PolicyMaturityTerm", $scope.PolicyMaturity);
                }
                if (id == "PremimumPayingTerm") {

                    $scope.SwitchRider("PremimumPayingTerm", $scope.PremimumPayingTerm);
                }



            }, 2000);


        });
        $scope.Healthsumassuredfn = function (value) {
            if (value != undefined) {
                $scope.SumInsuredForHealth = value;
                var a = 'Sum Assured Filter ' + $scope.gaProduct;
                if ($scope.Quotes_Data != undefined) {
                    if ($scope.Quotes_Data.length > 0) {
                        $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: 2 });
                    }
                }
                if ($rootScope.healthdata.Requests[0].IsCovid)
                    $scope = DataFactory.covidrequestdataNew($scope, $rootScope);
                else
                    $scope = DataFactory.healthrequestdataNew($scope, $rootScope);
                if ($scope.healthfnSAcall != undefined) {
                    $scope.Initialzedata();
                }
                else {
                    $scope.healthfnSAcall = 0;
                }
            }
        }
        $scope.selectCovidPolicyTerm = function (value) {
            if (value != undefined && $scope.Quotes_Data != undefined) {
                $rootScope.popplantypemobile = false;
                $scope.policyPeriod = value;
                $scope = DataFactory.covidrequestdataNew($scope, $rootScope);
                $scope.Initialzedata();
            }
        }
        $scope.Healthdeductiblefn = function (item) {
            if (item != undefined) {
                $scope.deductvalue = item;
                $rootScope.healthdata.Requests[0].DeductibleAmount = $scope.deductvalue;

                var a = 'Deductible Filter ' + $scope.gaProduct;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: 2 });

                $scope.quotesrequest.Requests[0].IsOffline = true;
                $scope.quotesrequest.Requests[0].DeductibleAmount = $scope.HealthExistCover.value;
                $scope.policyTermYearValue = "1";
                $scope.Initialzedata();

            }
        }
        $scope.toastmessage = function (bgcolor, textcolor, width, buttomargin, showtime) {
            var toast = new iqwerty.toast.Toast();
            toast.setText($scope.textmessage).stylize({
                background: "#00b8f1",
                color: textcolor,
                width: width,
                'margin-bottom': buttomargin,
                'box-shadow': '0 0 10px rgba(0, 0, 0, .4)'
            }).setDuration(showtime).show();
            $scope.showtoast = true;
            $timeout(function () {
                $scope.showtoast = false;
            }, showtime);
        }
        $scope.filterplanType = function (id) {
            $scope.Compareselection = [];
            $scope.Comparedisplay = false;
            $scope.data = [];
            if ($scope.InvestplanType["1"] == true && $scope.InvestplanType["2"] == true) {
                $scope.MaxRisk = 5;
                $scope.RiskLevel = { minValue: $scope.MinRisk, maxValue: $scope.MaxRisk, options: { id: 'Risk', floor: 1, ceil: 5, step: 1, showTicksValues: true, stepsArray: [{ value: 1, legend: 'Very Low' }, { value: 2, legend: 'Low' }, { value: 3, legend: 'Moderate' }, { value: 4, legend: 'High' }, { value: 5, legend: 'Very High' },] } };

                $scope.textmessage = "Showing All Plan";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "All Plan", value: $scope.productID });

                $scope.toastmessage('#F76209', 'white', '170px', '-42px', 2000);
            }
            else {
                if ($scope.InvestplanType["1"] == true) {
                    $scope.MaxRisk = 1;
                    $scope.RiskLevel = { minValue: $scope.MinRisk, maxValue: $scope.MaxRisk, options: { id: 'Risk', floor: 1, ceil: 5, step: 1, showTicksValues: true, stepsArray: [{ value: 1, legend: 'Very Low' }, { value: 2, legend: 'Low' }, { value: 3, legend: 'Moderate' }, { value: 4, legend: 'High' }, { value: 5, legend: 'Very High' },] } };
                    $scope.textmessage = "Showing Guaranteed Plan";
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Guaranteed Plan", value: $scope.productID });

                    $scope.toastmessage('#F76209', 'white', '170px', '-42px', 2000);
                }
                else if ($scope.InvestplanType["2"] == true) {
                    $scope.MaxRisk = 5;
                    $scope.RiskLevel = { minValue: $scope.MinRisk, maxValue: $scope.MaxRisk, options: { id: 'Risk', floor: 1, ceil: 5, step: 1, showTicksValues: true, stepsArray: [{ value: 1, legend: 'Very Low' }, { value: 2, legend: 'Low' }, { value: 3, legend: 'Moderate' }, { value: 4, legend: 'High' }, { value: 5, legend: 'Very High' },] } };
                    if ($scope.product == 'Investment') {
                        $scope.PolicyMaturitytext = 10;
                        $scope.MaxMaturityTerm = 10;
                        $scope.PolicyMaturity = { minValue: $scope.MaxMaturityTerm, options: { id: 'PolicyMaturityTerm', floor: 10, ceil: 40, showTicksValues: 5, showSelectionBar: true } };
                        $scope.PremimumPayingtext = 10;
                        $scope.PaymentDuration = 10;
                        $scope.PremimumPayingTerm = { maxValue: $scope.PaymentDuration, options: { id: 'PremimumPayingTerm', floor: 10, ceil: 40, showTicksValues: 5, showSelectionBar: true } };
                    }
                    $scope.textmessage = "Showing ULIP Plan";
                    $scope.toastmessage('#F76209', 'white', '170px', '-42px', 2000);
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "ULIP Plan", value: $scope.productID });
                }
                else {
                    $scope.MaxRisk = 5;
                    $scope.RiskLevel = { minValue: $scope.MinRisk, maxValue: $scope.MaxRisk, options: { id: 'Risk', floor: 1, ceil: 5, step: 1, showTicksValues: true, stepsArray: [{ value: 1, legend: 'Very Low' }, { value: 2, legend: 'Low' }, { value: 3, legend: 'Moderate' }, { value: 4, legend: 'High' }, { value: 5, legend: 'Very High' },] } };
                    $scope.textmessage = "Showing All Plan";
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "All Plan", value: $scope.productID });
                    $scope.toastmessage('#F76209', 'white', '170px', '-42px', 2000);
                }
            }
            $scope.SwitchRider('RiskLevel');
        }
        $scope.SwitchRider = function (id, value, flg) {

            if (flg == 1) {
                if ($scope.RiskLevel.maxValue > 1) {
                    if ($scope.InvestplanType["2"] != true) {
                        $scope.InvestplanType["1"] = false;
                    }

                }
                if ($scope.RiskLevel.minValue > 1) {
                    $scope.InvestplanType["1"] = false;
                }


            }

            if ($scope.InvestplanType != undefined) {
                if ($scope.InvestplanType["1"] == true) {
                    $scope.RiskLevel.minValue = 1;
                }

            }

            if ($scope.Quotes_Data != null && $scope.Quotes_Data != undefined) {
                $scope.Compareselection = [];
                $scope.Comparedisplay = false;
                $scope.data = [];
                // if(value == true)
                // {
                //     $scope.InvestmentRefineChips.push(id);
                // }
                // else{
                //     $scope.InvestmentRefineChips.splice(0,1);
                // }
                var nontermSwitch = NonTermFactory.nontermSwitch($scope, id, value);
                $scope.Initialzedata();
            }

        }
        $scope.MaturityPolicyText = function (id) {
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: id, value: $scope.productID });
            $scope.mdrider = [];
            $scope.editmdrider = [];
            if ($scope.quotesrequest.Requests[0].PayingMode != undefined) {
                if ($scope.quotesrequest.Requests[0].PayingMode.toLowerCase() == 'm' || $scope.selectedincome == "M") {
                    $scope.quotesrequest.Requests[0].IsMonthly = true;
                }
                else if ($scope.selectedincome == "Y") {
                    $scope.quotesrequest.Requests[0].IsMonthly = false;
                }
            }
            if (id == "PolicyMaturityTerm") {
                if ($scope.PolicyMaturitytext != undefined && !isNaN($scope.PolicyMaturitytext) && $scope.PolicyMaturitytext != null) {
                    $scope.pptlist = [];
                    $scope.PolicyMaturity.minValue = $scope.PolicyMaturitytext;
                    for (var i = 5; i <= $scope.PolicyMaturitytext; i++) {
                        $scope.pptlist.push({ value: i, Name: i + " years" });
                    }
                    if ($scope.PolicyMaturitytext < $scope.PremimumPayingtext) {
                        $scope.PremimumPayingtext = $scope.PolicyMaturitytext;
                        $scope.PaymentDuration = parseInt($scope.PremimumPayingtext);
                        $scope.quotesrequest.Requests[0].PaymentDuration = $scope.PaymentDuration;
                    }
                    $scope.MaturityTerm = parseInt($scope.PolicyMaturitytext);
                    $scope.quotesrequest.Requests[0].MaturityTerm = $scope.MaturityTerm;
                    $scope.quotesrequest.Requests[0].MaxMaturityTerm = $scope.MaturityTerm;

                    $scope.Initialzedata();
                }
            }
            else if (id == "PremimumPayingTerm") {
                if ($scope.PremimumPayingtext != undefined && !isNaN($scope.PremimumPayingtext) && $scope.PremimumPayingtext != null) {
                    $scope.PaymentDuration = parseInt($scope.PremimumPayingtext);
                    $scope.quotesrequest.Requests[0].PaymentDuration = $scope.PaymentDuration;
                    $scope.Initialzedata();
                }
            }
            else if (id == "PayingDuration") {
                if ($scope.payTilltext != undefined && !isNaN($scope.payTilltext) && $scope.payTilltext != null) {
                    $scope.payTill = $scope.payTilltext;
                    $scope.PaymentDuration = parseInt($scope.payTill - $scope.quotes_userdata.userAge);
                    $scope.quotesrequest.Requests[0].PaymentDuration = $scope.PaymentDuration;
                    $scope.Initialzedata();
                }
            }
            else if (id == "RetirementAGE") {
                if ($scope.TermPeriod1 != undefined && !isNaN($scope.TermPeriod1) && $scope.TermPeriod1 != null) {
                    $scope.pensionPayTill = [];
                    for (j = $scope.ageinyr; j <= $scope.TermPeriod1; j++) {
                        $scope.pensionPayTill.push({ Name: j + ' Yrs', value: j })
                    }
                    if ($scope.TermPeriod1 < $scope.payTilltext) {
                        $scope.payTilltext = $scope.TermPeriod1;
                        $scope.payTill = $scope.payTilltext;
                        $scope.PaymentDuration = parseInt($scope.payTill - $scope.quotes_userdata.userAge);
                        $scope.quotesrequest.Requests[0].PaymentDuration = $scope.PaymentDuration;
                    }
                    $scope.MaturityTerm = parseInt($scope.TermPeriod1 - $scope.quotes_userdata.userAge);
                    $scope.quotesrequest.Requests[0].MaturityTerm = $scope.MaturityTerm;
                    $scope.Initialzedata();
                }
            }
        }

        $scope.commonservicepromise = function (url, request) {
            var promise_request = QuoteService.Promise_Service(url, request);

            return promise_request;
        }

        $scope.featureservicepromise = function (url, request) {
            var promise_request = FeatureService.Promise_Service(url, request);
            return promise_request;
        }

        function filterResultMotor() {
            var len = 0;
            if ($scope.selectedfeature.length > 0) {
                var arr = [];
                $scope.policyterm3show = false;
                $scope.policyterm5show = false;
                $scope.policyterm2show = false;
                $scope.policyterm1show = false;
                if ($scope.quotesdata != undefined) {
                    for (var i = 0; i < $scope.quotesdata.length; i++) {
                        var arrflag = 0;
                        var count = 0;
                        for (var j = 0; j < $scope.selectedfeature.length; j++) {
                            if ($scope.quotesdata[i].addonavl.length > 0) {
                                for (var k = 0; k < $scope.quotesdata[i].addonavl.length; k++) {
                                    if ($scope.quotesdata[i].addonavl[k].Type == "Mandatory") {
                                        var addonsp = $scope.quotesdata[i].addonavl[k].Name.split("+");
                                        for (c = 0; c < addonsp.length; c++) {
                                            if (addonsp[c].indexOf($scope.selectedfeature[j]) > -1) {
                                                arrflag = arrflag + 1;
                                                $scope.quotesdata[i].addonavl[k].visibility = true;
                                            }
                                        }
                                    }
                                    else {
                                        if ($scope.quotesdata[i].addonavl[k].Name.indexOf($scope.selectedfeature[j]) > -1) {
                                            arrflag = arrflag + 1;
                                            $scope.quotesdata[i].addonavl[k].visibility = true;
                                        }
                                    }

                                }


                            }
                            if ($scope.Quotes_Data[i].availablefeatures.indexOf($scope.selectedfeature[j]) > -1) {
                                count = count + $scope.selectedfeature[j]
                            }

                        }
                        if (arrflag >= $scope.selectedfeature.length) {
                            $scope.quotesdata[i].visibilityshow = true;
                            $scope.quotesdata[i].addonlisttext = "View More";
                            $scope.quotesdata[i].addonlistviewflag = true;
                        }
                        else {
                            $scope.quotesdata[i].visibilityshow = false;
                        }
                        $scope.quotesdata[i].featurecount = count
                        arr.push($scope.quotesdata[i]);
                        if ($scope.quotesdata[i].PolicyTerm == 3 && ($scope.quotesdata[i].visibilityshow == true || $scope.quotesrequest.Requests[0].InsuranceType == "TP")) {
                            $scope.policyterm3show = true;
                        }
                        if ($scope.quotesdata[i].PolicyTerm == 5 && ($scope.quotesdata[i].visibilityshow == true || $scope.quotesrequest.Requests[0].InsuranceType == "TP")) {
                            $scope.policyterm5show = true;
                        }

                        if ($scope.quotesdata[i].PolicyTerm == 2 && ($scope.quotesdata[i].visibilityshow == true || $scope.quotesrequest.Requests[0].InsuranceType == "TP")) {

                            $scope.policyterm2show = true;
                        }

                        if ($scope.quotesdata[i].PolicyTerm == 1 && ($scope.quotesdata[i].visibilityshow == true || $scope.quotesrequest.Requests[0].InsuranceType == "TP")) {

                            $scope.policyterm1show = true;
                        }
                        if ($scope.Quotes_Data[i].visibilityshow != false || $scope.quotesrequest.Requests[0].InsuranceType == "TP") {
                            len = len + 1;
                        }
                    }

                    $scope.Quotes_Data = arr;
                }

            }
            else {
                for (var i = 0; i < $scope.quotesdata.length; i++) {
                    $scope.quotesdata[i].visibilityshow = true;
                    if ($scope.quotesdata[i].PolicyTerm == 3 && ($scope.quotesdata[i].visibilityshow == true || $scope.quotesrequest.Requests[0].InsuranceType == "TP")) {
                        $scope.policyterm3show = true;
                    }
                    if ($scope.quotesdata[i].PolicyTerm == 5 && ($scope.quotesdata[i].visibilityshow == true || $scope.quotesrequest.Requests[0].InsuranceType == "TP")) {
                        $scope.policyterm5show = true;
                    }

                    if ($scope.quotesdata[i].PolicyTerm == 2 && ($scope.quotesdata[i].visibilityshow == true || $scope.quotesrequest.Requests[0].InsuranceType == "TP")) {

                        $scope.policyterm2show = true;
                    }

                    if ($scope.quotesdata[i].PolicyTerm == 1 && ($scope.quotesdata[i].visibilityshow == true || $scope.quotesrequest.Requests[0].InsuranceType == "TP")) {

                        $scope.policyterm1show = true;
                    }
                    if ($scope.Quotes_Data[i].visibilityshow != false || $scope.quotesrequest.Requests[0].InsuranceType == "TP") {
                        len = len + 1;
                    }
                }
                $scope.Quotes_Data = $scope.quotesdata;
            }


            $scope.totalplanlength = len;

            if ($scope.selectedfeature.length > 0) {
                for (var j = 0; j < $scope.selectedfeature.length; j++) {
                    $scope.carleftpanel(5, $scope.selectedfeature[j], true, $scope.selectedfeature[j])
                }
            }
            else {
                $scope.addondisable();
            }
        }


        $scope.closeavfund = function () {
            $rootScope.scrollhide = '';
            $scope.availableFundPop = false;
        }
        $scope.closeulippop = function () {
            $rootScope.scrollhide = '';
            $scope.ulippop = false;
        }
        $scope.Openulippop = function () {
            $scope.NonTermChargesUrl = '../HomePage/Template/NonTermCharges.html';
            $rootScope.scrollhide = 'scollClass';
            $scope.ulippop = true;
            $analytics.eventTrack('Click', { category: $scope.gaProduct, label: "Ulip vs Guaranteed", value: $scope.productID });
        }


        $scope.Carquotesfn = function (resultquotes) {
            if ($scope.quotesdata != undefined && $scope.Quotes_Data != undefined) {
                if ($scope.quotesdata.length > $scope.Quotes_Data.length) {
                    $scope.Quotes_Data = $scope.quotesdata;
                }
            }
            if ($scope.Quotes_Data == undefined) {
                var len = 0
            }
            else {
                var len = $scope.Quotes_Data.length;
            }
            var responsedata = CarFactory.addonlists(resultquotes, len, $scope);
            //$scope.selectedaddon = responsedata[1];

            if ($scope.Quotes_Data != undefined) {
                for (var x = 0; x < responsedata[0].length; x++) {
                    $scope.Quotes_Data.push(responsedata[0][x]);
                }
            }
            else {
                $scope.Quotes_Data = responsedata[0];
            }

            $scope.quotesdatatemp = angular.copy($scope.Quotes_Data);
            $scope.quotesdata = angular.copy($scope.Quotes_Data);
            $scope.quotesdatatemp1 = angular.copy($scope.Quotes_Data);
            var len = 0;

            if ($scope.Quotes_Data != undefined) {
                $scope.rangeminidv = $scope.Quotes_Data[0].MinIDV;
                $scope.rangemaxidv = $scope.Quotes_Data[0].MaxIDV;
                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    if ($scope.lazyloadcycleterm == 3) { $scope.Quotes_Data[i].ids = i; }
                    if ($scope.Quotes_Data[i].PolicyTerm == 3) {
                        $scope.policyterm3show = true;
                    }
                    if ($scope.Quotes_Data[i].PolicyTerm == 5) {
                        $scope.policyterm5show = true;
                    }

                    if ($scope.Quotes_Data[i].PolicyTerm == 2) {

                        $scope.policyterm2show = true;
                    }

                    if ($scope.Quotes_Data[i].PolicyTerm == 1) {

                        $scope.policyterm1show = true;
                    }
                    if ($scope.Quotes_Data[i].visibilityshow != false || $scope.quotesrequest.Requests[0].InsuranceType == "TP") {
                        len = len + 1;
                    }

                    if ($scope.rangeminidv > $scope.Quotes_Data[i].MinIDV) {
                        $scope.rangeminidv = $scope.Quotes_Data[i].MinIDV;
                    }
                    if ($scope.rangemaxidv < $scope.Quotes_Data[i].MaxIDV) {
                        $scope.rangemaxidv = $scope.Quotes_Data[i].MaxIDV;
                    }
                }
            }
            $scope.totalplanlength = len;

            if ($scope.selectedaddon == undefined) {
                $scope.selectedaddon = [];
            }
            for (var x = 0; x < responsedata[1].length; x++) {
                $scope.selectedaddon.push(responsedata[1][x])
            }

            for (var i = $scope.lazyloadcyclelength; i < responsedata[0].length + $scope.lazyloadcyclelength; i++) {
                if ($scope.Quotes_Data[i].InsurerId == 7) {

                    $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + 'KeyLock Replacement'] = true;
                }
                for (var j = 0; j < $scope.Quotes_Data[i].addonavl.length; j++) {
                    if ($scope.Quotes_Data[i].addonavl[j].Value > 0) {
                        if (Object.keys($scope.addonsmodels).length != 0) {
                            if ($scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] == true) {
                                var result = CarFactory.stateChanged($scope.Quotes_Data[i].addonavl[j], j, $scope.Quotes_Data[i], $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name], $scope);
                                $scope = result;
                            }
                            else {
                                $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = false;
                            }
                        }
                        else {
                            $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = false;
                        }
                    }
                    else {
                        $scope.Quotes_Data[i].BasicOADPremium = $scope.Quotes_Data[i].BasicOADPremium + $scope.Quotes_Data[i].addonavl[j].Value + $scope.Quotes_Data[i].addonavl[j].Value * (globals.ServiceTax / 100);
                        $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = true;

                        $scope.selectedaddon[$scope.Quotes_Data[i].objectid].addonselection1.push({ Name: $scope.Quotes_Data[i].addonavl[j].Name, Value: $scope.Quotes_Data[i].addonavl[j].Value, Type: $scope.Quotes_Data[i].addonavl[j].Type, Id: $scope.Quotes_Data[i].addonavl[j].typeid, bid: $scope.Quotes_Data[i].addonavl[j].bid });
                    }
                }
            }



            $scope.lazyloadcyclelength = $scope.lazyloadcyclelength + resultquotes.length;

            $scope.quotesdata = $scope.Quotes_Data;
            $scope.quotesrequest.Requests[0].InsurerIds = [12, 17, 14, 41, 16, 63, 15, 5,49];
            // $scope.Initialzedata(2);
            filterResultMotor();
        }

        $scope.Carquotesfn1 = function (resultquotes) {
            if ($scope.quotesdata != undefined && $scope.Quotes_Data != undefined) {
                if ($scope.quotesdata.length > $scope.Quotes_Data.length) {
                    $scope.Quotes_Data = $scope.quotesdata;
                }
            }
            if ($scope.Quotes_Data == undefined) {
                var len = 0
            }
            else {
                var len = $scope.Quotes_Data.length;
            }
            if (resultquotes != undefined) {
                for (var i = 0; i < resultquotes.length; i++) {
                    if (resultquotes[i].InsurerId == 15 && $scope.quotesrequest.Requests[0].InsuranceType != "TP") {
                        var ncbdiscount = CarFactory.UnitedFn(resultquotes[i], $scope);
                        for (var d = 0; d < resultquotes[i].Discounts.length; d++) {
                            if (resultquotes[i].Discounts[d].Name == "NCBPremium") {
                                resultquotes[i].Discounts[d].Value = ncbdiscount;
                            }
                        }
                    }
                }
            }
            var responsedata = CarFactory.addonlists(resultquotes, len, $scope);
            //$scope.selectedaddon = responsedata[1];

            if ($scope.Quotes_Data != undefined) {
                for (var x = 0; x < responsedata[0].length; x++) {
                    $scope.Quotes_Data.push(responsedata[0][x]);

                }
            }
            else {
                $scope.Quotes_Data = responsedata[0];
            }
            $scope.quotesdata = angular.copy($scope.Quotes_Data);
            $scope.quotesdatatemp = angular.copy($scope.Quotes_Data);
            // $scope.quotesdata = angular.copy($scope.Quotes_Data);

            $scope.rangeminidv = $scope.Quotes_Data[0].MinIDV;
            $scope.rangemaxidv = $scope.Quotes_Data[0].MaxIDV;
            var len = 0;
            if ($scope.Quotes_Data != undefined && $scope.lazyloadcycleterm == 3) {
                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    $scope.Quotes_Data[i].ids = i;
                    if ($scope.rangeminidv > $scope.Quotes_Data[i].MinIDV) {
                        $scope.rangeminidv = $scope.Quotes_Data[i].MinIDV;
                    }
                    if ($scope.rangemaxidv < $scope.Quotes_Data[i].MaxIDV) {
                        $scope.rangemaxidv = $scope.Quotes_Data[i].MaxIDV;
                    }
                    if ($scope.Quotes_Data[i].visibilityshow != false || $scope.quotesrequest.Requests[0].InsuranceType == "TP") {
                        len = len + 1;
                    }
                }
            }
            if ($scope.selectedaddon == undefined) {
                $scope.selectedaddon = [];
            }

            for (var x = 0; x < responsedata[1].length; x++) {
                $scope.selectedaddon.push(responsedata[1][x])
            }


            $scope.totalplanlength = len;

            for (var i = $scope.lazyloadcyclelength; i < responsedata[0].length + $scope.lazyloadcyclelength; i++) {
                for (var j = 0; j < $scope.Quotes_Data[i].addonavl.length; j++) {
                    if ($scope.Quotes_Data[i].addonavl[j].Type.toLowerCase() != "free" && $scope.Quotes_Data[i].addonavl[j].Type.toLowerCase() != "included") {
                        if (Object.keys($scope.addonsmodels).length != 0) {
                            if ($scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] == true) {
                                var result = CarFactory.stateChanged($scope.Quotes_Data[i].addonavl[j], j, $scope.Quotes_Data[i], $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name], $scope);
                                $scope = result;
                            }
                            else {
                                $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = false;
                            }
                        }
                        else {
                            $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = false;
                        }
                    }
                    else {
                        $scope.Quotes_Data[i].BasicODPremium = $scope.Quotes_Data[i].BasicODPremium + $scope.Quotes_Data[i].addonavl[j].Value + $scope.Quotes_Data[i].addonavl[j].Value * (globals.ServiceTax / 100);
                        $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = true;
                        $scope.selectedaddon[$scope.Quotes_Data[i].objectid].addonselection1.push({ Name: $scope.Quotes_Data[i].addonavl[j].Name, Value: $scope.Quotes_Data[i].addonavl[j].Value, Type: $scope.Quotes_Data[i].addonavl[j].Type, Id: $scope.Quotes_Data[i].addonavl[j].typeid, bid: $scope.Quotes_Data[i].addonavl[j].bid });
                    }
                }
            }

            //    $scope.quotesdata = $scope.quotesdatatemp1;
            $scope.lazyloadcyclelength = $scope.lazyloadcyclelength + resultquotes.length;


            if ($scope.lazyloadcycle == 2 && $scope.quotesrequest.utmSource.toLowerCase() != "sdl" && $scope.quotesrequest.utmSource.toLowerCase() != "tcl") {
                if ($scope.reload1 == undefined) {
                    $scope.quotesrequest.Requests[0].InsurerIds = [6, 47, 34, 50, 68];
                    $scope.reload1 = 0;
                }

            }
            else if ($scope.lazyloadcycle == 0) {
                $scope.quotesrequest.Requests[0].InsurerIds = [1, 2, 7];
            }
            caraddonncb();
            $scope.quotesdata = $scope.Quotes_Data;
            filterResultMotor();
        }

        $scope.Twowheelerquotesfn = function (resultquotes) {
            if ($scope.quotesdata != undefined && $scope.Quotes_Data != undefined) {
                if ($scope.quotesdata.length > $scope.Quotes_Data.length) {
                    $scope.Quotes_Data = $scope.quotesdata;
                }
            }
            if ($scope.Quotes_Data == undefined) {
                var len = 0
            }
            else {
                var len = $scope.Quotes_Data.length;
            }
            var responsedata = CarFactory.addonlists(resultquotes, len, $scope);

            if ($scope.Quotes_Data != undefined) {
                for (var x = 0; x < responsedata[0].length; x++) {
                    $scope.Quotes_Data.push(responsedata[0][x]);

                }
            }
            else {
                $scope.Quotes_Data = responsedata[0];
            }

            $scope.policyterm3show = false;
            $scope.policyterm2show = false;
            $scope.policyterm1show = false;
            $scope.policyterm5show = false;

            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                if ($scope.Quotes_Data[i].PolicyTerm == 3) {
                    $scope.policyterm3show = true;
                }
                if ($scope.Quotes_Data[i].PolicyTerm == 5) {
                    $scope.policyterm5show = true;
                }

                if ($scope.Quotes_Data[i].PolicyTerm == 2) {

                    $scope.policyterm2show = true;
                }

                if ($scope.Quotes_Data[i].PolicyTerm == 1) {

                    $scope.policyterm1show = true;
                }


            }
            DataFactory.GetTotalPlan($scope);
            if ($scope.selectedaddon == undefined) {
                $scope.selectedaddon = [];
            }
            for (var x = 0; x < responsedata[1].length; x++) {
                $scope.selectedaddon.push(responsedata[1][x])
            }
            $scope.quotesdatatemp = angular.copy($scope.Quotes_Data);
            $scope.quotesdata = angular.copy($scope.Quotes_Data);
            $scope.quotesdatatemp1 = angular.copy($scope.Quotes_Data);

            if ($scope.Quotes_Data != undefined) {
                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    $scope.Quotes_Data[i].ids = i;
                }
            }
            for (var i = $scope.lazyloadcyclelength; i < responsedata[0].length + $scope.lazyloadcyclelength; i++) {
                for (var j = 0; j < $scope.Quotes_Data[i].addonavl.length; j++) {
                    if ($scope.Quotes_Data[i].addonavl[j].Type.toLowerCase() != "free") {
                        if (Object.keys($scope.addonsmodels).length != 0) {
                            if ($scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] == true) {
                                var result = CarFactory.stateChanged($scope.Quotes_Data[i].addonavl[j], j, $scope.Quotes_Data[i], $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name], $scope);
                                $scope = result;
                            }
                            else {
                                $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = false;
                            }
                        }
                        else {
                            $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = false;
                        }
                    }
                    else {
                        $scope.Quotes_Data[i].BasicOADPremium = $scope.Quotes_Data[i].BasicOADPremium + $scope.Quotes_Data[i].addonavl[j].Value + $scope.Quotes_Data[i].addonavl[j].Value * (globals.ServiceTax / 100);
                        $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = true;

                        $scope.selectedaddon[$scope.Quotes_Data[i].objectid].addonselection1.push({ Name: $scope.Quotes_Data[i].addonavl[j].Name, Value: $scope.Quotes_Data[i].addonavl[j].Value, Type: $scope.Quotes_Data[i].addonavl[j].Type, Id: $scope.Quotes_Data[i].addonavl[j].typeid, bid: $scope.Quotes_Data[i].addonavl[j].bid });
                    }
                }
            }
            if ($scope.Quotes_Data.length > 0) {
                $scope.rangeminidv = $scope.Quotes_Data[0].MinIDV;
                $scope.rangemaxidv = $scope.Quotes_Data[0].MaxIDV;
                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    if ($scope.rangeminidv > $scope.Quotes_Data[i].MinIDV) {
                        $scope.rangeminidv = $scope.Quotes_Data[i].MinIDV;
                    }
                    if ($scope.rangemaxidv < $scope.Quotes_Data[i].MaxIDV) {
                        $scope.rangemaxidv = $scope.Quotes_Data[i].MaxIDV;
                    }
                }
            }
            $scope.lazyloadcyclelength = $scope.lazyloadcyclelength + resultquotes.length;
            // $scope.quotesrequest.Requests[0].InsurerIds = [12, 17];
            // $scope.Initialzedata(2);
            $scope.quotesdata = $scope.Quotes_Data;
            filterResultMotor();
        }

        $scope.Twowheelerquotesfn1 = function (resultquotes) {
            if ($scope.quotesdata != undefined && $scope.Quotes_Data != undefined) {
                if ($scope.quotesdata.length > $scope.Quotes_Data.length) {
                    $scope.Quotes_Data = $scope.quotesdata;
                }
            }
            if ($scope.Quotes_Data == undefined) {
                var len = 0
            }
            else {
                var len = $scope.Quotes_Data.length;
            }
            if (resultquotes != undefined) {
                for (var i = 0; i < resultquotes.length; i++) {
                    if (resultquotes[i].InsurerId == 15 && $scope.quotesrequest.Requests[0].InsuranceType != "TP") {
                        var ncbdiscount = CarFactory.UnitedFn(resultquotes[i], $scope);
                        for (var d = 0; d < resultquotes[i].Discounts.length; d++) {
                            if (resultquotes[i].Discounts[d].Name == "NCBPremium") {
                                resultquotes[i].Discounts[d].Value = ncbdiscount;
                            }
                        }
                    }
                }
            }
            var responsedata = CarFactory.addonlists(resultquotes, len, $scope);
            //$scope.selectedaddon = responsedata[1];
            if ($scope.Quotes_Data != undefined) {
                for (var x = 0; x < responsedata[0].length; x++) {
                    $scope.Quotes_Data.push(responsedata[0][x]);

                }
            }
            else {
                $scope.Quotes_Data = responsedata[0];
            }


            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                if ($scope.Quotes_Data[i].PolicyTerm == 3) {
                    $scope.policyterm3show = true;
                }
                if ($scope.Quotes_Data[i].PolicyTerm == 5) {
                    $scope.policyterm5show = true;
                }

                if ($scope.Quotes_Data[i].PolicyTerm == 2) {

                    $scope.policyterm2show = true;
                }

                if ($scope.Quotes_Data[i].PolicyTerm == 1) {

                    $scope.policyterm1show = true;
                }
            }



            $scope.quotesdata = angular.copy($scope.Quotes_Data);
            $scope.quotesdatatemp = angular.copy($scope.Quotes_Data);

            if ($scope.Quotes_Data != undefined) {
                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    $scope.Quotes_Data[i].ids = i;
                }
            }

            if ($scope.selectedaddon == undefined) {
                $scope.selectedaddon = [];
            }
            for (var x = 0; x < responsedata[1].length; x++) {
                $scope.selectedaddon.push(responsedata[1][x])
            }
            DataFactory.GetTotalPlan($scope);

            for (var i = $scope.lazyloadcyclelength; i < responsedata[0].length + $scope.lazyloadcyclelength; i++) {
                for (var j = 0; j < $scope.Quotes_Data[i].addonavl.length; j++) {
                    if ($scope.Quotes_Data[i].addonavl[j].Type.toLowerCase() != "free" && $scope.Quotes_Data[i].addonavl[j].Type.toLowerCase() != "included") {
                        if (Object.keys($scope.addonsmodels).length != 0) {
                            if ($scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] == true) {
                                var result = CarFactory.stateChanged($scope.Quotes_Data[i].addonavl[j], j, $scope.Quotes_Data[i], $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name], $scope);



                                $scope = result;
                            }
                            else {
                                $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = false;
                            }
                        }
                        else {
                            $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = false;
                        }
                    }
                    else {
                        $scope.Quotes_Data[i].BasicOADPremium = $scope.Quotes_Data[i].BasicOADPremium + $scope.Quotes_Data[i].addonavl[j].Value + $scope.Quotes_Data[i].addonavl[j].Value * (globals.ServiceTax / 100);
                        $scope.addonsmodels[$scope.Quotes_Data[i].InsurerNameWithPlan + $scope.Quotes_Data[i].PolicyTerm + $scope.Quotes_Data[i].InsurerName + $scope.Quotes_Data[i].addonavl[j].Name] = true;

                        $scope.selectedaddon[$scope.Quotes_Data[i].objectid].addonselection1.push({ Name: $scope.Quotes_Data[i].addonavl[j].Name, Value: $scope.Quotes_Data[i].addonavl[j].Value, Type: $scope.Quotes_Data[i].addonavl[j].Type, Id: $scope.Quotes_Data[i].addonavl[j].typeid, bid: $scope.Quotes_Data[i].addonavl[j].bid });


                    }
                }
            }


            //    $scope.quotesdata = $scope.quotesdatatemp1;
            $scope.lazyloadcyclelength = $scope.lazyloadcyclelength + resultquotes.length;
            $scope.rangeminidv = $scope.Quotes_Data[0].MinIDV;
            $scope.rangemaxidv = $scope.Quotes_Data[0].MaxIDV;
            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                if ($scope.rangeminidv > $scope.Quotes_Data[i].MinIDV) {
                    $scope.rangeminidv = $scope.Quotes_Data[i].MinIDV;
                }
                if ($scope.rangemaxidv < $scope.Quotes_Data[i].MaxIDV) {
                    $scope.rangemaxidv = $scope.Quotes_Data[i].MaxIDV;
                }
            }
            caraddonncb();
            $scope.quotesdata = $scope.Quotes_Data;
            filterResultMotor();

        }

        //Quotesfn end
        //edit start
        $scope.editsearch = function (flag0, flag1) {
            var data = {};
            $rootScope.scrollhide = 'scollClass';

            if (flag0 == 'inv1') {
                $scope.invAmountFlag = true;
            }
            else {
                $scope.invAmountFlag = false;
            }

            $rootScope.editsearchflag = true;
            // $scope.PolicyTermPeriod = 60;
            RemoveSearchUrl();
            $rootScope.urlDefaultFlag = 1;

            if (($scope.product == 'Health' && $scope.device == "Desktop") || flag0 != undefined || flag1 != undefined) {
            }
            else {
                $location.search("editsearch", "true");
                $rootScope.editviewflag = 1;
                // $rootScope.scrollhide = 'scollClass';
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'Edit Search', value: $scope.productID });

            }

            $rootScope.exitfrompage = 3;





            $localStorage.utmSource = $scope.quotesrequest.utmSource; $localStorage.utmCompaign = $scope.quotesrequest.utmCompaign; $localStorage.utmMedium = $scope.quotesrequest.utmMedium; $localStorage.utmTerm = $scope.quotesrequest.utmTerm; $localStorage.IGQuoteId = $scope.IGquoteId; $localStorage.IsNewRequest = false;
            if ($scope.product == 'Health') {




                $scope.checkadult($scope.selectedadult);
                $scope.checkchild($scope.selectedchild);
                if (getlist == 0) {
                    getlist = 1;
                    $scope.commoncity1();
                }

                $scope.$root.popuphealthpage = true;
                //                if ($scope.device != "Desktop") {
                //                    $scope.template("HealthEdit", true, flag0);
                //                }
                $scope.template("HealthEdit", true, flag0);
                $rootScope.productpop = "display-block";
                $scope.healthfirstpop = true;
                $scope.$root.planpop = false;
                if ($scope.quotes_userdata.CityId > 0) {
                    $scope.selectedcitynampop = $scope.quotes_userdata.Citylist.cityname;
                    $scope.selectedItem2 = $scope.quotes_userdata.Citylist;
                }
                $scope.selectedadult = $scope.quotes_userdata.Adult.toString();
                $scope.selectedchild = $scope.quotes_userdata.Child.toString();
                if ($scope.quotes_userdata.Birthdate != undefined) {
                    var dob = $scope.quotes_userdata.Birthdate.split("-");
                    $scope.IGdate = dob[0];
                    $scope.IGmonth = dob[1];
                    $scope.IGyear = dob[2];
                }


                if ($scope.askDOB == true) {
                    $scope.IGdate = undefined;
                    $scope.IGmonth = undefined;
                }
                if ($scope.quotes_userdata.Requests != undefined) {
                    if ($scope.quotes_userdata.Requests[0].Gender == "M") {
                        $scope.maleclass = "lmbutton activebt";
                        $scope.femaleclass = "lmbutton";
                        $scope.gender = "M";
                        $scope.formgender = "M"
                    }
                    else if ($scope.quotes_userdata.Requests[0].Gender == "F") {
                        $scope.maleclass = "lmbutton activebt";
                        $scope.femaleclass = "lmbutton";
                        $scope.gender = "M";
                        $scope.formgender = "M"
                    }
                }
                else {
                    if ($scope.quotes_userdata.Gender == "F") {
                        $scope.maleclass = "lmbutton";
                        $scope.femaleclass = "lmbutton  activebt";
                        $scope.gender = "F";
                        $scope.formgender = "F"
                    }
                    else if ($scope.quotes_userdata.Gender == "M") {
                        $scope.maleclass = "lmbutton activebt";
                        $scope.femaleclass = "lmbutton";
                        $scope.gender = "M";
                        $scope.formgender = "M"
                    }
                }


            }


            else if ($scope.product == 'Travel') {
                if (getlist == 0) {
                    getlist = 1;
                    $scope.AllDestinationlist();
                }
                $scope.$root.travelfirstpop = true;
                $scope.$root.popuptravelpage = true;
                $scope.template("TravelEdit1", true);
                $scope.travelProceedBtnLoader = false;
                $scope.$root.planpop = false;
                $rootScope.productpop = "display-block";
                $scope.formtravellerages = $scope.quotes_userdata.TravellerAges;
                $scope.travelStartDate = ($scope.quotes_userdata.StartDate.getMonth() + 1 + "/" + $scope.quotes_userdata.StartDate.getDate() + "/" + $scope.quotes_userdata.StartDate.getFullYear());
                $scope.travelEndDate = ($scope.quotes_userdata.EndDate.getMonth() + 1 + "/" + $scope.quotes_userdata.EndDate.getDate() + "/" + $scope.quotes_userdata.EndDate.getFullYear());
                //                $scope.travelStartDate = $scope.quotes_userdata.StartDate;
                //                $scope.travelEndDate = $scope.quotes_userdata.EndDate;
                var date1 = new Date($scope.travelStartDate);
                date1.setDate(date1.getDate() + 180);
                $scope.maxenddatetravel = date1.getMonth() + 1 + "/" + date1.getDate() + "/" + date1.getFullYear();
                var date2 = new Date($scope.travelStartDate);
                date2.setDate(date2.getDate() + 1);
                $scope.minenddatetravel = date2.getMonth() + 1 + "/" + date2.getDate() + "/" + date2.getFullYear();
                $scope.destinationList = [];
                $scope.TotalMembers = [];
                $scope.selectedTravellers = $scope.quotes_userdata.TravellerAges.toString().split(',').length;
                for (i = 0; i < $scope.quotes_userdata.Destination.toString().split(',').length; i++) {
                    $scope.chipvalue = !0;
                    $scope.destinationList.push({
                        text: $scope.quotes_userdata.DestinationName.toString().split(',')[i],
                        value: $scope.quotes_userdata.Destination.toString().split(',')[i],
                        done: !1
                    })
                }
                for (var i = 1; i <= $scope.selectedTravellers; i++) {
                    $scope.TotalMembers.push({
                        id: i
                    });
                    $scope.dataValue[i] = parseInt($scope.quotes_userdata.TravellerAges.toString().split(',')[i - 1])
                }

                $timeout(function () {
                    $scope.setcalendar();
                }, 1000);

            }


            else if ($scope.product == 'Term' || $scope.product == 'Critical') {
                if (getlist == 0) {
                    getlist = 1;
                    $scope.commoncity1();
                }
                $scope.$root.planpop = false;

                $scope.$root.popuptermpage = true;

                //                if ((($scope.device != "Desktop" || $scope.gaProduct == "Term1" || $scope.gaProduct == "Term2") && $scope.product == 'Term') || flag0 != undefined) {
                //                    $scope.template("TermEdit", true, flag0);
                //                }
                if ($scope.product == 'Term' || flag0 != undefined || $scope.product == 'Critical') {
                    $scope.template("TermEdit", true, flag0);
                }
                if ($scope.quotes_userdata.CityId > 0) {
                    $scope.selectedcitynampop = $scope.quotes_userdata.city.cityname;
                    $scope.selectedItem2 = $scope.quotes_userdata.city;
                }

                $scope.selectedtermincomepop = $scope.actualincome;
                $scope.txtActualIncome.ActualIncomeValue = $scope.quotes_userdata.actualincome;
                $scope.txtActualIncome.ActualIncomeText = $scope.actualincome;
                $rootScope.productpop = "display-block";
                if ($scope.quotes_userdata.dateofbirth != undefined) {
                    var dob = $scope.quotes_userdata.dateofbirth.split("-");
                    $scope.IGdate = dob[0];
                    $scope.IGmonth = dob[1];
                    $scope.IGyear = dob[2];
                }
                if ($scope.quotes_userdata.Gender == "M") {
                    $scope.maleclass = "lmbutton activebt";
                    $scope.femaleclass = "lmbutton";
                    $scope.gender = "M";
                    $scope.formgender = "M"
                } else if ($scope.quotes_userdata.Gender == "F") {
                    $scope.maleclass = "lmbutton";
                    $scope.femaleclass = "lmbutton  activebt";
                    $scope.gender = "F";
                    $scope.formgender = "F"
                }
                if ($scope.askDOB == true) {
                    $scope.IGdate = undefined;
                    $scope.IGmonth = undefined;
                }
                $scope.pincode = $scope.quotesrequest.Requests[0].Pincode;
                if ($scope.pincode == undefined || $scope.pincode == null || $scope.pincode == "") {
                    $scope.pincode = $scope.tempPincode;
                    $scope.quotesrequest.Requests[0].Pincode = $scope.pincode;
                }
            }
            else if ($scope.product == 'Car') {
                $scope.showbtncarloader = false;
                if (getlist == 0) {
                    getlist = 1;
                    $scope.citylist();
                    $scope.carlist();
                }
                $scope.$root.popupcarpage = true;
                $scope.carpopheadline = "Please Enter Your";
                $scope.carpopncbtag = "Last Claim Taken";
                $scope.carmaindetails = true;
                $scope.template("CarEdit", true);
                for (var i = 0; i < $scope.lastclaimtaken.length; i++) {
                    if ($scope.quotesrequest.Requests[0].ClaimedNCB == $scope.lastclaimtaken[i].value.split('~')[1]) {
                        $scope.carclaim = $scope.lastclaimtaken[i].value;
                    }
                }
                $scope.carpopup = true;
                $scope.$root.showrtocity = true;
                $scope.$root.showcarncb = true;
                $rootScope.productpop = "display-block";
                $scope.selectedcarmakepop = $scope.quotes_userdata.VechileDetails.ModelName;
                $scope.carreg = $scope.quotes_userdata.RegistrationYear;
                $scope.selectedcarrtopop = $scope.quotes_userdata.RTOCode;
                $scope.selectedItem = $scope.quotes_userdata.VechileDetails;
                var a = $scope.quotes_userdata.VechileDetails.ModelName.split(",");
                var b = a[1];
                if (b.match("LPG")) {
                    $scope.carcnglpg = $scope.carpoplpg;
                    $scope.formddlkit = "Kit0";
                    $scope.carfuelcontainer = false;
                    $scope.carkitstatus = "Kit2";

                }
                else if (b.match("CNG")) {
                    $scope.carcnglpg = $scope.carpoplpg;
                    $scope.formddlkit = "Kit0";
                    $scope.carfuelcontainer = false;
                    $scope.carkitstatus = "Kit2";
                }
                else if (b.match("PETROL")) {
                    $scope.carfuelcontainer = true;
                    $scope.carcnglpg = $scope.carpoppetrol;
                }


                if ($scope.quotes_userdata.BreakingDays == 91) { // new code
                    $scope.carbreaking = 0;
                    $scope.carbreakingpol = $scope.quotes_userdata.BreakingDays;
                    $scope.showcarexpired = true;
                    $scope.showcarncb = false;
                    $scope.$root.showcarncb = false;
                    $scope.carbreakingexp = 1;
                    $scope.showexpirydate = false;
                }
                else if ($scope.quotes_userdata.BreakingDays == 90) { // new code
                    $scope.carbreakingpol = $scope.quotes_userdata.BreakingDays;
                    $scope.carbreaking = 0;
                    $scope.showcarexpired = true;
                    $scope.carbreakingexp = 0;
                    $scope.showexpirydate = false;
                }
                else { // new code
                    $scope.carbreakingpol = $scope.quotes_userdata.BreakingDays;
                    $scope.carbreaking = 1;
                    $scope.showcarexpired = false;
                    $scope.carbreakingexp = 0;
                    $scope.showexpirydate = true;
                }
                $scope.selectedItem1 = $scope.quotes_userdata.RTOCode;
                //$scope.carclaim = $scope.quotes_userdata.ClaimPercent;
                var date;
                var date1;
                if ($scope.prepolicydate1 == undefined) {
                    $scope.prepolicydate = new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getFullYear();
                    date = $scope.prepolicydate.split('-');
                    $scope.policydate = (parseInt(date[0]) < 9 ? '0' + date[0] : date[0]);
                    $scope.policymonth = (parseInt(date[1]) < 9 ? '0' + date[1] : date[1]);
                    $scope.policyyear = parseInt(date[2]);
                }
                else {
                    date = $scope.prepolicydate1.split('-');
                    $scope.policydate = parseInt(date[0]);
                    $scope.policymonth = parseInt(date[1]);
                    $scope.policyyear = parseInt(date[2]);
                }

                if ($scope.registrationdate == undefined) {
                    $scope.registrationdate = new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getFullYear();
                    date1 = $scope.registrationdate.split('-');
                    $scope.carregdate = (parseInt(date1[0]) < 9 ? '0' + date1[0] : date1[0]);
                    $scope.carregmonth = (parseInt(date1[1]) < 9 ? '0' + date1[1] : date1[1]);
                    $scope.carregyear = parseInt(date1[2]);
                }
                else if ($scope.quotes_userdata.RegistrationDate != undefined) {
                    var getdate = new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getFullYear();
                    date1 = getdate.split('-');
                    $scope.carregdate = (parseInt(date1[0]) < 9 ? '0' + date1[0] : date1[0]);
                    $scope.carregmonth = (parseInt(date1[1]) < 9 ? '0' + date1[1] : date1[1]);
                    $scope.carregyear = parseInt(date1[2]);
                }
                else {
                    if ($scope.registrationdate1 != undefined) { // new code
                        date1 = $scope.registrationdate1.split('-');
                        $scope.carregdate = parseInt(date1[0]);
                        $scope.carregmonth = parseInt(date1[1]);
                        $scope.carregyear = parseInt(date1[2]);
                    }
                }

                //$scope.$root.productBox = "display-block";
                if ($scope.carkitstatus == undefined) {
                    $scope.carkitstatus = "Kit1";
                }
                $scope.quotes_userdata.CngKitPrice = $scope.quotes_userdata.KitValue;
                if ($scope.quotes_userdata.CngKitPrice > 0) {
                    $scope.quotes_userdata.CngLpgKit = "Kit3";
                    $scope.$root.carfuelcontainervalue = true;
                    $scope.$root.entercngkitvalue = $scope.quotes_userdata.CngKitPrice;
                }
                else {
                    $scope.quotes_userdata.CngLpgKit = $scope.carkitstatus;
                    $scope.$root.carfuelcontainervalue = false;
                }
                // $scope.carkitstatus = $scope.quotes_userdata.CngLpgKit;



            }



            else if ($scope.product == 'Twowheeler') {
                if (getlist == 0) {
                    getlist = 1;
                    $scope.bikecitylist();
                    $scope.bikealldatalist();
                }

                $scope.$root.popupbikepage = true;
                $scope.bikepopup = true;
                $scope.$root.planpop = false;
                $scope.template("TWEdit", true);
                $rootScope.productpop = "display-block";
                for (var i = 0; i < $scope.lastclaimtaken.length; i++) {
                    if ($scope.quotesrequest.Requests[0].ClaimedNCB == $scope.lastclaimtaken[i].value.split('~')[1]) {
                        $scope.bikelastclaim = $scope.lastclaimtaken[i].value;
                    }
                }
                $scope.selectedbikemakepop = $scope.quotes_userdata.VechileDetails.bikename;
                $scope.selectedbikertopop = $scope.quotes_userdata.RTOCode;
                $scope.bikereg = $scope.quotes_userdata.RegistrationYear;
                $scope.selectedbikemmv = $scope.quotes_userdata.VechileDetails;
                if ($scope.quotes_userdata.CityName.indexOf('(') != -1)
                    $scope.selectedbikerto = $scope.quotes_userdata.CityName;
                else if ($scope.quotes_userdata.CityName.indexOf('(') != '')
                    $scope.selectedbikerto = '(' + $scope.quotes_userdata.RTOCode + ') ' + $scope.quotes_userdata.CityName;

                //$scope.bikelastclaim = $scope.quotes_userdata.ClaimPercent;     
                var date;
                var date1;
                var ab = "/Date(1506105000000)/";
                date = new Date(parseInt(ab.substring(6, 19))).getDate() + '-' +
                    (new Date(parseInt(ab.substring(6, 19))).getMonth() + 1) + '-' +
                    new Date(parseInt(ab.substring(6, 19))).getFullYear();
                if ($scope.prepolicydate1 == undefined) {
                    $scope.prepolicydate = new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.PreviousPolicyEndDate.substring(6, 19))).getFullYear();
                    date = $scope.prepolicydate.split('-');
                    $scope.policydate = (parseInt(date[0]) < 9 ? '0' + date[0] : date[0]);
                    $scope.policymonth = (parseInt(date[1]) < 9 ? '0' + date[1] : date[1]);
                    $scope.policyyear = parseInt(date[2]);
                }
                else {
                    if ($scope.prepolicydate1 != undefined) {
                        date = $scope.prepolicydate1.split('-');
                        $scope.policydate = parseInt(date[0]);
                        $scope.policymonth = parseInt(date[1]);
                        $scope.policyyear = parseInt(date[2]);
                    }
                }

                if ($scope.registrationdate == undefined) {
                    $scope.registrationdate = new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getFullYear();
                    date1 = $scope.registrationdate.split('-');
                    $scope.carregdate = (parseInt(date1[0]) < 9 ? '0' + date1[0] : date1[0]);
                    $scope.carregmonth = (parseInt(date1[1]) < 9 ? '0' + date1[1] : date1[1]);
                    $scope.carregyear = parseInt(date1[2]);
                }
                else if ($scope.quotes_userdata.RegistrationDate != undefined) {
                    var getdate = new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt($scope.quotes_userdata.RegistrationDate.substring(6, 19))).getFullYear();
                    date1 = getdate.split('-');
                    $scope.carregdate = (parseInt(date1[0]) < 9 ? '0' + date1[0] : date1[0]);
                    $scope.carregmonth = (parseInt(date1[1]) < 9 ? '0' + date1[1] : date1[1]);
                    $scope.carregyear = parseInt(date1[2]);
                }
                else {
                    if ($scope.registrationdate1 != undefined) { // new code
                        date1 = $scope.registrationdate1.split('-');
                        $scope.carregdate = parseInt(date1[0]);
                        $scope.carregmonth = parseInt(date1[1]);
                        $scope.carregyear = parseInt(date1[2]);
                    }
                }
                $scope.bikeexpiredpol = $scope.quotes_userdata.BreakingDays;
                if ($scope.quotes_userdata.BreakingDays == 91) {
                    $scope.showbikelastclaim = false;
                    $scope.showexpirydate = false;

                }
                else if ($scope.quotes_userdata.BreakingDays == 90) {
                    $scope.showbikelastclaim = true;
                    $scope.showexpirydate = false;

                }
                else if ($scope.quotes_userdata.BreakingDays == 0) {
                    $scope.showexpirydate = true;
                    $scope.showbikelastclaim = true;
                }
            }


            else if ($scope.product == 'Investment') {
                $scope.$root.planpop = false;
                $scope.$root.popupinvestmentpage = true;
                $scope.template("InvestmentEdit", true);
                $rootScope.productpop = "display-block";
                var income = $scope.quotes_userdata.Requests[0].Amount.toString().split(",");
                $scope.txtActualIncome = income[0];
                if ($scope.getDuration == "Yearly") {
                    $scope.selectedincome = "Y";
                }
                else {
                    $scope.selectedincome = "M";
                }
                if ($scope.quotes_userdata.dateofbirth != undefined) {
                    var dob = $scope.quotes_userdata.dateofbirth.split("-");
                    $scope.IGdate = dob[0];
                    $scope.IGmonth = dob[1];
                    $scope.IGyear = dob[2];
                }
                
                
                if ($scope.quotes_userdata.Gender == "M") {
                    $scope.maleclass = "lmbutton activebt";
                    $scope.femaleclass = "lmbutton";
                    $scope.gender = "M";
                    $scope.formgender = "M"
                } else if ($scope.quotes_userdata.Gender == "F") {
                    $scope.maleclass = "lmbutton";
                    $scope.femaleclass = "lmbutton  activebt";
                    $scope.gender = "F";
                    $scope.formgender = "F"
                }
            }


            else if ($scope.product == 'Pension') {
                $scope.$root.planpop = false;
                $scope.$root.popuppensionpage = true;
                $scope.template("PensionEdit", true);
                $rootScope.productpop = "display-block";
                var income = $scope.quotes_userdata.Requests[0].Amount.toString().split(",");
                $scope.txtActualIncome = income[0];
                if ($scope.getDuration == "Yearly") {
                    $scope.payMode = 'Y';
                }
                else {
                    $scope.payMode = 'M';
                }
                var nowDate = new Date(parseInt($scope.quotes_userdata.Requests[0].DOBs[0].substr(6)));
                var dateofbirth = nowDate.getDate() + '-' + (nowDate.getMonth() + 1) + '-' + nowDate.getFullYear();
                var dob = dateofbirth.split("-");
                $scope.IGdate = dob[0] <= 9 ? '0' + dob[0] : dob[0];
                $scope.IGmonth = dob[1] <= 9 ? '0' + dob[1] : dob[1];
                $scope.IGyear = dob[2];
                if ($scope.quotes_userdata.Gender == "M") {
                    $scope.maleclass = "lmbutton activebt";
                    $scope.femaleclass = "lmbutton";
                    $scope.gender = "M";
                    $scope.formgender = "M"
                } else if ($scope.quotes_userdata.Gender == "F") {
                    $scope.maleclass = "lmbutton";
                    $scope.femaleclass = "lmbutton  activebt";
                    $scope.gender = "F";
                    $scope.formgender = "F"
                }
            }


            else if ($scope.product == 'Child') {
                $scope.$root.planpop = false;
                $rootScope.productpop = "display-block";
                $scope.$root.popupchildpage = true;
                $scope.template("ChildEdit", true);
                var parentdob = $scope.DOBs[0].split("-");
                var childdob = $scope.DOBs[1].split("-");
                $scope.IGdate = parentdob[0];
                $scope.IGmonth = parentdob[1];
                $scope.IGyear = parentdob[2];
                $scope.IGchilddate = childdob[0];
                $scope.IGchildmonth = childdob[1];
                $scope.IGchildyear = childdob[2];
                var income = $scope.quotes_userdata.Requests[0].Amount.toString().split(",");
                $scope.selectedincome = income[0];
                if ($scope.getDuration == "Yearly") {
                    $scope.childincometype = 'Y';
                }
                else {
                    $scope.childincometype = 'M';
                }
                if ($scope.quotes_userdata.Gender == "M") {
                    $scope.maleclass = "lmbutton activebt";
                    $scope.femaleclass = "lmbutton";
                    $scope.gender = "M";
                    $scope.formgender = "M"
                } else if ($scope.quotes_userdata.Gender == "F") {
                    $scope.maleclass = "lmbutton";
                    $scope.femaleclass = "lmbutton  activebt";
                    $scope.gender = "F";
                    $scope.formgender = "F"
                }
                $scope.selectedItem2 = $scope.quotes_userdata.Requests[0].City;
            }

            $location.search("editsearch", "true");
            $rootScope.editviewflag = 1;
            // $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'Edit Search', value: $scope.productID });


        }

        //edit end
        //leftpanelfn start


        $scope.cancelit = function () {
            $scope.canceller.resolve("force");
            $scope.canceller1.resolve("force");
            $scope.canceller2.resolve("force");
        }

        $scope.popUpForInsurare = function (type) {
            $scope.hiddenForOneYearTP = true;
            if ($scope.productID == 4) {
                if (type == "PREV3TP") {
                    $rootScope.cardata.Requests[0].PreviousPolicyType = type;
                    $rootScope.cardata.Requests[0].InsuranceType = 'OD';
                    $scope.insurancetype = "22";
                }
                else if (type == "PREVSTANDARDCO") {
                    $rootScope.cardata.Requests[0].PreviousPolicyType = type;
                    $rootScope.cardata.Requests[0].InsuranceType = 'CO';
                }
                else if (type == "PREVBUNDLECO") {
                    $rootScope.cardata.Requests[0].PreviousPolicyType = type;
                    $rootScope.cardata.Requests[0].InsuranceType = 'OD';
                    $scope.insurancetype = "22";
                }
                else if (type == "PREV1TP") {
                    $rootScope.cardata.Requests[0].PreviousPolicyType = type;
                    $rootScope.cardata.Requests[0].InsuranceType = 'TP';
                    $scope.hiddenForOneYearTP = false;
                }
            }
            if ($scope.productID == 8) {
                if (type == "PREV3TP") {
                    $rootScope.twowheelerdata.Requests[0].PreviousPolicyType = type;
                    $rootScope.twowheelerdata.Requests[0].InsuranceType = 'OD';
                    $scope.insurancetype = "22";
                }
                else if (type == "PREVSTANDARDCO") {
                    $rootScope.twowheelerdata.Requests[0].PreviousPolicyType = type;
                    $rootScope.twowheelerdata.Requests[0].InsuranceType = 'CO';
                }
                else if (type == "PREVBUNDLECO") {
                    $rootScope.twowheelerdata.Requests[0].PreviousPolicyType = type;
                    $rootScope.twowheelerdata.Requests[0].InsuranceType = 'OD';
                    $scope.insurancetype = "22";
                }
                else if (type == "PREV1TP") {
                    $rootScope.twowheelerdata.Requests[0].PreviousPolicyType = type;
                    $rootScope.twowheelerdata.Requests[0].InsuranceType = 'TP';
                    $scope.hiddenForOneYearTP = false;
                }
            }

            $scope.vechicleForPreviousYear = false;
            $scope.lazyloadcycle = 0;

            if ($scope.product == "Car") {
                carrequestdata();
            }
            if ($scope.product == "Twowheeler") {
                bikerequestdata();
            }

        }
        $scope.insurancetypefn = function (Type, flag) {
            var a = "Click " + Type + " Insurance Type";
            if (Type != undefined) {
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });
            }
            $scope.Quotes_Data = undefined;
            if ($scope.canceller != undefined) {
                $scope.cancelit();
            }

            if (Type == 'TP') {
                $scope.thirdParty = false;
                $scope.comprehansiv = true;

                $scope.thirdInsurance = true;
                $scope.liveInsurance = false;

            }
            else {
                $scope.thirdParty = true;
                $scope.thirdInsurance = false;
                $scope.comprehansiv = false;
                $scope.liveInsurance = true;
                $scope.showidvbox = false;

            }
            if ($scope.IsCorporate != 1) {
                if (Type == 'OD') {
                    $scope.Paownermodel = false;
                    for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                        if ($scope.quotesrequest.Requests[0].Features[i].Name == "PAOwnerDriver") {
                            $scope.quotesrequest.Requests[0].Features[i].IsSelected = $scope.Paownermodel;
                        }
                    }
                }
                else {
                    $scope.Paownermodel = true;
                    for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                        if ($scope.quotesrequest.Requests[0].Features[i].Name == "PAOwnerDriver") {
                            $scope.quotesrequest.Requests[0].Features[i].IsSelected = $scope.Paownermodel;
                        }
                    }
                }
            }
            $scope.quotesrequest.Requests[0].InsuranceType = Type;
            if (flag != 1) {
                $scope.lazyloadcycle = 0;
                $scope.Initialzedata();
            }

        }



        $scope.carleftpanel = function (id, flag, model, text, text1) {
            $scope.ErrorQuotesData = [];
            if (id == 0) {

                $scope.quotesrequest.Requests[0].PolicyTerm = flag;
                $scope.lazyloadcycle = 0;
                $scope.Initialzedata();

            }

            if (id == 1) {

                if (flag == 1) {
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Min Idv Change", value: $scope.productID });

                }
                else if (flag == 2) {
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Max Idv Change", value: $scope.productID });

                }
                else if (flag == 4) {
                    $scope.idvFocus = true;
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Enter Idv Change", value: $scope.productID });

                }


                if (flag != 4) {

                    var result = CarFactory.Checkidv(flag, $scope);



                    $scope = result;
                    if ($scope.idvrangeerror != true) {
                        $scope.lazyloadcycle = 0;
                        $scope.policyterm3show = false;
                        $scope.policyterm5show = false;
                        $scope.policyterm2show = false;
                        $scope.policyterm1show = false;
                        $scope.Initialzedata();
                    }
                }
                else {
                    $scope.manualidv = false;
                }

            }

            else if (id == -2) {


                for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                    if ($scope.quotesrequest.Requests[0].Features[i].Name == "ThirdPartyDiscount") {
                        $scope.quotesrequest.Requests[0].Features[i].IsSelected = $scope.thirdPartyDiscount;
                    }
                }
                $scope.lazyloadcycle = 0;
                $scope.Initialzedata();
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "ThirdPartyDiscount " + $scope.thirdPartyDiscount, value: $scope.productID });

            }

            else if (id == 2) {


                for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                    if ($scope.quotesrequest.Requests[0].Features[i].Name == "AntiTheftDevice") {
                        $scope.quotesrequest.Requests[0].Features[i].IsSelected = $scope.antitheft;
                    }
                }
                $scope.lazyloadcycle = 0;
                $scope.Initialzedata();
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Antitheft " + $scope.antitheft, value: $scope.productID });

            }

            else if (id == 3) {
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Autoassociation " + $scope.autoasso, value: $scope.productID });

                var result = CarFactory.Autoassociation(flag, $scope, model);
                $scope = result;
                for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                    if ($scope.quotesrequest.Requests[0].Features[i].Name == "AAI") {
                        var index = i;
                    }
                }

                if ($scope.autoasso == true && $scope.aai.name != undefined && $scope.aai.name != "" && $scope.aai.membershipno != undefined && $scope.aai.membershipno != "" && $scope.quotesrequest.Requests[0].Features[index].LicenseNumber != "" && $scope.quotesrequest.Requests[0].Features[index].LicenseNumber != undefined) {

                    $scope.lazyloadcycle = 0;
                    if ($scope.aaierrormsg == false && model != undefined)
                        $scope.Initialzedata();
                }
                if ($scope.autoasso == false && $scope.quotesrequest.Requests[0].Features[index].IsSelected == true) {
                    $scope.quotesrequest.Requests[0].Features[index].IsSelected = false;
                    $scope.lazyloadcycle = 0;
                    $scope.Initialzedata();
                }
            }




            else if (id == 4) {

                if ($scope.selectedvolaccessvalue != undefined) {
                    var result = CarFactory.Voluntaryexcess(flag, $scope);
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Voluntaryexcess " + $scope.voluntarycheck, value: $scope.productID });

                    $scope = result;
                    $scope.lazyloadcycle = 0;
                    $scope.Initialzedata();
                }

            }

            else if (id == 5) {
                var a = flag + " Addon " + model;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });
                var result = CarFactory.Addonsselectionfn(flag, $scope, model, text);
                $scope = result;
                var result1 = CarFactory.AddonSelect($scope, model, text);

                $scope = result1;
                $scope.orderByField = "-featurecount";
                $scope.sortquotes(5, "featurecount");
                $scope.addondisable();
                caraddonncb();

            }



            else if (id == 6) {
                var unitedcode = false;
                if (text1 == undefined) {
                    unitedcode = true;
                }
                else if (text1.InsurerId == 15) {
                    unitedcode = true;
                }
                if (text != undefined) {
                    var a = text.name + " Addon " + model;
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });
                }
                sortingvaluecount++;

                if (sortingvaluecount == 1 || ($scope.sortkey == "BasicODPremium" && model == false)) {
                    for (a = 0; a < $scope.Quotes_Data.length; a++) {
                        $scope.Quotes_Data[a].sortingpremiumvalue = $scope.Quotes_Data[a].BasicODPremium;
                    }
                }
                if (text1.InsurerId != 7) {
                    var result = CarFactory.stateChanged(text, flag, text1, model, $scope);
                    $scope = result;
                }
                else {
                    //if (model == true) {
                        var result = CarFactory.stateChanged(text, flag, text1, model, $scope);
                        $scope = result;
                    //}
                    // else {
                    $scope.addonsmodels[text1.InsurerNameWithPlan + text1.PolicyTerm + text1.InsurerName + text.Name] = model;
                   // }
                }
                if (unitedcode == true) {
                    for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                        if ($scope.Quotes_Data[i].InsurerId == 15 && $scope.quotesrequest.Requests[0].InsuranceType != "TP") {
                            var ncbdiscount = CarFactory.UnitedFn($scope.Quotes_Data[i], $scope, $scope.Quotes_Data[i].objectid);
                            for (var d = 0; d < $scope.Quotes_Data[i].Discounts.length; d++) {
                                if ($scope.Quotes_Data[i].Discounts[d].Name == "NCBPremium") {
                                    $scope.Quotes_Data_ncbdiscount = $scope.Quotes_Data[i].Discounts[d].Value;
                                    $scope.Quotes_Data[i].Discounts[d].Value = ncbdiscount;
                                }
                            }
                            if ($scope.unitedaddon == undefined) {
                                $scope.unitedaddon = [];
                            }
                            if (model == true) {
                                $scope.unitedaddon.push(text);
                            }
                            else {
                                var idx = $scope.unitedaddon.indexOf($filter('filter')($scope.unitedaddon, function (d) { return d.Name == text.Name })[0]);
                                if (idx > -1) {
                                    $scope.unitedaddon.splice(idx, 1);
                                }
                            }
                            $scope.Quotes_Data[i].BasicODPremium = $scope.Quotes_Data[i].BasicODPremium1;
                            for (k = 0; k < $scope.Quotes_Data[i].LegalLiability.length; k++) {
                                $scope.Quotes_Data[i].BasicODPremium = $scope.Quotes_Data[i].BasicODPremium + parseFloat($scope.Quotes_Data[i].LegalLiability[k].Value);
                            }
                            for (k = 0; k < $scope.Quotes_Data[i].Discounts.length; k++) {
                                $scope.Quotes_Data[i].BasicODPremium = $scope.Quotes_Data[i].BasicODPremium - parseFloat($scope.Quotes_Data[i].Discounts[k].Value);
                            }
                            for (k = 0; k < $scope.Quotes_Data[i].OwnDamage.length; k++) {
                                $scope.Quotes_Data[i].BasicODPremium = $scope.Quotes_Data[i].BasicODPremium + parseFloat($scope.Quotes_Data[i].OwnDamage[k].Value);
                            }
                            for (var s = 0; s < $scope.unitedaddon.length; s++) {
                                $scope.Quotes_Data[i].BasicODPremium = $scope.Quotes_Data[i].BasicODPremium + $scope.unitedaddon[s].Value;
                            }
                            var servicetax = ($scope.Quotes_Data[i].BasicODPremium * ($scope.servicetaxrate * 100)) / 100;
                            $scope.Quotes_Data[i].BasicODPremium = $scope.Quotes_Data[i].BasicODPremium + parseFloat(servicetax);
                        }
                    }
                }

                if ($scope.sortkey == "-IDV")
                    $scope.orderByField = "-IDV";
                else
                    $scope.orderByField = "sortingpremiumvalue";
            }






            else if (id == 7) {


                for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                    if ($scope.quotesrequest.Requests[0].Features[i].Name == "LegalLiabilityPaidDriver") {
                        $scope.quotesrequest.Requests[0].Features[i].IsSelected = $scope.paid_driver;
                    }
                }
                $scope.lazyloadcycle = 0;
                var a = "LegalLiabilityPaidDriver " + $scope.paid_driver;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

                $scope.Initialzedata();
            }

            else if (id == 8) {
                var a = "Electrical Accessories " + $scope.addonelectric;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


                if ($scope.electricalAccessoryValue != undefined) {
                    var result = CarFactory.Electricalaccessory($scope);



                    $scope = result;
                    if ($scope.eleaccerror != true) {
                        $scope.lazyloadcycle = 0;
                        $scope.Initialzedata();
                    }
                }
            }



            else if (id == 9) {
                var a = "PA for Unnamed " + $scope.addonpaunnamed;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });



                if ($scope.addonpaunnamed == true && $scope.passengerCover != undefined && $scope.passengerCover != 0) {


                    for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                        if ($scope.quotesrequest.Requests[0].Features[i].Name == "PAUnnamed") {
                            $scope.quotesrequest.Requests[0].Features[i].Value = $scope.passengerCover;
                        }
                    }


                    $scope.lazyloadcycle = 0;
                    $scope.Initialzedata();
                }

                else if ($scope.addonpaunnamed == false && $scope.passengerCover != undefined && $scope.passengerCover != 0) {

                    for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                        if ($scope.quotesrequest.Requests[0].Features[i].Name == "PAUnnamed") {
                            $scope.quotesrequest.Requests[0].Features[i].Value = 0;
                        }
                    }
                    $scope.lazyloadcycle = 0;
                    $scope.Initialzedata();
                }

            }


            else if (id == 10) {

                var a = "Non-Electrical Accessories " + $scope.addonnonelectric;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


                if ($scope.nonelectricalAccessoryValue != undefined) {
                    var result = CarFactory.Nonelectricalaccessory($scope);





                    $scope = result;
                    if ($scope.noneleaccerror != true) {
                        $scope.lazyloadcycle = 0;
                        $scope.Initialzedata();
                    }
                }

            }
            else if (id == 11) {
                var a = "Legal Liability to Paid Driver " + $scope.liability_driver;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


                var a = 0;
                if ($scope.liability_driver == true && $scope.liabilityCover != undefined && $scope.liabilityCover != '') {
                    for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                        if ($scope.quotesrequest.Requests[0].Features[i].Name == "LegalLiabilityPaidDriverSI") {
                            $scope.quotesrequest.Requests[0].Features[i].Value = parseInt($scope.liabilityCover);
                            $scope.quotesrequest.Requests[0].Features[i].IsSelected = $scope.liability_driver;
                            a = 1;
                        }
                    }
                    if (a == 0) {
                        $scope.quotesrequest.Requests[0].Features.push({ "__type": "CustomFeature:#ServiceEntities", "Group": null, "Id": 0, "IsSelected": $scope.liability_driver, "Name": "LegalLiabilityPaidDriverSI", "Type": "Custom", "Value": parseInt($scope.liabilityCover) });
                    }
                    $scope.lazyloadcycle = 0;
                    $scope.Initialzedata();
                }
                else if ($scope.liability_driver == false && $scope.liabilityCover != undefined && $scope.liabilityCover != '') {
                    for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                        if ($scope.quotesrequest.Requests[0].Features[i].Name == "LegalLiabilityPaidDriverSI") {
                            $scope.quotesrequest.Requests[0].Features[i].Value = 0;
                        }
                    }
                    $scope.lazyloadcycle = 0;
                    $scope.Initialzedata();
                }

            }
            else if (id == 12) {
                for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                    if ($scope.quotesrequest.Requests[0].Features[i].Name == "PAOwnerDriver") {
                        $scope.quotesrequest.Requests[0].Features[i].IsSelected = $scope.Paownermodel;
                    }
                }
                $scope.lazyloadcycle = 0;
                $scope.Initialzedata();
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "PAOwnerDriver " + $scope.Paownermodel, value: $scope.productID });

            }
        }


        $scope.addondisable = function () {
            $scope.addonncbdis = true;
            $scope.addoncoverdis = true;
            $scope.addonrsadis = true;
            $scope.addonzerodeptdis = true;
            $scope.addoninvoicedis = true;
            $scope.addonenginedis = true;
            $scope.addonkeylockdis = true;
            $scope.addonhydrodis = true;
            $scope.addonhospitaldis = true;
            $scope.addonmedicaldis = true;
            $scope.addonambulancedis = true;
            $scope.addoncashdis = true;
            $scope.addontyrecoverdis = true;
            $scope.addonBelongingsdis = true;
            $scope.addonEmergencyTransportdis = true;
            $scope.addonRepairdis = true;
            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                for (var j = 0; j < $scope.Quotes_Data[i].addonavl.length; j++) {
                    if ($scope.Quotes_Data[i].addonavl[j].Type == "Mandatory") {
                        var addonsp = $scope.Quotes_Data[i].addonavl[j].Name.split("+");
                        for (c = 0; c < addonsp.length; c++) {
                            disableaddon(addonsp[c].trim());
                        }
                    }
                    else {

                        disableaddon($scope.Quotes_Data[i].addonavl[j].Name);


                    }
                }
            }
        }

        function disableaddon(flag) {
            if (flag == "NCB Protection") {
                $scope.addonncbdis = false;
            }
            else if (flag == "Consumable Cover") {
                $scope.addoncoverdis = false;
            }
            else if (flag == "Road Assistance") {
                $scope.addonrsadis = false;
            }
            else if (flag == "Zero Depreciation") {
                $scope.addonzerodeptdis = false;
            }
            else if (flag == "Invoice Cover") {
                $scope.addoninvoicedis = false;
            }
            else if (flag == "Engine Protector") {
                $scope.addonenginedis = false;
            }
            else if (flag == "KeyLock Replacement") {
                $scope.addonkeylockdis = false;
            }
            else if (flag == "Hydrostatic Lock") {
                $scope.addonhydrodis = false;
            }
            else if (flag == "Hospital") {
                $scope.addonhospitaldis = false;
            }
            else if (flag == "Medical") {
                $scope.addonmedicaldis = false;
            }
            else if (flag == "Ambulance") {
                $scope.addonambulancedis = false;
            }
            else if (flag == "Cash Allowance") {
                $scope.addoncashdis = false;
            }
            else if (flag == "Tyre Cover") {
                $scope.addontyrecoverdis = false;
            }
            else if (flag == "Loss Of Personal Belongings") {
                $scope.addonBelongingsdis = false;
            }
            else if (flag == "Emergency Transport And Hotel Expenses") {
                $scope.addonEmergencyTransportdis = false;
            }
            else if (flag == "Repair Of Glass") {
                $scope.addonRepairdis = false;
            }
        }

        $scope.twowheelerleftpanel = function (id, flag, model, text, text1) {

            var a = "PA for Unnamed " + $scope.passengercovercheck;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


            if (id == 2) {
                if ($scope.passengercovercheck == true && $scope.passengerCover != undefined) {
                    for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                        if ($scope.quotesrequest.Requests[0].Features[i].Name == "PAUnnamed") {
                            $scope.quotesrequest.Requests[0].Features[i].Value = $scope.passengerCover;
                        }
                    }
                    $scope.lazyloadcycle = 0;
                    $scope.Initialzedata();
                }

                else if ($scope.passengercovercheck == false && $scope.passengerCover != undefined) {
                    for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                        if ($scope.quotesrequest.Requests[0].Features[i].Name == "PAUnnamed") {
                            $scope.quotesrequest.Requests[0].Features[i].Value = 0;
                        }
                    }
                    $scope.lazyloadcycle = 0;
                    $scope.Initialzedata();
                }

            }

        }

        $scope.travelleftpanel = function (id, FeatureName) {
            if ($scope.product == "Travel" && $scope.quotesrequest != undefined) {
                if (id == 1) {

                    $scope.quotesrequest.Requests[0].SumInsured = parseInt($scope.SumInsured);
                    $scope.quotes_userdata.SumInsured = parseInt($scope.SumInsured);
                }

                else if (id == 2) {

                    $scope = TravelFactory.toggleSelection($scope, FeatureName);
                }


                else if (id == 3) {

                    $scope.quotesrequest.Request.ProductDetails.ProductDetail.Disease = $scope.PED;

                    $scope.quotes_userdata.PED = $scope.PED;
                }


                // $localStorage.quotes_userdata = $scope.quotes_userdata;
                $scope.Initialzedata();
            }

            var a = "Lead Pop Resend OTP " + $scope.gaProduct;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

        }

        $scope.showMorePlan = function (value) {
            $scope.viewmoresection[value] = true;
        }

        //leftpanelfn end
        //sort and filter start
        $scope.sortquotes = function (flag, value) {
            if (flag == 1) {
                return 'IDV'
            }
            else if (flag == 0) {
                return 'BasicOADPremium'
            }
            if (flag == 5) {
                return value;
            }
        }
        //sort and filter end
        // Temproray Compare for health


        $scope.loadtemplatequotesfn = function (product, $event) {
            $scope.affixclass = "";
            $rootScope.urlDefaultFlag = 0;
            $rootScope.scrollhide = "";
            $scope.showcomparepop = false; $rootScope.showfooter = true;
            $scope.historyback("viewmore");
            $scope.opdshow = [];
            $rootScope.sharethepage = true;
            if ($scope.product == 'Term') {

                if ($scope.device == "Desktop") {
                    var a = $rootScope.termdata.LandingURL;
                    if ($rootScope.termdata.LandingURL.indexOf('life-insurance/term-insurance') != -1) {
                        //$rootScope.loadcardtemplate = '../HomePage/Template/TermNew1.html';
                        $rootScope.loadcardtemplate = '../HomePage/Template/Term.html';
                        $scope.gaProduct = "Term";
                        //$scope.gaProduct = "TermNew1";
                        // UiVersion = 3;
                        // $scope.plantypemodelnew = 25;

                    }
                    else if ($rootScope.termdata.LandingURL.indexOf('lp/life-term-plans/v1') != -1 || $rootScope.termdata.LandingURL.indexOf('life-insurance') != -1) {
                        $rootScope.loadcardtemplate = '../HomePage/Template/Term.html';
                        $scope.gaProduct = "TermNew";
                        UiVersion = 2;

                    }
                    else {
                        $rootScope.loadcardtemplate = '../HomePage/Template/Term.html';
                        $scope.gaProduct = "Term";
                    }

                }
                else if ($scope.device == "Mobile") {
                    if ($rootScope.termdata.LandingURL.indexOf('life-insurance/term-insurance') != -1) {
                        //$rootScope.loadcardtemplate = '../HomePage/Template/TermNewMobile1.html';
                        //$scope.gaProduct = "TermNew1";
                        //UiVersion = 3;
                        //$scope.plantypemodelnew = 25;
                        $rootScope.loadcardtemplate = '../HomePage/Template/TermMobile.html';
                        $scope.gaProduct = "Term";

                    }
                    else if ($rootScope.termdata.LandingURL.indexOf('lp/life-term-plans/v1') != -1 || $rootScope.termdata.LandingURL.indexOf('life-insurance') != -1 || $rootScope.termdata.LandingURL.indexOf('v1') != -1) {
                        $rootScope.loadcardtemplate = '../HomePage/Template/TermMobile.html';
                        $scope.gaProduct = "TermNew";
                        UiVersion = 2;

                    }
                    else {
                        $rootScope.loadcardtemplate = '../HomePage/Template/TermMobile.html';
                        $scope.gaProduct = "Term";
                    }
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
            }
            if ($scope.product == 'Group') {

                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/Groupterm.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/GrouptermMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
            }
            if ($scope.product == 'Critical') {
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/Critical.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/CriticalMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
            }
            else if ($scope.product == 'Health') {
                if ($scope.device == "Desktop") {
                    if ($rootScope.healthdata.Requests[0].DeductibleAmount > 0) {
                        if ($scope.device == "Desktop") {

                            $scope.gaProduct = "Health Super";
                            $scope.UiVersion = 1;
                            $rootScope.loadcardtemplate = '../HomePage/Template/HealthSuper.html';


                        }
                        else if ($scope.device == "Mobile") {
                            $rootScope.loadcardtemplate = '../HomePage/Template/HealthSuperMobile.html';
                            $scope.policyTermYearValue = 1;
                            // $scope.clickToCallShow = false;
                            $scope.gaProduct = "Health Super";
                        }

                    }
                    else {
                        if ($scope.gaProduct == "Health1") {
                            $rootScope.loadcardtemplate = '../HomePage/Template/Health.html';
                            UiVersion = 2;
                        }
                        else {
                            if ($rootScope.healthdata.Requests[0].IsCovid)
                                $rootScope.loadcardtemplate = '../HomePage/Template/Covid.html';
                            else
                                $rootScope.loadcardtemplate = '../HomePage/Template/Health.html';
                        }
                    }

                }
                else if ($scope.device == "Mobile") {
                    if ($rootScope.healthdata.Requests[0].DeductibleAmount > 0) {
                        $rootScope.loadcardtemplate = '../HomePage/Template/HealthSuperMobile.html';
                        $scope.policyTermYearValue = 1;
                        // $scope.clickToCallShow = false;
                        $scope.gaProduct = "Health Super";
                    }
                    else {
                        if ($rootScope.healthdata.Requests[0].IsCovid)
                            $rootScope.loadcardtemplate = '../HomePage/Template/CovidMobile.html';
                        else
                            $rootScope.loadcardtemplate = '../HomePage/Template/HealthMobile.html';
                    }
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
            }
            else if ($scope.product == 'Investment') {
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTerm.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTermMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
            }
            else if ($scope.product == 'Child') {
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTerm.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTermMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
            }
            else if ($scope.product == 'Pension') {
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTerm.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/NonTermMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
            }
            else if ($scope.product == 'Travel') {
                if ($scope.device == "Desktop") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/Travel.html';
                }
                else if ($scope.device == "Mobile") {
                    $rootScope.loadcardtemplate = '../HomePage/Template/TravelMobile.html';
                }
                $scope.sortfiltermobileshow = true;
                $scope.$root.sharethepage = true;
            }
            var currentpage = $location.absUrl();
            if (currentpage.indexOf('viewmore') != -1) {
                if ($location.$$search.viewmore) {
                    delete $location.$$search.viewmore;
                    $location.$$compose();
                }
            }
            else if (currentpage.indexOf('comparepop') != -1) {
                if ($location.$$search.comparepop) {
                    delete $location.$$search.comparepop;
                    $location.$$compose();
                }
            }
            $event.stopPropagation();
            $rootScope.showloadcardtemplate = true;
            $rootScope.loadcardtemplate1 = undefined;
            //       $location.hash($rootScope.selctedPlanId);

            // // call $anchorScroll()
            // anchorSmoothScroll.scrollTo($rootScope.selctedPlanId);


            $timeout(function () {
                focusOnFiled($rootScope.selctedPlanId);
            }, 100);
        }

        $scope.moreInfoInit = function (item) {
            if (item.FundDetails != undefined && item.IsUlip == true) {
                //$scope.funding = item.FundDetails[0].FundName;
                var a = 0;
                var index = 0;
                for (var i = 0; i < item.FundDetails.length; i++) {
                    if (item.FundDetails[i].Average == item.Growthpercentage) {
                        $scope.funding = item.FundDetails[i].FundName;
                        a = item.FundDetails[i].InceptionValue;
                        index = i;
                    }
                    //                    if (item.FundDetails[i].InceptionValue >= a) {
                    //                        $scope.funding = item.FundDetails[i].FundName;
                    //                        a = item.FundDetails[i].InceptionValue;
                    //                        index = i;
                    //                    }
                }
                item.HistoricalMaturityBenefit = a;
                $scope.funds[index] = true;
            }

        }
        $scope.nonTermTab = function (id, flag) {
            //if ((id == 1 && $scope.ulipplan == true) || (id == 2 && $scope.guaranteedplan == true)) {
                $scope.activeMonTab = id;
                $scope.Quotes_Data = [];
                if ($scope.Quotes_Data_Plan != undefined && $scope.Quotes_Data_Plan != null) {
                    if ($scope.activeMonTab == 1) {
                        $scope.term1monthlypaymodeCss = 'activeclass1';
                        $scope.term1yearlypaymodeCss = '';
                        $scope.plantypemodel = 1;
                        for (var q = 0; q < $scope.Quotes_Data_Plan.length; q++) {
                            if ($scope.Quotes_Data_Plan[q].IsUlip) {
                                $scope.Quotes_Data.push($scope.Quotes_Data_Plan[q]);
                            }
                        }
                    }
                    else {
                        $scope.term1monthlypaymodeCss = '';
                        $scope.term1yearlypaymodeCss = 'activeclass1';
                        $scope.plantypemodel = 2;
                        for (var q = 0; q < $scope.Quotes_Data_Plan.length; q++) {
                            if (!$scope.Quotes_Data_Plan[q].IsUlip) {
                                $scope.Quotes_Data.push($scope.Quotes_Data_Plan[q]);
                            }
                        }
                    }
                }
                //$scope.InvestmentRiderFN();
                var a = 'Plan Type ' + $scope.product;
                $analytics.eventTrack('Click', { category: $scope.product + ' Quotes Page Event', label: a, value: $scope.productID });
                if ($scope.Quotes_Data)
                    $scope.totalplanlength = $scope.Quotes_Data.length;
            //}

        }

        $scope.mobilepopdetails = function (item, index) {
            if ($scope.productID == 3) {
                $scope.TermTab = 0;
                $scope.singlequotesterm = '../Homepage/commonfiles/emailtemplates/singlequotesterm.html';
                if (item.AvailableRiders.length == 0) {
                    $scope.TermTabArray = [{ Name: 'About Plan', Id: 0 }, { Name: 'Features', Id: 1 }];

                }
                else {
                    $scope.TermTabArray = [{ Name: 'About Plan', Id: 0 }, { Name: 'Features', Id: 1 }, { Name: 'Riders', Id: 2 }];

                }
            }
            else if ($scope.productID == 5) {
                $scope.singlequotesinvestment = '../HomePage/commonfiles/emailtemplates/singlequotesinvestment.html';
                $scope.InvestmentTab = 0;
                if (item.InsurerId == 29) {
                    if (item.IsUlip) {
                        if (item.AvailableRiders.length > 0)
                            $scope.InvestTabArray = [{ Name: 'About Plan', Id: 0 }, { Name: 'Fund Performance', Id: 1 }, { Name: 'Riders', Id: 2 }];
                        else
                            $scope.InvestTabArray = [{ Name: 'About Plan', Id: 0 }, { Name: 'Fund Performance', Id: 1 }];

                    }
                    else {
                        $scope.InvestTabArray = [{ Name: 'About Plan', Id: 0 }, { Name: 'Riders', Id: 2 }];
                    }
                }
                else {
                    if (item.IsUlip) {
                        $scope.InvestTabArray = [{ Name: 'About Plan', Id: 0 }, { Name: 'Fund Performance', Id: 1 }];
                    }
                    else {
                        $scope.InvestTabArray = [{ Name: 'About Plan', Id: 0 }];
                    }
                }
            }
            else if ($scope.productID == 6) {
                $scope.singlequotespension = '../Homepage/commonfiles/emailtemplates/singlequotespension.html';
            }
            else if ($scope.productID == 2) {
                $scope.singlequoteshealth = '../Homepage/commonfiles/emailtemplates/singlequotesHealth.html';
                if (item.AvailableRiders.length == 0) {
                    $scope.HealthTabArray = [{ Name: 'About Plan', Id: 0 }, { Name: 'Features', Id: 1 }, { Name: 'Network Hospitals ', Id: 2 }];

                }
                else {
                    $scope.HealthTabArray = [{ Name: 'About Plan', Id: 0 }, { Name: 'Features', Id: 1 }, { Name: 'Network Hospitals ', Id: 2 }, { Name: 'Riders', Id: 3 }];

                }
                if ($scope.featureValue == undefined) {

                    $scope.featureValue = [
                        { class: "preexist", id: "#preexist", Opentooltip: false, name: "Pre Existing Illnesses", value: "", rank: 0, flag: false, elemid: "PreExiBar-", orderrank: 0, tooltip: 'A specific wait period after which the claim for Pre-existing disease will be settled.' },
                        { class: "maternity", id: "#maternity", Opentooltip: false, name: "Maternity Benefits", value: "", rank: 0, flag: true, elemid: "MaterBar-", orderrank: 0, tooltip: 'Maternity Benefit is the cover you can avail for expenses related to child birth. It includes normal delivery, Caesarean section & lawful Medical termination of pregnancy. ' },
                        { class: "criticalillness", id: "#criticalillness", Opentooltip: false, name: "No. of Critical Illnessess", value: "", rank: 0, flag: true, elemid: "CritiBar-", orderrank: 0, tooltip: 'Coverage for illnesses such as cancer, heart attack which are life threatening. A lump sum amount is provided by the insurer on diagnosis of these diseases in a policy period.' },
                        { class: "roomrent", id: "#roomrent", Opentooltip: false, name: "Room Rent", value: "", rank: 0, flag: false, elemid: "RoomBar-", orderrank: 0, tooltip: 'Actual expenses incurred by insured during the course of hospitalization will be covered from the insurance company. Ideally one should look for No limit under this benefit.' },
                        { class: "ambulance1", id: "#ambulance1", Opentooltip: false, name: "Ambulance Charges", value: "", rank: 0, flag: true, elemid: "AmbuBar-", orderrank: 0, tooltip: 'Under this feature ambulance expenses incurred by you during hospitalization will be covered.' },
                        { class: "opd", id: "#opd", Opentooltip: false, name: "OPD", value: "", rank: 0, flag: true, elemid: "OPDBar-", orderrank: 0, tooltip: 'Expenses related to pharmacy, diagnostics, medical aids prescribed by doctor which does not require 24 hours hospitalization. It will be on reimbursement basis. ' },
                        { class: "daycare", id: "#daycare", Opentooltip: false, name: "No. of day care procedures", value: "", rank: 0, flag: true, elemid: "NoDayBar-", orderrank: 0, tooltip: 'Treatment procedures which do not require 24 hours hospitalization due to advanced technology.' },
                        { class: "prehospital", id: "#prehospital", Opentooltip: false, name: "Pre- hospitalization", value: "", rank: 0, flag: true, elemid: "PreHBar-", orderrank: 0, tooltip: 'Cover provided against all the relevant medical expenses made before the hospitalization such as medical tests, diagnostics etc. ' },
                        { class: "posthospital", id: "#posthospital", Opentooltip: false, name: "Post- hospitalization", value: "", rank: 0, flag: true, elemid: "postHBar-", orderrank: 0, tooltip: 'Cover provided against all the relevant medical expenses made after discharge, such as medication and post health check-ups etc. ' },
                        { class: "restorebenefit", id: "#restorebenefit", Opentooltip: false, name: "Restore Benefit", value: "", rank: 0, flag: true, elemid: "ResBHBar-", orderrank: 0, tooltip: 'This feature will reinstate  your Sum Insured for a non-related illness to original Sum Insured if you have exhausted your original sum insured & no claim bonus in a policy period.' },
                        { class: "ayushcover", id: "#ayushcover", Opentooltip: false, name: "Ayush Cover", value: "", rank: 1, flag: true, elemid: "AyCHBar-", orderrank: 0, tooltip: 'Any form of non-allopathic treatment like Ayurveda,Unani, Sidha and Homeopathy will be covered under this provision' },
                        { class: "healthcheckup", id: "#healthcheckup", Opentooltip: false, name: "Health check up", value: "", rank: 0, flag: true, elemid: "HCUHBar-", orderrank: 0, tooltip: 'This feature provides health check up by the insurance free of cost. The pre-defined condition to avail this feature depends on insurer.' },
                        { class: "noclaim", id: "#noclaim", Opentooltip: false, name: "No Claim Bonus", value: "", rank: 0, flag: true, elemid: "NCBHBar-", orderrank: 0, tooltip: 'It is the percentage increase in the Sum Insured in case there was no claim in previous year under the policy. It can vary from 5-100% of the Sum Insured.' },

                    ];

                }
            }
            else if ($scope.productID == 7) {
                $scope.singlequoteschild = '../Homepage/commonfiles/emailtemplates/singlequoteschild.html';
            }
            else if ($scope.productID == 1) {
                $scope.singlequotestravel = '../Homepage/commonfiles/emailtemplates/singlequotestravel.html';
            }
            else if ($scope.productID == 9) {
                $scope.singlequotescritical = '../Homepage/commonfiles/emailtemplates/singlequotescritical.html';
            }
            //$scope.broadcast();
            $scope.showTag = true;
            $rootScope.selctedPlanId = item.PlanId;

            var a = 'View More ' + $scope.gaProduct;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            if ($scope.product == 'Term') {
                var ageinmonth = parseInt($scope.AgeTerm * 12);
                var planid = item.PlanId;
                var moreinfodata = FeatureService.GetTermMoreInfoData($scope.quotesrequest.Requests[0], ageinmonth, planid);
                moreinfodata.then(function (response) {
                    $scope.TermMoreInfoData = angular.extend(item, response.data[0]);
                    $scope = CommonFactory.mobilepopdetail($scope, $scope.TermMoreInfoData, index);
                    viewmorefn(item);
                    if (($scope.TermMoreInfoData.Exclusion == "" || $scope.TermMoreInfoData.Exclusion == undefined || $scope.TermMoreInfoData.Exclusion == null) && ($scope.TermMoreInfoData.exclusion == "" || $scope.TermMoreInfoData.exclusion == undefined || $scope.TermMoreInfoData.exclusion == null)) {
                        $scope.showTag = false;
                    }
                });

            }
            else if ($scope.product.toLowerCase() == "health" && item.PlanId != undefined) {
                if (item.exclusion == undefined) {
                    var planid = item.PlanId;
                    var ageinmonth = parseInt($scope.AgeTerm * 12);
                    var SumInsuredMin = item.SumInsuredMin;
                    if ($rootScope.healthdata.Requests[0].DeductibleAmount > 0) {
                        SumInsuredMin = item.SumInsured;
                    }
                    var moreinfodata = FeatureService.GetHealthMoreInfoData($scope.quotesrequest.Requests[0], ageinmonth, planid, SumInsuredMin);
                    moreinfodata.then(function (response) {
                        if (response.data.length > 0) {
                            item = angular.extend(item, response.data[0]);
                            item.exclusion = response.data[0].Exclusion;
                            item.extra_features = response.data[0].ExtraFeatures;
                        }
                        if ($scope.HealthPlanWeightageValue == undefined) {
                            var promise_request = FeatureService.GetHealthWeightage($scope);
                            promise_request.then(function (pl) {
                                $scope.HealthPlanWeightageValue = angular.fromJson(pl.data);
                                CommonFactory.mobilepopdetail($scope, item, index);
                                viewmorefn(item);
                            });
                        }
                        else {
                            $scope = CommonFactory.mobilepopdetail($scope, item, index);
                            viewmorefn(item);
                        }
                    });
                }
                else {
                    if ($scope.HealthPlanWeightageValue == undefined) {
                        var promise_request = FeatureService.GetHealthWeightage($scope);
                        promise_request.then(function (pl) {
                            $scope.HealthPlanWeightageValue = angular.fromJson(pl.data);
                            CommonFactory.mobilepopdetail($scope, item, index);
                            viewmorefn(item);
                        });
                    }
                    else {
                        $scope = CommonFactory.mobilepopdetail($scope, item, index);
                        viewmorefn(item);
                    }
                }
            }
            else {
                $scope = CommonFactory.mobilepopdetail($scope, item, index);
                viewmorefn(item);

            }
            if ($scope.product != 'Term') {
                if ((item.Exclusion == "" || item.Exclusion == undefined || item.Exclusion == null) && (item.exclusion == "" || item.exclusion == undefined || item.exclusion == null)) {
                    $scope.showTag = false;
                }
            }

            //            $rootScope.scrollhide = 'scollClass';

            //$event.stopPropagation();
        }
        function viewmorefn(item) {
            $scope.HealthTab = 0;
            if ($scope.product == 'Investment' || $scope.product == 'Pension' || $scope.product == 'Child') {
                $scope.funds = [];
                $scope.moreInfoInit(item);
                item.Benefit = item.HistoricalMaturityBenefit;
                if (item.FundDetails != undefined && item.FundDetails != []) {
                    item.FundRevisedDate = new Date(parseInt(item.FundDetails[0].Fundupdateddate.substring(6, 19))).getDate() + '-' +
                        (new Date(parseInt(item.FundDetails[0].Fundupdateddate.substring(6, 19))).getMonth() + 1) + '-' +
                        new Date(parseInt(item.FundDetails[0].Fundupdateddate.substring(6, 19))).getFullYear();

                    item.FundRevisedDate = new Date(item.FundRevisedDate.split('-')[1] + "/" + item.FundRevisedDate.split('-')[0] + "/" + item.FundRevisedDate.split('-')[2]);
                }
                item.Maturity = item.MaturityBenefit;
                $scope.nontermpopdetailsmobile = true;
                if ($scope.product == 'Investment') {
                    $rootScope.loadcardtemplate1 = '../HomePage/Template/InvestmentMoreInfo.html';
                }
                else {
                    $rootScope.loadcardtemplate1 = '../HomePage/Template/nontermpopdetailsmobile.html';
                }


            }
            else {
                $scope.popdetailsmobile = true;
                //$rootScope.loadcardtemplate1 = '../HomePage/Template/popdetailsmobile.html';
                // $rootScope.loadcardtemplate1 = '../HomePage/Template/popdetailsmobile.html';
                if ($scope.product == 'Health' && $scope.gaProduct != "Health Super") {
                    if ($rootScope.healthdata.Requests[0].IsCovid) {
                        $rootScope.loadcardtemplate1 = '../HomePage/Template/CovidMoreInfo.html';
                    }
                    else {
                        $rootScope.loadcardtemplate1 = '../HomePage/Template/HealthMoreInfo.html';
                    }
                }
                else if ($scope.product == 'Term') {
                    $rootScope.loadcardtemplate1 = '../HomePage/Template/TermMoreInfo.html';
                }
                else {
                    $rootScope.loadcardtemplate1 = '../HomePage/Template/popdetailsmobile.html';
                }
            }

            $rootScope.showloadcardtemplate = false;
            $scope.$root.sharethepage = false;
            $scope.sortfiltermobileshow = false;
            $rootScope.sortfiltermobileshow = false;
            $rootScope.urlDefaultFlag = 1;
            RemoveSearchUrl();
            $rootScope.moreinfoviewflag = 1;
            $location.search('viewmore', 'true');

            document.body.scrollTop = 0; // For Safari
            document.documentElement.scrollTop = 0;
        }
        $scope.HealthDiyFunction = function (flag, SelectSection, item) {
            var aflag = "Health DIY " + flag;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: aflag, value: $scope.productID });

            if (flag == 'ManageDisease') {
                $location.search("DIY7", "true");
                $rootScope.diyviewflag = 1;
                $scope = HealthFactory.ManageDisease($scope);
            }
            if (flag == 'AddDisease') {
                $scope = HealthFactory.AddDisease($scope);
                $scope.Name = undefined;
            }

            if (flag == 'AddOtherDisease')
                $scope = HealthFactory.AddOtherDisease($scope);


            if (flag == 'RemoveDisease')
                $scope = HealthFactory.RemoveDisease($scope, item);

        }


        $scope.changeInvestValue = function (flag) {

            if (flag == 'child') {
                if ($scope.childincometype == "Y") {
                    var x = $scope.selectedincome * 12;
                    $scope.selectedincome = Math.ceil(x / 1000.0) * 1000;

                    if ($scope.selectedincome >= 5000 && $scope.selectedincome <= 5000000) {
                        $scope.annualerror = false;
                        $scope.paymenterror = false;
                    }
                    else {
                        $scope.annualerror = true;
                        $scope.paymenterror = false;
                    }
                }
                else if ($scope.childincometype == "M") {

                    var x = $scope.selectedincome / 12;
                    $scope.selectedincome = Math.floor(x / 100.0) * 100;

                    if ($scope.selectedincome >= 500 && $scope.selectedincome <= 416666) {
                        $scope.annualerror = false;
                        $scope.paymenterror = false;
                    }
                    else {
                        $scope.annualerror = false;
                        $scope.paymenterror = true;
                    }
                }
            }
            else {
                if ($scope.selectedincome == "Y") {
                    var x = $scope.txtActualIncome * 12;
                    $scope.txtActualIncome = Math.ceil(x / 1000.0) * 1000;

                    if ($scope.txtActualIncome >= 5000 && $scope.txtActualIncome <= 5000000) {
                        $scope.annualerror = false;
                        $scope.paymenterror = false;
                    }
                    else {
                        $scope.annualerror = true;
                        $scope.paymenterror = false;
                    }

                }
                else if ($scope.selectedincome == "M") {

                    var x = $scope.txtActualIncome / 12;
                    $scope.txtActualIncome = Math.floor(x / 100.0) * 100;

                    if ($scope.txtActualIncome >= 500 && $scope.txtActualIncome <= 416666) {
                        $scope.annualerror = false;
                        $scope.paymenterror = false;
                    }
                    else {
                        $scope.annualerror = false;
                        $scope.paymenterror = true;
                    }
                }
            }
        }
        $scope.changeInvestValue1 = function () {
            if ($scope.payMode == "Y") {
                var x = $scope.txtActualIncome * 12;
                $scope.txtActualIncome = Math.ceil(x / 1000.0) * 1000;

            }
            else if ($scope.payMode == "M") {

                var x = $scope.txtActualIncome / 12;
                $scope.txtActualIncome = Math.floor(x / 100.0) * 100;


            }
        }



        $scope.DeleteChipFunction = function (flag, SelectSection, item) {
            if (item.value != undefined) { var aitm = item.value + " " + SelectSection + " " + $scope.product; }
            else { var aitm = item + " " + SelectSection + " " + $scope.gaProduct; }
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: aitm, value: $scope.productID });

            if ($scope.product == 'Health') {
                $scope.quotesrequest.Requests[0].IsOffline = true;
                if (item.text == 'Disease' || item.text == 'Feature') {
                    $scope.loadertext = "Fetching best quotes as per your need";
                    $scope.noshowloader = false;
                    $scope.showloader = true;
                    $timeout(function () {
                        $scope = HealthFactory.SetFilterChip($scope, SelectSection, item);
                        $scope.noshowloader = true;
                        $scope.showloader = false;
                        HealthleftpanelDissablefn();
                        if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
                            $scope.policyTermYearFn();
                        }
                    }, 1000);
                }
                else {
                    $scope = HealthFactory.SetFilterChip($scope, SelectSection, item);
                    if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
                        $scope.policyTermYearFn();
                    }
                }
                if (item.text == 'Feature') {
                    var featuredata1 = $filter('filter')($scope.HealthFeatureData, function (d) { return d.text == item.value })[0];
                    $scope.benefit[featuredata1.id] = false;
                }
                else if (item.text == 'Disease') {
                    var featuredata1 = $filter('filter')($scope.HealthSufferrData, function (d) { return d.text == item.value })[0];
                    $scope.suffer[featuredata1.id] = false;
                }
                $scope.afterCallMePop = false
                $rootScope.popsortmobile01 = false;
                $scope.showbtnhealthdiyloader = false;
                if ($scope.DiseaseChip.length == 0 || $scope.DiseaseChip == null || $scope.DiseaseChip == undefined) {
                    $scope.suffer[5] = false;
                }

            }
            else if ($scope.product == 'Term') {
                $scope = TermFactory.SetFilterChip($scope, SelectSection, item, plantype);
                if (item.id != "") {
                    var insertrider = FeatureService.InsertSelectedRider($scope.IGquoteId, item.id);
                    insertrider.then(function (data) {
                    }, function (response) {
                        ServiceRespnse(response);
                    });

                }
                termselectedchip();
                //$scope.noshowloader = false;
                //$scope.showloader = true;
                //$timeout(function () {
                //    var data = ($filter('filter')($scope.termrider, function (d) { return d.RiderCode == item.id }))[0];
                //    if (data != undefined) {
                //        TermFactory.updatepriceonridersidebarselection($scope, data);
                //    }
                //    $scope = TermFactory.SetFilterChip($scope, SelectSection, item, plantype);
                //    if (item.id != "") {
                //        var insertrider = FeatureService.InsertSelectedRider($scope.IGquoteId, item.id);
                //        insertrider.then(function (data) {
                //        }, function (response) {
                //            ServiceRespnse(response);
                //        });

                //    }
                //    termselectedchip();
                //    if (item.id == 3 || item.id == 6) {
                //        MaxCABCal(item.id);
                //    }
                //    $scope.showloader = false;
                //    $scope.noshowloader = true;
                //}, 500);

            }
            else if ($scope.product == 'Critical') {
                $scope = CriticalFactory.SetFilterChip($scope, SelectSection, item);
                var insertrider = FeatureService.InsertCriticalSelectedRider($scope.IGquoteId, item.id);
                insertrider.then(function (data) {
                }, function (response) {
                    ServiceRespnse(response);
                });

            }
            //$scope.Initialzedata();
        }
        $scope.opdHover = function (value, id) {
            if (id == 1)
                $scope.opdshow[value] = true;
            else
                $scope.opdshow[value] = false;

        };
        $scope.GetDisease = function () {
            var diseaseList = $filter('filter')($scope.DiseaseList, function (d) { return d.DiseaseType != "" });
            return diseaseList;
        }

        $scope.ComapreSelectionCheck = function (ItemCheck, index, id) {
            var a = "Compare Selection Check " + $scope.gaProduct;
            $scope.comparequotestemp = $sce.trustAsResourceUrl('../Homepage/commonfiles/emailtemplates/CompareQuotes.htm');
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });
            $scope.Comparebtnloader = false;

            $scope = CommonFactory.ComapreSelectionCheck($scope, ItemCheck, index, id, $timeout);
        }

        $scope.ComapreAllSelectionCheck = function () {
            $scope = CommonFactory.ComapreAllSelectionCheck($scope);
        }
        $scope.ProductCompareSection = function () {
            $scope = CommonFactory.ProductCompareSection($scope);
        }

        $scope.showcomparepopAnimation = "";
        $scope.comparepopAnimation = "";
        function termcompare() {
            var planid = $scope.Compareselection[0].PlanId;
            for (var i = 1; i < $scope.Compareselection.length; i++) {
                planid = planid + ',' + $scope.Compareselection[i].PlanId;
            }
            var ageinmonth = parseInt($scope.AgeTerm * 12);
            if ($scope.product == 'Term') {
                var moreinfodata = FeatureService.GetTermMoreInfoData($scope.quotesrequest.Requests[0], ageinmonth, planid);
                moreinfodata.then(function (response) {
                    for (var i = 0; i < $scope.Compareselection.length; i++) {
                        for (var j = 0; j < response.data.length; j++) {
                            if ($scope.Compareselection[i].PlanId == response.data[j].PlanId) {
                                $scope.Compareselection[i] = angular.extend($scope.Compareselection[i], response.data[j]);
                            }
                        }
                    }
                    $scope.Comparebtnloader = false;
                    comparefn();
                });
            }
            else {
                var SumInsuredMin = $scope.Compareselection[0].SumInsuredMin;
                var moreinfodata = FeatureService.GetHealthMoreInfoData($scope.quotesrequest.Requests[0], ageinmonth, planid, SumInsuredMin);
                moreinfodata.then(function (response) {
                    for (var i = 0; i < $scope.Compareselection.length; i++) {
                        for (var j = 0; j < response.data.length; j++) {
                            if ($scope.Compareselection[i].PlanId == response.data[j].PlanId) {
                                $scope.Compareselection[i] = angular.extend($scope.Compareselection[i], response.data[j]);
                            }
                        }
                    }
                    $scope.Comparebtnloader = false;
                    comparefn();
                });
            }
        }
        function comparefn() {
            var selectInsurer1 = "";
            var a = 'Compare Plans ' + $scope.gaProduct;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            for (var i = 0; i < $scope.Compareselection.length; i++) {

                if ($scope.product == 'Investment' || $scope.product == 'Child' || $scope.product == 'Pension') {
                    selectInsurer1 = selectInsurer1 + $scope.Compareselection[i].Bundles[0].Name + ", ";
                }
                else {
                    selectInsurer1 = selectInsurer1 + $scope.Compareselection[i].PlanName + ", ";
                }

                if (i == $scope.Compareselection.length - 1) {
                    $scope.selectInsurer = selectInsurer1.slice(0, selectInsurer1.length - 2);
                }
            }

            $scope.showcomparepopAnimation = "fadeIn";
            $scope.comparepopAnimation = "bounceInDown";
            $scope.showcomparepop = true; $rootScope.showfooter = false;
            $scope.showcomparepopInner = true;
            $rootScope.showloadcardtemplate = false;

            // console.log($scope.statecity);
            //    // // $scope.$root.scrollhide = "scrollhides";

            if ($scope.device == "Desktop") {
                $rootScope.loadcardtemplate1 = $sce.trustAsResourceUrl('../HomePage/Template/showcomparepop.html');
            }
            else if ($scope.device == "Mobile") {
                $rootScope.loadcardtemplate1 = $sce.trustAsResourceUrl('../HomePage/Template/showcomparepopmobile.html');
            }
            $window.scrollTo(0, 0);
            // $scope.$root.sharethepage = false;
            $scope.sortfiltermobileshow = false;
            $rootScope.urlDefaultFlag = 1;
            RemoveSearchUrl();
            $rootScope.compareviewflag = 1;
            $location.search('comparepop', 'true');
        }
        $scope.HealthCompareSection = function () {
            $rootScope.sharethepage = false;
            $scope.comparequotestemp = $sce.trustAsResourceUrl('../Homepage/commonfiles/emailtemplates/CompareQuotes.htm');
            if (($scope.Compareselection.length > 1 && $scope.Compareselection.length <= 3)) {
                if ($scope.product == 'Term' || $scope.product == 'Health') {
                    $scope.Comparebtnloader = true;
                    termcompare();

                }
                else {

                    comparefn();
                }
            }
            else {
                if ($scope.device == "Desktop") {
                    $scope.textmessage = "Minimum 2 and Maximum 3 products can be compared.";
                }
                else if ($scope.device == "Mobile") {
                    $scope.textmessage = "You have to choose two plans to compare";
                }
                if ($scope.showtoast != true) {
                    $scope.toastmessage('rgb(53, 21, 82)', 'white', '650px', '38px', 2000);
                }
            }
        }
        $scope.closecomparepop = function () {
            $scope.showcomparepopAnimation = "fadeOut";
            $scope.comparepopAnimation = "fadeOutDown";
            $scope.showcomparepop = false; $rootScope.showfooter = true;
            $scope.showcomparepopInner = false;
            $scope.$root.scrollhide = "";
        }
        $scope.selectedItemChange = function () {
            $scope.ShowhospitalError = false;
        }
        $scope.healthNetworkfn = function () {
            if ($scope.user.Network_Hospital != undefined && $scope.user.Network_Hospital != "") {

                $scope.healthleftpanel(2);
                $scope.healthleftpanel(1);
                $scope.ShowhospitalError = false;


                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'Prefered Network Hospital', value: $scope.productID });

            }
            else {
                $scope.ShowhospitalError = true;
            }
        }

        $scope.healthleftpanel1 = function (id, value, text, flag) {
            var atxt = $scope.gaProduct + " Left Panel Disease " + text;

            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: atxt, value: $scope.productID });

            // $scope = HealthFactory.SelectSuffer1($scope, value, text);
            if ($scope.suffer[value] == true) {
                $scope.DiseaseID = $scope.DiseaseID + "," + value;
                $scope.HealthRefineChips.push({ value: text, text: "Disease", check: "Disease" });
                filterdisease.push(value);
                $scope.healthrefine = true;
                $scope = HealthFactory.RefineByDisease1($scope, value, text);
            }
            else {
                $scope.DiseaseID = $scope.DiseaseID.replace("," + value, "");
                var a = { value: text, text: "Disease", check: "Disease" };
                var idx1 = filterdisease.indexOf(value);
                for (var i = 0; i < $scope.HealthRefineChips.length; i++) {
                    if ($scope.HealthRefineChips[i].value == text) {
                        $scope.HealthRefineChips.splice(i, 1);
                    }
                }
                if (idx1 > -1) {
                    filterdisease.splice(idx1, 1);
                }
                // $scope.showloader = true

                if (filterdisease.length > 0) {
                    $scope.Quotes_Data = angular.copy($scope.QuotesExtra);

                    $scope.healthrefine = true;
                    $scope = HealthFactory.RefineByDisease1($scope, value, text);
                }
                else {
                    $timeout(function () {
                        $scope.Quotes_Data = angular.copy(testdata);
                        console.log($scope.Quotes_Data);
                        $scope = DataFactory.GetTotalPlan($scope);
                    }, 500);

                }

            }


        }

        $scope.healthleftpanel = function (id, value, text, flag, disable) {
            $scope.quotesrequest.Requests[0].IsOffline = true;
            if ($scope.HealthPlanWeightageValue == undefined) {
                var promise_request = FeatureService.GetHealthWeightage($scope);
                promise_request.then(function (pl) {
                    $scope.HealthPlanWeightageValue = angular.fromJson(pl.data);
                    healthleftpanel1(id, value, text, flag, disable);
                });
            }
            else {
                healthleftpanel1(id, value, text, flag, disable);
            }
        }
        function healthleftpanel1(id, value, text, flag, disable) {
            if (flag == 1) {
                $scope.Notdiyother = true;
                $scope.Notdiyother1 = true;
            }
            else {
                $scope.Notdiyother = false;
                $scope.Notdiyother1 = false;

            }
            if (id == 1) {
                $scope = HealthFactory.HealthRefineSearch($scope, value);
                //$scope.Initialzedata();

            }
            else if (id == 2) {
                $scope = HealthFactory.AddHospital($scope);
                $scope.user.Network_Hospital = undefined;
                $scope.NetworkHospitalName = undefined;
                $scope.Hospitalname = undefined;

                //   $scope.Initialzedata(); 
            }
            else if (id == 3) {
                $scope = HealthFactory.RemoveHospital($scope, value);

                // $scope.Initialzedata();
            }
            else if (id == 4) {


                var atxt = $scope.gaProduct + " Left Panel Disease " + text;

                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: atxt, value: $scope.productID });

                $scope.step6show = false;
                $scope.showbtnhealthdiyloader = false;
                if (text == 'Others') {
                    $scope.HealthdiySrc = '../HomePage/Template/popsortmobile01.html';
                    var GetDiseaseList = FeatureService.GetDiseaseList();
                    GetDiseaseList.then(function (pl) {
                        $scope.DiseaseList = angular.fromJson(pl.data);
                        $rootScope.popsortmobile = true;
                        if ($scope.suffer[value] == true) {
                            if ($scope.userMobileNumber != undefined) {
                                var resendFlag = CommonService.SendOTPReboot($scope, globals);
                                resendFlag.then(function (result) {
                                    console.log(result);
                                    var token = result.data.TokenId;
                                    if (result.data.IsVerified == true) {
                                        $scope.CallMe = "Call Me";
                                    }
                                    else {
                                        $scope.CallMe = "Want to speak with an Insurance Expert";
                                    }
                                });
                            }
                            else {
                                $scope.CallMe = "Want to speak with an Insurance Expert";
                            }
                        }
                        $scope = HealthFactory.CheckDisease($scope, value, text, 'Menu', flag, $rootScope);
                        if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
                            $scope.policyTermYearFn();
                        }
                    });

                }

                else {
                    $scope.loadertext = "Fetching best quotes as per your need";
                    $scope.noshowloader = false;
                    $scope.showloader = true;
                    $timeout(function () {
                        $scope = HealthFactory.SelectSuffer($scope, value, text);
                        HealthleftpanelDissablefn();
                        if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
                            $scope.policyTermYearFn();
                        }
                        $scope.noshowloader = true;
                        $scope.showloader = false;
                    }, 1000);

                }

                //if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
                //    $scope.policyTermYearFn();
                //}
            }
            else if (id == 5 && disable != true) {


                var atxt = $scope.gaProduct + " Left Panel Features " + text;

                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: atxt, value: $scope.productID });
                $scope.loadertext = "Fetching best quotes as per your need";
                $scope.noshowloader = false;
                $scope.showloader = true;
                $timeout(function () {
                    $scope = HealthFactory.SelectBenefit($scope, value, text);
                    HealthleftpanelDissablefn();
                    $scope.noshowloader = true;
                    $scope.showloader = false;
                    if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
                        $scope.policyTermYearFn();
                    }
                }, 1000);

                //if ($scope.device == "Mobile" || $scope.gaProduct == "Health1" || $scope.gaProduct == "Health Super") {
                //    $scope.policyTermYearFn();
                //}
            }
            else if (id == 6 && disable != true) {

                $scope.step6show = true;
                $scope.showbtnhealthdiyloader = false;
                if ($scope.suffer[value] == true) {
                    if ($scope.userMobileNumber != undefined) {
                        var resendFlag = CommonService.SendOTPReboot($scope, globals);
                        resendFlag.then(function (result) {
                            console.log(result);
                            var token = result.data.TokenId;

                            if (result.data.IsVerified == true) {
                                $scope.CallMe = "Call Me";

                            }
                            else {
                                $scope.CallMe = "Want to speak with an Insurance Expert";
                            }

                        }, function (response) {
                            ServiceRespnse(response);
                        });

                    }
                    else {
                        $scope.CallMe = "Want to speak with an Insurance Expert";
                    }
                }
                $scope = HealthFactory.CheckDisease($scope, value, text, undefined, undefined, $rootScope);

                //     $scope.Initialzedata();                           
            }
            if (disable == true) {
                if (id == 5) {
                    $scope.benefit[value] = false
                }
                if (id == 6) {
                    $scope.suffer[value] = false
                }
            }
        }

        /*-------------------------------------------
        created for  : Pension specific code
        created date :13-01-2017
        ---------------------------------------------*/
        $scope.calculateAge = function (dob) {
            var dob1 = dob.toString().split("-");
            var dob2 = dob1[1] + "-" + dob1[0] + "-" + dob1[2];
            var ageDiff = Date.now() - new Date(dob2);
            var ageDate = new Date(ageDiff);
            return Math.abs(ageDate.getUTCFullYear() - 1970);

        }

        //Get DOB by Age
        $scope.GetDobByAge = function (age) {
            var currentTime = new Date();
            if ($rootScope.CurrenDateTimeService != undefined) {
                currentTime = new Date($rootScope.CurrenDateTimeService);
            }
            var month = currentTime.getMonth() + 1
            var day = currentTime.getDate()
            var year = currentTime.getFullYear() - parseInt(age);
            var DOB = day + "-" + month + "-" + year;
            return DOB;
        }
        /*-------------------------------------------
        created for  : term left panel code
        created date :16-12-2016
        created by   : atul kr. singh
        ---------------------------------------------*/

        $scope.chwck = function () {

            console.log($scope.ridermodel);
        }


        $scope.selectedppt = function (value) {
            if ($scope.LimitedPayingTerm != value) {
                $scope.LimitedPayingTerm = value;
                $scope.termleftpanel('limitedpayment');
                var a = $scope.gaProduct + " paying term " + value + "selection";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "paying term selection for Term" });

            }
        }

        $scope.selectedpt = function (value) {
            if ($scope.PolicyTermPeriod != value) {
                $scope.PolicyTermPeriod = value;
                $scope.termleftpanel('changepolicyterm', value);
                var a = $scope.gaProduct + " policy term " + value + "selection";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "policy term selection for Term" });

            }
        }

        $scope.termleftpanel = function (methodname, value, sortid, item) {

            if ($scope.product == "Term") {
                if (methodname == "sumassuredcalculation" && $scope.sumassured != undefined && $scope.sumassured != null) {
                    if (value != undefined) {
                        if (value.sumassuredtext != undefined) {
                            var arr = value.sumassuredtext.split(" ");
                            if (arr[1].toLowerCase() == "lacs" || arr[1].toLowerCase() == "l") {
                                $scope.sumassured.summassuredvalue = parseFloat(arr[0]) * 100000;
                            }
                            else if (arr[1].toLowerCase() == "cr") {
                                $scope.sumassured.summassuredvalue = parseFloat(arr[0]) * 10000000;
                            }
                        }
                    }

                    var a = $scope.gaProduct + ' Term Sum Assured';
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


                    if ($scope.sumassured.summassuredvalue != undefined && $scope.sumassured.summassuredvalue != NaN && $scope.sumassured.summassuredvalue != "") {
                        $scope.sumassurederror = false;
                        $scope.quotes_userdata.sumassured = $scope.sumassured.summassuredvalue;
                        $scope.SumAssured = $scope.sumassured.summassuredvalue;
                        $scope.quotesrequest.Requests[0].SumAssured = parseInt($scope.quotes_userdata.sumassured);
                        // $localStorage.quotes_userdata = $scope.quotes_userdata; // storing user data in local variable 
                        // $scope.mdrider = [];
                        $scope.userselectionrider = [];
                        // plantype = null;
                        $scope.Initialzedata();
                    }
                    else {
                        $scope.sumassurederror = true;
                    }
                }
                if (methodname == "changepolicyterm") {

                    if (value != undefined && value != NaN) {
                        $scope.PolicyTermPeriod = value;
                        if ($scope.quotesrequest != undefined) {
                            var a = $scope.gaProduct + " Term Cover Upto";
                            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


                            if ($scope.PolicyTermPeriod - $scope.AgeTerm < 5) {
                                $scope.quotesrequest.Requests[0].PolicyTerm = 0;
                                $scope.quotes_userdata.PolicyTerm = 0;
                            }
                            else {
                                $scope.quotesrequest.Requests[0].PolicyTerm = parseInt($scope.PolicyTermPeriod - $scope.AgeTerm);
                                $scope.quotes_userdata.PolicyTerm = parseInt($scope.PolicyTermPeriod - $scope.AgeTerm);
                            }
                            // $localStorage.quotes_userdata = $scope.quotes_userdata;
                            $scope.userselectionrider = [];
                            $scope.LimitedPayTerm = [];
                            Termlimitedoption();
                            if ($scope.PolicyTermPeriod == 100) {
                                for (var i = 0; i < $scope.planType.length; i++) {
                                    if ($scope.planType[i].Id == 24) {
                                        plantype = $scope.planType[i];
                                        $scope.quotesrequest.Requests[0].PlanTypeId = 24;
                                        $scope.DIYPPT1 = $scope.AgeTerm + 5;
                                        $scope.DIYPPT2 = 75;
                                        $scope.DIYPPT3 = 100;
                                        //$scope.temp100 = true;
                                    }
                                }
                            }
                            else {
                                //$scope.temp100 = false;                                
                                if (plantype != undefined && plantype != null) {
                                    if (plantype.Id == 24) {
                                        plantype = null;
                                        $scope.quotesrequest.Requests[0].PlanTypeId = 25;
                                        TermPTandPPTDiy();
                                    }
                                }
                            }
                            $scope.Initialzedata();
                            $scope.wholelifedisable = false;

                        }
                    }
                }
            }
            if (methodname == "riderselection") {
                var atxt = $scope.gaProduct + ' Term Filter ' + item.RiderName;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: atxt, value: $scope.productID });
                //if ((item.RiderCode == 3 || item.RiderCode == 6) && $scope.termfeature[item.RiderCode] != false) {
                //    $scope.diabeticsuffer = '';
                //    $scope.LeftRiderData = item;
                //    $scope.TermSliderpopupSrc = '../HomePage/Template/TermSliderpopup.html';
                //    $scope.showdiabeticpopleftpanel = true;
                //}
                //else {
                //    $scope.LeftRiderFn(methodname, value, sortid, item);
                //}
                TermFactory.FiltersByFeatures($scope, item);
                if (item.Id != 26)
                    var insertrider = FeatureService.InsertSelectedRider($scope.IGquoteId, item.RiderCode);
                insertrider.then(function (data) {
                }, function (response) {
                    ServiceRespnse(response);
                });
                termselectedchip();
            }
            if (methodname == "howmuchcoverdoineed") {

                var atxt = $scope.gaProduct + ' Filter ' + methodname;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: atxt, value: $scope.productID });

                $scope = TermFactory.calculatehowmuchcover($scope);
            }
            if (methodname == "limitedpayment") {
                if ($scope.LimitedPayingTerm != undefined && $scope.LimitedPayingTerm != NaN) {
                    $scope.userselectionrider = [];
                    $scope.quotesrequest.Requests[0].PremiumPayingTerm = $scope.LimitedPayingTerm;
                    $scope.quotesrequest.Requests[0].IsPremiumPayingTerm = false;
                    $scope.wholelifedisable = false;

                    if ($scope.LimitedPayingTerm != 0) {
                        $scope.quotesrequest.Requests[0].PremiumPayingTerm = $scope.LimitedPayingTerm - $scope.AgeTerm;
                    }

                    if ($scope.LimitedPayingTerm < $scope.PolicyTermPeriod) {
                        $scope.quotesrequest.Requests[0].IsPremiumPayingTerm = true;
                        $scope.wholelifedisable = true
                        var val1 = $filter('filter')($scope.HealthRefineChips, function (d) { return d.id == 24 });
                        if (val1.length > 0) {
                            $scope.DeleteChipFunction('SetFilterChip', 'delete', val1[0]);
                        }
                    }
                    // plantype = null;
                    $scope.Initialzedata();
                }
            }

            if (methodname == "ProceedBtnClick") {
                var count = 0;
                var actualsumassured = '';
                var sumassured = $scope.sumassuredcalculate;
                while (sumassured >= 1) {
                    sumassured = sumassured / 10;
                    count++;
                }
                if (count <= 7) {
                    actualsumassured = (Math.round(parseFloat($scope.sumassuredcalculate / 100000).toFixed(2))) * 100000;
                }
                else {
                    actualsumassured = (Math.round(parseFloat($scope.sumassuredcalculate / 10000000).toFixed(2))) * 10000000;
                }
                $scope.sumassured = TermFactory.sumassuredconverttotext($scope, actualsumassured);
                $scope.quotes_userdata.sumassured = actualsumassured;
                $scope.quotesrequest.Requests[0].SumAssured = parseInt($scope.quotes_userdata.sumassured);
                // $localStorage.quotes_userdata = $scope.quotes_userdata; // storing user data in local variable 
                if ($scope.CheckActualAmount > 0) {
                    $scope.Initialzedata();
                    $scope.ngShowHowMuchCover = false;
                    $scope.template("CoverCalculation", false);
                }
            }
        }
        $scope.LeftRiderFn = function (methodname, value, sortid, item) {
            $scope.showdiabeticpopleftpanel = false;
            $scope.showloader = true;
            $scope.noshowloader = false;
            $timeout(function () {
                if (item.RiderCode == 19) {
                    $scope.IncreasingSAbyleftpanel($scope.termfeature[item.RiderCode]);
                }
                else {
                    TermFactory.updatepriceonridersidebarselection($scope, item);
                }
                TermFactory.FiltersByFeatures($scope, item);
                if (item.Id != 26)
                    var insertrider = FeatureService.InsertSelectedRider($scope.IGquoteId, item.RiderCode);
                insertrider.then(function (data) {
                }, function (response) {
                    ServiceRespnse(response);
                });
                termselectedchip();
                if (item.RiderCode == 3 || item.RiderCode == 6) {
                    MaxCABCal(item.RiderCode);
                }
                $scope.showloader = false;
                $scope.noshowloader = true;
            }, 300);

        }

        $scope.criticalleftpanel = function (methodname, value, sortid, item) {

            var a = "Critical Left Panel " + methodname;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


            if ($scope.product == "Critical") {
                if (methodname == "sumassuredcalculation" && $scope.sumassured != undefined && $scope.sumassured != null) {
                    if (value != undefined) {
                        if (value.sumassuredtext != undefined) {
                            var arr = value.sumassuredtext.split(" ");
                            if (arr[1].toLowerCase() == "lacs" || arr[1].toLowerCase() == "l") {
                                $scope.sumassured.summassuredvalue = parseFloat(arr[0]) * 100000;
                            }
                            else if (arr[1].toLowerCase() == "crore") {
                                $scope.sumassured.summassuredvalue = parseFloat(arr[0]) * 10000000;
                            }
                        }
                    }

                    if ($scope.sumassured.summassuredvalue != undefined && $scope.sumassured.summassuredvalue != NaN && $scope.sumassured.summassuredvalue != "") {
                        $scope.sumassurederror = false;
                        $scope.quotes_userdata.sumassured = $scope.sumassured.summassuredvalue;
                        $scope.SumAssured = $scope.sumassured.summassuredvalue;
                        $scope.quotesrequest.Requests[0].SumAssured = parseInt($scope.quotes_userdata.sumassured);
                        // $localStorage.quotes_userdata = $scope.quotes_userdata; // storing user data in local variable 
                        $scope.mdrider = [];
                        $scope.userselectionrider = [];
                        $scope.Initialzedata();
                    }
                    else {
                        $scope.sumassurederror = true;
                    }
                }
                if (methodname == "changepolicyterm") {

                    if ($scope.PolicyTermPeriod != undefined && $scope.PolicyTermPeriod != NaN) {
                        if ($scope.quotesrequest != undefined) {
                            $scope.quotesrequest.Requests[0].PolicyTerm = parseInt($scope.PolicyTermPeriod);
                            $scope.quotes_userdata.PolicyTerm = parseInt($scope.PolicyTermPeriod);
                            // $localStorage.quotes_userdata = $scope.quotes_userdata;
                            $scope.mdrider = [];
                            $scope.userselectionrider = [];
                            $scope.Initialzedata();
                        }
                    }
                }
            }

            if (methodname == "riderselection") {

                CriticalFactory.FiltersByFeatures($scope, item, methodname);
                //CriticalFactory.updatepriceonridersidebarselection($scope, item);
                var insertrider = FeatureService.InsertCriticalSelectedRider($scope.IGquoteId, item.DiseaseID);
                insertrider.then(function (data) {
                }, function (response) {
                    ServiceRespnse(response);
                });

            }


            if (methodname == "sortbymonthlyIncome") {

                $scope = CriticalFactory.sortbymonthlyIncome($scope, value);
                var insertrider = FeatureService.InsertCriticalSelectedRider($scope.IGquoteId, value.Id);
                insertrider.then(function (data) {
                }, function (response) {
                    ServiceRespnse(response);
                });

            }
            if (methodname == "ProceedBtnClick") {
                var count = 0;
                var actualsumassured = '';
                var sumassured = $scope.sumassuredcalculate;
                while (sumassured >= 1) {
                    sumassured = sumassured / 10;
                    count++;
                }
                if (count <= 7) {
                    actualsumassured = (Math.round(parseFloat($scope.sumassuredcalculate / 100000).toFixed(2))) * 100000;
                }
                else {
                    actualsumassured = (Math.round(parseFloat($scope.sumassuredcalculate / 10000000).toFixed(2))) * 10000000;
                }
                $scope.sumassured = TermFactory.sumassuredconverttotext($scope, actualsumassured);
                $scope.quotes_userdata.sumassured = actualsumassured;
                $scope.quotesrequest.Requests[0].SumAssured = parseInt($scope.quotes_userdata.sumassured);
                // $localStorage.quotes_userdata = $scope.quotes_userdata; // storing user data in local variable 
                if ($scope.CheckActualAmount > 0) {
                    $scope.Initialzedata();
                    $scope.ngShowHowMuchCover = false;
                    $scope.template("CoverCalculation", false);
                }
            }
        }
        $scope.getsumassuredkeyup = function () {
            if ($scope.product == "Term") {
                //   var userincomeinlacs = parseFloat(($scope.quotes_userdata.actualincome / 100000).toFixed(0) * 100000);
                var userincomeinlacs = $scope.quotes_userdata.actualincome;
                //TermFactory.GetSumAssuredlist($scope, userincomeinlacs);
            }
            else if ($scope.product == "Critical") {
                CriticalFactory.GetSumAssuredlist($scope, parseInt($scope.quotes_userdata.actualincome));
            }
            console.log($scope.sumassuredlist);
            console.log($scope.sumassured);
            console.log($scope.sumassuredlisttemp);
        }
        /*-----------------------------------
        created for: proceed button click for how much cover do i need
        created date: 14-12-2016
        created by  : atul kr. singh
        ------------------------------------*/
        $scope.ProceedBtnClick = function () {
            var data = TermFactory.sumassuredconverttotext($scope, $scope.sumassuredcalculate);
            $scope = data;
            // $localStorage.quotes_userdata = $scope.quotes_userdata; // storing user data in local variable
            $scope.Initialzedata();
        };

        /*-------------------------------------
        created for : clear button sum assured for how much cover do i need
        created date: 14-12-20161
        created by  : atul kr. singh
        ---------------------------------------*/
        $scope.ClearBtn = function () {
            $scope.txtAnnualIncome = null;
            $scope.txtCurrentCover = null;
            $scope.submitted = false;
        };
        /*-----------------------------------------
        Email Section Management
        -----------------------------------------*/
        /*------------------------------------------------- 
        Checking whether Email is provided by customer or not
        ---------------------------------------------------*/
        $scope.CallEmailSendFunction = function (methodName, item) {

            if (methodName != undefined) {
                var a = methodName + ' Email ' + $scope.gaProduct;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });
            }
            $scope.methodName = methodName;
            $scope.emailerror = false;
            $location.search("emailpop", "true");
            $rootScope.emailviewflag = 1;
            if (item != undefined && item != null) {
                $scope.PlanSelected = item;
            }
            else {
                $scope.PlanSelected = $scope.item1;
            }
            if ($scope.quotes_userdata != undefined || $scope.quotes_userdata != "") {
                if ($scope.quotes_userdata.Email == undefined || $scope.quotes_userdata.Email == "") {
                    $scope.Emailpopupshow = true;
                    $rootScope.scrollhide = 'scollClass';
                    $scope.template("Emailpopup", true);
                    $scope.showsharepopup = false;
                }
                else {

                    $scope.Email = $scope.quotes_userdata.Email;

                    $scope.userEmailID = $scope.Email;

                    if ($scope.methodName == 'AllQuotes') {

                        $scope.showsharepopup = false;
                        $scope.template("Sharepop", false);
                        $scope.SendAllQuotes();

                    }



                    else if ($scope.methodName == 'sendsinglequotes') {
                        if (item != undefined && item != null) {
                            $scope.SendThisQuote(item);
                        }
                        else {
                            $scope.SendThisQuote($scope.item1);
                        }


                    }
                    else if ($scope.methodName == 'CompareQuotes') {


                        $scope.SendCompareQuotes();

                    }

                }

            }
            else {
                $scope.Emailpopupshow = true;
                $rootScope.scrollhide = 'scollClass';
                $scope.template("Emailpopup", true);
                $scope.showsharepopup = false;
            }
        }
        $scope.SendCompareQuotes = function () {
            var data = EmailFactory.CompareQuotesSend($scope);
            $scope = data;
            var SendEmailResult = FeatureService.SendServiceMails($scope);
            SendEmailResult.then(function (pl) {
                $scope.thanksemailPopup = true;
                $scope.template("Thanks", true);
            }, function (response) {
                ServiceRespnse(response);
            });

        }



        /*------------------------------------------------- 
        Calling method for which quotes has been asked
        ---------------------------------------------------*/
        $scope.SubmitSendMail = function () {



            var EmailValid = ValidationFactory.emailvalidate($scope.Email);
            var EmptyEmail = ValidationFactory.required($scope.Email);
            if (EmailValid == "True" && EmptyEmail == "True") {
                $rootScope.scrollhide = '';
                $scope.emailerror = false;
                // $localStorage.quotes_userdata.Email = $scope.Email;
                $scope.userEmailID = $scope.Email;
                if ($scope.methodName == 'AllQuotes')
                    $scope.SendAllQuotes();
                else if ($scope.methodName == 'sendsinglequotes')
                    $scope.SendThisQuote($scope.PlanSelected);
                else if ($scope.methodName == 'CompareQuotes')
                    $scope.SendCompareQuotes();
                $scope.Emailpopupshow = false;
                $rootScope.scrollhide = '';
                $scope.template("Emailpopup", false);
                if ($location.$$search.emailpop) {
                    delete $location.$$search.emailpop;
                    $location.$$compose();
                }
            }
            else {
                $scope.emailerror = true;
            }

        }
        if ($scope.methodName != undefined) {
            var aflag = $scope.methodName + " Submit " + $scope.gaProduct;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: aflag, value: $scope.productID });
        }


        /*---------------------------------------------
        created for : send single quotes email
        created by  : atul kr. singh
        created date: 15-12-2016
        -----------------------------------------------*/
        $scope.SendThisQuote = function (item) {
            if ($scope.product == "Term") {
                var emailBody = EmailFactory.sendsinglequotesterm($scope, item);
                $scope.MailSubject = 'Your saved quotes for Term Insurance';
            }
            if ($scope.product == "Health") {

                var emailBody = EmailFactory.sendsinglequoteshealth($scope, item);
                $scope.MailSubject = 'Your saved quotes for Health Insurance';

            }
            if ($scope.product == "Travel") {
                var emailBody = EmailFactory.sendsinglequotestravel($scope, item);
                $scope.MailSubject = 'Your saved quotes for Travel Insurance';

            }

            if ($scope.product == "Investment") {
                var emailBody = EmailFactory.sendsinglequotesinvestment($scope, item);
                $scope.MailSubject = 'Your saved quotes for Investment Insurance';
            }
            if ($scope.product == "Pension") {
                var emailBody = EmailFactory.sendsinglequotespension($scope, item);
                $scope.MailSubject = 'Your saved quotes for Pension Insurance';
            }
            if ($scope.product == "Child") {
                var emailBody = EmailFactory.sendsinglequoteschild($scope, item);
                $scope.MailSubject = 'Your saved quotes for Child Insurance';
            }
            if ($scope.product == "Critical") {
                var emailBody = EmailFactory.sendsinglequotescritical($scope, item);
                $scope.MailSubject = 'Your saved quotes for Critical Insurance';
            }

            var SendEmailResult = FeatureService.SendServiceMails($scope);
            SendEmailResult.then(function (pl) {
                var updatedetails = FeatureService.UpdateCustomerDetails($scope);
                updatedetails.then(function (data) {
                    $scope.thanksemailPopup = true;
                    $scope.template("Thanks", true);
                }, function (response) {
                    ServiceRespnse(response);
                });

            }, function (response) {
                ServiceRespnse(response);
            });


        }
        /*---------------------Send All Quotes Email--------------------------*/
        /*-------------------------------------------------
        created for : function of send all email quotes
        --------------------------------------------------*/
        $scope.SendAllQuotes = function () {
            var data = EmailFactory.AllQuotesEncrypt($scope);
            $scope = data;
            var SendEmailResult = FeatureService.SendServiceMails($scope);
            SendEmailResult.then(function (pl) {
                var updatedetails = FeatureService.UpdateCustomerDetails($scope);
                updatedetails.then(function (data) {
                    $scope.thanksemailPopup = true;
                    $scope.template("Thanks", true);
                }, function (response) {
                    ServiceRespnse(response);
                });

            }, function (response) {
                ServiceRespnse(response);
            });


        }
        $scope.closeSliderpop = function (riderslider, item) {
            $rootScope.silderpopupforterm = false;
            $rootScope.scrollhide = '';

        }
        $scope.OpenPremiumBreakupPop = function (flag, value) {
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Premium Breakup", value: $scope.productID });

            //  $rootScope.scrollhide = 'scollClass';

            var breakup = TwowheelerFactory.PremiumBreak($rootScope, $scope, flag, value, "-1", $scope.quotesdata);
            if (flag == true) {
                $rootScope.scrollmotor = "scrollmotor1";
            }
            else {
                $rootScope.scrollmotor = '';
            }
            $scope = breakup;
            $scope.template("PremiumDetails", flag);
            if (flag == false) {
                $scope.historyback("premiumbreak");
                $rootScope.scrollhide = '';
            }
            else {
                $location.search("PremiumBreakup", "true");
                $rootScope.premiumviewflag = 1;
            }
            // focusOnFiled(Motorinsureid);
        }



        $rootScope.showleadpopupAnimation = "";
        $scope.GetLead = function (item, flag, flag1) {
            if ($scope.quotesrequest.Requests[0].IsRenewal == true && $scope.quotesrequest.Requests[0].PreviousInsurerID == item.InsurerId) {
                var moreinfodata = QuoteService.AssignRenewalLead($scope.quotesrequest.IGQuoteId);
                moreinfodata.then(function (response) {
                    $window.location.href = $scope.quotesrequest.Requests[0].RenewalUrl;
                });
            }
            else if (flag1 == 1) {
                if (item.ApplyPanNumberDiscount) {
                    $scope.openkotakpopup(item, flag, flag1);
                }
                else {
                    $scope.getleadcall(item, flag, flag1);
                }
                // $scope.getleadcall(item, flag, flag1);
            }
            else {
                if ($scope.Quotesbreakingdays != $scope.quotesrequest.Requests[0].BreakingDays) {
                    $scope.quotesrequest.Requests[0].PreviousPolicyEndDate = JSON.parse(DataFactory.stringifyWcf($scope.expdate + '-' + $scope.expmonth + '-' + $scope.expyear));
                    $scope.quotesrequest.Requests[0].RegistrationDate = JSON.parse(DataFactory.stringifyWcf($scope.regdate + '-' + $scope.regmonth + '-' + $scope.regyear));
                    $scope.lazyloadcycle = 0;
                    $scope.quotesrequest.Requests[0].PolicyTerm = $scope.selectedmotorplan.PolicyTerm;
                    $scope.prePolicydetails1 = false;
                    $scope.showbtnloader = false;
                    $rootScope.prePolicydetails = true;
                    $scope.premiumchangepop = true;
                    $scope.premiumchangepoptext = "Policy expiry date";
                    $rootScope.prePolicydetails = false;
                    $scope.noshowloader = true;
                    $scope.Initialzedata();
                }
                else {
                    $scope.quotesrequest.Requests[0].InsurerIds = [$scope.selectedmotorplan.InsurerId];
                    $scope.quotesrequest.Requests[0].PolicyTerm = $scope.selectedmotorplan.PolicyTerm;

                    if (($scope.selectedmotorplan.InsurerNameWithPlan).toLowerCase() == "tata aig pearl +")
                        $scope.quotesrequest.Requests[0].QuoteCycle = 4;
                    else if (($scope.selectedmotorplan.InsurerNameWithPlan).toLowerCase() == "tata aig pearl")
                        $scope.quotesrequest.Requests[0].QuoteCycle = 3;
                    else if (($scope.selectedmotorplan.InsurerNameWithPlan).toLowerCase() == "tata aig gold")
                        $scope.quotesrequest.Requests[0].QuoteCycle = 2;
                    else if (($scope.selectedmotorplan.InsurerNameWithPlan).toLowerCase() == "tata aig sapphire plus")
                        $scope.quotesrequest.Requests[0].QuoteCycle = 6;
                    else if (($scope.selectedmotorplan.InsurerNameWithPlan).toLowerCase() == "tata aig sapphire ++")
                        $scope.quotesrequest.Requests[0].QuoteCycle = 7;
                    else if (($scope.selectedmotorplan.InsurerNameWithPlan).toLowerCase() == "tata aig sapphire")
                        $scope.quotesrequest.Requests[0].QuoteCycle = 5;
                    else if (($scope.selectedmotorplan.InsurerNameWithPlan).toLowerCase() == "tata aig silver")
                        $scope.quotesrequest.Requests[0].QuoteCycle = 1;


                    $scope.quotesapireq = QuoteService.Quotes_Service1($scope.quotesrequest, 1, $scope);

                    $scope.quotesapireq.then(function (result) {
                        console.log(result);
                        result.data = angular.fromJson(result.data);
                        // $scope.historyback("lead");
                        if (result.data.Quotes != undefined && result.data.Quotes != null && result.data.Errors.length == 0) {
                            var pl = 0;
                            for (var QL = 0; QL < result.data.Quotes.length; QL++) {
                                if (result.data.Quotes[QL].InsurerId == $scope.selectedmotorplan.InsurerId && result.data.Quotes[QL].InsurerNameWithPlan == $scope.selectedmotorplan.InsurerNameWithPlan) {
                                    pl = angular.copy(QL);
                                }
                            }
                            if (result.data.Quotes[pl].Bundles[0].PayablePremium == $scope.selectedmotorplan.Bundles[0].PayablePremium && result.data.Quotes[pl].IDV == $scope.selectedmotorplan.IDV) {
                                if (item.ApplyPanNumberDiscount) {
                                    $scope.openkotakpopup(item, flag, flag1);
                                }
                                else {
                                    $scope.getleadcall(item, flag, flag1);
                                }
                                // $scope.getleadcall(item, flag, flag1);
                                //                                $scope.showbtnloader = false;


                            }
                            else {
                                //$rootScope.prePolicydetails = false;
                                $scope.prePolicydetails1 = false;
                                $scope.lazyloadcycle = 0;
                                $scope.showbtnloader = false;
                                $scope.premiumchangepop = true;
                                $scope.premiumchangepoptext = "Premium";
                                $scope.noshowloader = true;
                                $scope.Initialzedata();
                            }

                        }
                        else {
                            $rootScope.prePolicydetails = false;
                            $rootScope.scrollhide = '';
                            $scope.lazyloadcycle = 0;
                            $scope.noshowloader = false;
                            // $scope.totalplanlength = 0;
                            $scope.showloader = true;
                            $scope.Initialzedata();
                        }



                    }, function (response) {
                        ServiceRespnse(response);
                    });

                }
            }

        }

        $scope.getleadcall = function (item, flag, flag1) {
            if ((item.InsurerId == 1 && $scope.product == 'Car') || (item.InsurerId == 6)) {
                $scope.InsurerImage_zerodept = item.InsurerImage;
                $scope.InsurerName_zerodept = item.InsurerName;
                $scope.AddonNameSelected = ""
                var count = 0;
                for (var i = 0; i < item.addonavl.length; i++) {

                    if ((item.InsurerName + item.addonavl[i].Name).match("Zero Depreciation")) {
                        if ($scope.addonsmodels[item.InsurerNameWithPlan + item.PolicyTerm + item.InsurerName + item.addonavl[i].Name]) {
                            $scope.AddonNameSelected = "Zero Depreciation";

                            count++;
                        }
                    }

                    if (item.InsurerId == 6 && $scope.product == "Car") {
                        if ((item.InsurerName + item.addonavl[i].Name).match("Tyre Cover")) {
                            if ($scope.addonsmodels[item.InsurerNameWithPlan + item.PolicyTerm + item.InsurerName + item.addonavl[i].Name]) {
                                if (count > 0) {
                                    $scope.AddonNameSelected = $scope.AddonNameSelected + " + Tyre Cover";
                                }
                                else {
                                    $scope.AddonNameSelected = "Tyre Cover";
                                }

                                count++;
                            }
                        }
                        if ((item.InsurerName + item.addonavl[i].Name).match("Engine Protector")) {
                            if ($scope.addonsmodels[item.InsurerNameWithPlan + item.PolicyTerm + item.InsurerName + item.addonavl[i].Name]) {
                                if (count > 0) {
                                    $scope.AddonNameSelected = $scope.AddonNameSelected + " + Engine Protector";
                                }
                                else {
                                    $scope.AddonNameSelected = "Engine Protector";
                                }
                                count++;
                            }
                        }
                        if ((item.InsurerName + item.addonavl[i].Name).match("Invoice Cover")) {
                            if ($scope.addonsmodels[item.InsurerNameWithPlan + item.PolicyTerm + item.InsurerName + item.addonavl[i].Name]) {
                                if (count > 0) {
                                    $scope.AddonNameSelected = $scope.AddonNameSelected + " + Invoice Cover";
                                }
                                else {
                                    $scope.AddonNameSelected = "Invoice Cover";
                                }
                                count++;
                            }
                        }
                    }
                }
                if (count > 0 && $scope.newmotorshow) {
                    $scope.openhdfcpopup = true;
                    $scope.ZeroDepcheck = null;
                    $scope.ZeroDepcheckquestion = true;
                    $scope.proceedpop = true;
                    $scope.template("HdfcZeroDept", true);
                    $scope.selectedinsurerplan = item;
                    $scope.selectedinsurerindex = flag;
                }
                else
                    $scope.GetLeadPop(item, flag);
            }
            else
                $scope.GetLeadPop(item, flag);
        }

        $scope.closehdfcpop = function () {
            $scope.openhdfcpopup = false;
            $scope.proceedpop = false;
            $scope.ZeroDeptpop = false;
            $scope.template("HdfcZeroDept", false);
        }
        $scope.Continupremium = function () {
            $scope.premiumchangepop = false;
            $scope.prePolicydetails1 = false;
            $rootScope.prePolicydetails = false;
            $rootScope.scrollhide = '';
        }
        $scope.proceed = function (flag) {
            if (flag == 1) {
                if ($scope.ZeroDepcheck.toLowerCase() == "no") {
                    $scope.proceedpop = false;
                    $scope.ZeroDeptpop = true;
                    $scope.ZeroDepcheckquestion = false;
                    $rootScope.scrollhide = '';
                    $scope.showzerodeptnocondition = true;
                }
                else if ($scope.ZeroDepcheck.toLowerCase() == "yes") {
                    $scope.ZeroDepcheckquestion = false;
                    $scope.showzerodeptnocondition = false;
                    $rootScope.scrollhide = '';
                    $scope.GetLeadPop($scope.selectedinsurerplan, $scope.selectedinsurerindex);

                }
            }
            else if (flag == 2) {
                if ($scope.selectedinsurerplan.InsurerId == "1" || $scope.selectedinsurerplan.InsurerId == '6') {
                    for (var i = 0; i < $scope.selectedinsurerplan.addonavl.length; i++) {
                        if (($scope.selectedinsurerplan.InsurerName + $scope.selectedinsurerplan.addonavl[i].Name).match("Zero Depreciation")) {
                            $scope.addonsmodels[$scope.selectedinsurerplan.InsurerNameWithPlan + $scope.selectedinsurerplan.PolicyTerm + $scope.selectedinsurerplan.InsurerName + $scope.selectedinsurerplan.addonavl[i].Name] = false;
                            $scope.carleftpanel(6, $scope.selectedinsurerindex, false, $scope.selectedinsurerplan.addonavl[i], $scope.selectedinsurerplan);
                            $scope.GetLeadPop($scope.selectedinsurerplan, $scope.selectedinsurerindex);
                        }
                    }
                }
                $scope.ZeroDepcheckquestion = false;
                $scope.showzerodeptnocondition = false;
            }
            else if (flag == 3) {
                $scope.openhdfcpopup = false;
                $scope.ZeroDepcheckquestion = false;
                $scope.showzerodeptnocondition = false;
                $rootScope.scrollhide = '';
                $scope.template("HdfcZeroDept", false);
            }


        }
        $scope.WithoutZeroDept = function () {
            $scope.carleftpanel(5);
        }
        $scope.GetLeadPop = function (item, flag, id11) {
            $scope.showbtnloader1 = [];
            $scope.maxCharLength = "100";
            if (($scope.product == "Investment" || $scope.product == "Pension" || $scope.product == "Child") && item.InsurerId == 20) {
                $scope.maxCharLength = "75";
                $scope.maxEmailLength = "52";
            }
            
            if ($scope.product == "Investment" && item.InsurerId == 29) {
                $scope.finalPlan = NonTermFactory.gettingPlanId($scope, item);
                if ($scope.finalPlan != undefined) {
                    item = $scope.finalPlan;
                }
            }
            if ($scope.product == "Health") {
                if (item.InsurerId == 2)
                    $scope.quotesrequest.Requests[0].IsOffline = false;
                else
                    $scope.quotesrequest.Requests[0].IsOffline = true;
            }
            var a = 'Buy Now Click ' + $scope.gaProduct;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });
            if (id11 != undefined) {

                $scope.showbtnloader1[item.ids + id11] = true;
            }
            else {
                $scope.showbtnloader1[item.ids] = true;
            }
            $scope.showbtnleadloader[item.ids] = true;
            $scope.InsurerId = 0;
            if (item.InsurerId == 19 && ($scope.product == "Term" || $scope.product == "Child" || $scope.product == "Pension" || $scope.product == "Investment")) {
                var head = document.getElementsByTagName('head')[0];
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = "https://www.iciciprulife.com/etc/designs/icicipru/ineo/iprulogger-insurejoy.js";
                head.appendChild(script);
            }
            if ($scope.product == "Car" || $scope.product == "Twowheeler") {

            }
            else if ($scope.product == "Group") {
                $scope.ProductId = 17;
                $scope.InsurerId = item.InsurerId;
            }

            $scope.openhdfcpopup = false;
            $scope.template("HdfcZeroDept", false);
            $scope.detailsBtnLoader = true;
            $rootScope.premiumbreakuppopup = false;
            if (flag == -1 || $scope.askDOB == true) {

                $scope.checkbuycompareflag = flag;
            }

            else { $scope.checkbuycompareflag = undefined; }
            //carefreedom
            if ($scope.product == "Car" || $scope.product == "Twowheeler" || $scope.product == "Investment" || $scope.product == "Pension" || $scope.product == "Child") {
                if (item.Bundles.length > 0 && item.Bundles[0] != undefined) {
                    item.PlanId = item.Bundles[0].Id
                }
            }
            if (((item.InsurerId == '33' || item.PlanId == '941' || item.PlanId == '947' || item.PlanId == '948' || item.IsRedirection == true) && $scope.product == "Term") || (item.PlanId == '633' && $scope.product == "Investment")) {
                var SavePlanData = QuoteService.SavePlanData($scope.quotesrequest.IGQuoteId, item, $scope);
                SavePlanData.then(function (pl) {
                });
                //if ($scope.forcelead == true || ($scope.askDOB == true && $scope.product == "Term")) {
                //    $rootScope.showleadpopupAnimation = "fadeIn";
                //    $scope.leadpopupAnimation = "bounceInRight";
                //    $scope.showcomparepopAnimation = "fadeOut";
                //    $scope.comparepopAnimation = "bounceOut bounceOutLeft";
                //    $scope.showcomparepop = false; $rootScope.showfooter = true;
                //    $scope.showcomparepopInner = false;
                //    $rootScope.showleadpopup = true;
                //    $rootScope.scrollhide = 'scollClass';
                //    $rootScope.showleadpopupInner = true;
                //    $scope.selectedbuyplan = item;
                //    if ($scope.AgentMobile == $scope.userMobileNumber && $scope.AgentMobile != undefined) {
                //        $scope.showagentmsg = true;
                //    }
                //    // // $scope.$root.scrollhide = "scrollhides";
                //    $scope.template("Lead", true);
                //}
                //else if ($scope.userName != undefined && $scope.userName != "" && $scope.userMobileNumber != undefined && $scope.userMobileNumber != "" && $scope.userEmailID != undefined && $scope.userEmailID != "" && ($scope.leadpoperror == false || $scope.leadpoperror == undefined)) {
                //    //BuynowloaderShow(flag, item);

                //    $scope.showbtnleadloader[item.ids] = true;
                //    $rootScope.showleadpopup = false;
                //    $rootScope.scrollhide = '';
                //    $scope.showbtnloader = false;
                //    $rootScope.showleadpopupInner = false;
                //    $scope.showcomparepop = false; $rootScope.showfooter = true;
                //    $scope.showcomparepopInner = false;
                //    if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = true; }
                //    else {
                //        $scope.showbtnloader1[item.ids] = true;
                //    }
                //    $scope.showbtnleadloader[item.ids] = true;
                //    $scope.selectedbuyplan = item;
                //    $rootScope.showleadpopupAnimation = "fadeOut display-none";
                //    $scope.$root.scrollhide = "";
                //    $scope.template("Lead", false);
                //    if ($scope.instantpopupflag != undefined) {
                //        $scope.BuyPlan(item, '', id11);
                //    }
                //    else {
                //        $scope.otpFn(1);
                //    }

                //}

                //else if (($rootScope.showleadpopupAnimation == "" || $rootScope.showleadpopupAnimation == "fadeOut" || $scope.leadpopupAnimation == "" || $scope.leadpopupAnimation == "bounceOut bounceOutLeft") && ($scope.checkbuycompareflag == -1)) {

                //    $rootScope.showleadpopupAnimation = "fadeIn";
                //    $scope.leadpopupAnimation = "bounceInRight";
                //    $scope.showcomparepopAnimation = "fadeOut";
                //    $scope.comparepopAnimation = "bounceOut bounceOutLeft";
                //    $scope.showcomparepop = false; $rootScope.showfooter = true;
                //    $scope.showcomparepopInner = false;
                //    $rootScope.showleadpopup = true;
                //    $rootScope.scrollhide = 'scollClass';
                //    $rootScope.showleadpopupInner = true;
                //    $scope.selectedbuyplan = item;
                //    // // $scope.$root.scrollhide = "scrollhides";
                //    $scope.template("Lead", true);
                //    $scope.showbtnleadloader[item.ids] = false;
                //    if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = false; }
                //    else {
                //        $scope.showbtnloader1[item.ids] = false;
                //    }
                //}


                //else if ($scope.utmSource != undefined) {
                //    if (($scope.utmSource.toUpperCase() == "MYBZYNESS" || $scope.utmSource.toUpperCase() == "PML" || $scope.utmSource.toUpperCase() == "WFL" || $scope.utmSource.toUpperCase() == "SDL" || $scope.utmSource.toUpperCase() == "TCL" || $scope.utmSource.toUpperCase() == "UVA" || $scope.utmSource.toUpperCase() == "EKO" || $scope.noleadpop == true)) {

                //        $scope.selectedbuyplan = item;
                //        $rootScope.showleadpopup = false;
                //        $rootScope.scrollhide = '';
                //        $scope.showbtnloader = false;
                //        $rootScope.showleadpopupInner = false;
                //        $scope.template("Lead", false);
                //        if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = true; }
                //        else {
                //            $scope.showbtnloader1[item.ids] = true;
                //        }
                //        $scope.showbtnleadloader[item.ids] = true;
                //        $scope.BuyPlan(item, '', id11);
                //    }
                //    else {
                //        $scope.selectedbuyplan = item;
                //        $rootScope.showleadpopupInner = true;
                //        $rootScope.showleadpopup = true;
                //        $rootScope.scrollhide = 'scollClass';
                //        $scope.showbtnleadloader[item.ids] = false;
                //        $rootScope.showleadpopupAnimation = "fadeIn";
                //        $scope.leadpopupAnimation = "bounceInDown";
                //        // // $scope.$root.scrollhide = "scrollhides";
                //        $scope.proposalflag = true;
                //        $scope.template("Lead", true);
                //        if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = false; }
                //        else {
                //            $scope.showbtnloader1[item.ids] = false;
                //        }
                //    }
                //}
                if ($scope.userName != undefined && $scope.userName != "" && $scope.userMobileNumber != undefined && $scope.userMobileNumber != "" && $scope.userEmailID != undefined && $scope.userEmailID != "" && ($scope.leadpoperror == false || $scope.leadpoperror == undefined)) {
                    //BuynowloaderShow(flag, item);

                    $scope.showbtnleadloader[item.ids] = true;
                    $rootScope.showleadpopup = false;
                    $rootScope.scrollhide = '';
                    $scope.showbtnloader = false;
                    $rootScope.showleadpopupInner = false;
                    $scope.showcomparepop = false; $rootScope.showfooter = true;
                    $scope.showcomparepopInner = false;
                    if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = true; }
                    else {
                        $scope.showbtnloader1[item.ids] = true;
                    }
                    $scope.showbtnleadloader[item.ids] = true;
                    $scope.selectedbuyplan = item;
                    $rootScope.showleadpopupAnimation = "fadeOut display-none";
                    $scope.$root.scrollhide = "";
                    $scope.template("Lead", false);
                    if ($scope.instantpopupflag != undefined) {
                        $scope.BuyPlan(item, '', id11);
                    }
                    else {
                        $scope.otpFn(1);
                    }

                }
                else {
                    $scope.selectedbuyplan = item;
                    $rootScope.showleadpopupInner = true;
                    $rootScope.showleadpopup = true;
                    $rootScope.scrollhide = 'scollClass';
                    $rootScope.showleadpopupAnimation = "fadeIn";
                    $scope.leadpopupAnimation = "bounceInDown";
                    // // $scope.$root.scrollhide = "scrollhides";
                    $scope.proposalflag = true;
                    $scope.template("Lead", true);
                    $scope.showbtnleadloader[item.ids] = false;
                    if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = false; }
                    else {
                        $scope.showbtnloader1[item.ids] = false;
                    }

                }
            }
            else {
                if (item.PolicyType == "FAMILY FLOATER" && $scope.productID == 3) {
                    familyfloater = 1;
                }
                else {
                    familyfloater = 0;
                }
                if (flag == -5) {
                    $scope.tempplanid = 1597;
                }
                else {
                    $scope.tempplanid = item.PlanId;
                }

                var redirecturl = QuoteService.PlanRedirection($scope.tempplanid, familyfloater, $scope);
                redirecturl.then(function (pl) {
                    var result = angular.fromJson(pl.data)[0];
                    //if ($scope.forcelead == true || ($scope.askDOB == true && $scope.product == "Term")) {
                    //    $rootScope.showleadpopupAnimation = "fadeIn";
                    //    $scope.leadpopupAnimation = "bounceInRight";
                    //    $scope.showcomparepopAnimation = "fadeOut";
                    //    $scope.comparepopAnimation = "bounceOut bounceOutLeft";
                    //    $scope.showcomparepop = false;
                    //    $rootScope.showfooter = true;
                    //    $scope.showcomparepopInner = false;
                    //    $rootScope.showleadpopup = true;
                    //    $rootScope.scrollhide = 'scollClass';
                    //    $rootScope.showleadpopupInner = true;
                    //    $rootScope.prePolicydetails = false;
                    //    $scope.selectedbuyplan = item;
                    //    $scope.showbtnloader1[item.ids] = false;
                    //    if ($scope.AgentMobile == $scope.userMobileNumber && $scope.AgentMobile != undefined) {
                    //        $scope.showagentmsg = true;
                    //    }
                    //    // // $scope.$root.scrollhide = "scrollhides";
                    //    $scope.template("Lead", true);
                    //}
                    //else if ((result.LandingUrl).toLowerCase() == "proposal integration") {
                    //    $scope.selectedbuyplan = item;
                    //    //BuynowloaderShow(flag, item);
                    //    $scope.showbtnleadloader[item.ids] = true;
                    //    $rootScope.showleadpopup = false;
                    //    $rootScope.scrollhide = '';
                    //    $scope.showbtnloader = false;
                    //    $rootScope.showleadpopupInner = false;
                    //    if (item.ids == undefined) {
                    //        item.ids = item.objectid;
                    //    }
                    //    if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = true; }
                    //    else {
                    //        $scope.showbtnloader1[item.ids] = true;
                    //    }
                    //    $scope.template("Lead", false);
                    //    gf = 1;
                    //    $scope.BuyPlan(item, (result.LandingUrl).toLowerCase(), id11);
                    //}
                    //else if ($scope.userName != undefined && $scope.userName != "" && $scope.userMobileNumber != undefined && $scope.userMobileNumber != "" && $scope.userEmailID != undefined && $scope.userEmailID != "" && ($scope.leadpoperror == false || $scope.leadpoperror == undefined)) {
                    //    //BuynowloaderShow(flag, item);

                    //    $scope.showbtnleadloader[item.ids] = true;
                    //    $rootScope.showleadpopup = false;
                    //    $rootScope.scrollhide = '';
                    //    $scope.showbtnloader = false;
                    //    $rootScope.showleadpopupInner = false;
                    //    $scope.showcomparepop = false; $rootScope.showfooter = true;
                    //    $scope.showcomparepopInner = false;
                    //    if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = true; }
                    //    else {
                    //        $scope.showbtnloader1[item.ids] = true;
                    //    }
                    //    $scope.showbtnleadloader[item.ids] = true;
                    //    $scope.selectedbuyplan = item;
                    //    $rootScope.showleadpopupAnimation = "fadeOut display-none";
                    //    $scope.$root.scrollhide = "";
                    //    $scope.template("Lead", false);
                    //    if ($scope.instantpopupflag != undefined) {
                    //        $scope.BuyPlan(item, (result.LandingUrl).toLowerCase(), id11);
                    //    }
                    //    else {
                    //        $scope.otpFn(1);
                    //    }

                    //}

                    //else if (($rootScope.showleadpopupAnimation == "" || $rootScope.showleadpopupAnimation == "fadeOut" || $scope.leadpopupAnimation == "" || $scope.leadpopupAnimation == "bounceOut bounceOutLeft") && ($scope.checkbuycompareflag == -1)) {

                    //    $rootScope.showleadpopupAnimation = "fadeIn";
                    //    $scope.leadpopupAnimation = "bounceInRight";
                    //    $scope.showcomparepopAnimation = "fadeOut";
                    //    $scope.comparepopAnimation = "bounceOut bounceOutLeft";
                    //    $scope.showcomparepop = false;
                    //    $rootScope.showfooter = true;
                    //    $scope.showcomparepopInner = false;
                    //    $rootScope.showleadpopup = true;
                    //    $rootScope.scrollhide = 'scollClass';
                    //    $rootScope.showleadpopupInner = true;
                    //    $scope.selectedbuyplan = item;
                    //    // // $scope.$root.scrollhide = "scrollhides";
                    //    $scope.template("Lead", true);
                    //    $scope.showbtnleadloader[item.ids] = false;
                    //    if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = false; }
                    //    else {
                    //        $scope.showbtnloader1[item.ids] = false;
                    //    }
                    //}


                    //else if ($scope.utmSource != undefined) {
                    //    if (($scope.utmSource.toUpperCase() == "MYBZYNESS" || $scope.utmSource.toUpperCase() == "PML" || $scope.utmSource.toUpperCase() == "WFL" || $scope.utmSource.toUpperCase() == "SDL" || $scope.utmSource.toUpperCase() == "TCL" || $scope.utmSource.toUpperCase() == "UVA" || $scope.utmSource.toUpperCase() == "EKO" || $scope.noleadpop == true)) {

                    //        $scope.selectedbuyplan = item;
                    //        $rootScope.showleadpopup = false;
                    //        $rootScope.scrollhide = '';
                    //        $scope.showbtnloader = false;
                    //        $rootScope.showleadpopupInner = false;
                    //        $scope.template("Lead", false);
                    //        if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = true; }
                    //        else {
                    //            $scope.showbtnloader1[item.ids] = true;
                    //        }
                    //        $scope.showbtnleadloader[item.ids] = true;
                    //        $scope.BuyPlan(item, (result.LandingUrl).toLowerCase(), id11);
                    //    }
                    //    else {
                    //        $scope.selectedbuyplan = item;
                    //        $rootScope.showleadpopupInner = true;
                    //        $rootScope.showleadpopup = true;
                    //        $rootScope.scrollhide = 'scollClass';
                    //        $scope.showbtnleadloader[item.ids] = false;
                    //        $rootScope.showleadpopupAnimation = "fadeIn";
                    //        $scope.leadpopupAnimation = "bounceInDown";
                    //        // // $scope.$root.scrollhide = "scrollhides";
                    //        $scope.proposalflag = true;
                    //        $scope.template("Lead", true);
                    //        if (id11 != undefined) {
                    //            $scope.showbtnloader1[item.ids + id11] = false;
                    //        }
                    //        else {
                    //            $scope.showbtnloader1[item.ids] = false;
                    //        }
                    //    }
                    //}


                    //else {
                    //    $scope.selectedbuyplan = item;
                    //    $rootScope.showleadpopupInner = true;
                    //    $rootScope.showleadpopup = true;
                    //    $rootScope.scrollhide = 'scollClass';
                    //    $rootScope.showleadpopupAnimation = "fadeIn";
                    //    $scope.leadpopupAnimation = "bounceInDown";
                    //    // // $scope.$root.scrollhide = "scrollhides";
                    //    $scope.proposalflag = true;
                    //    $scope.template("Lead", true);
                    //    $scope.showbtnleadloader[item.ids] = false;
                    //    if (id11 != undefined) {
                    //        $scope.showbtnloader1[item.ids + id11] = false;
                    //    }
                    //    else {
                    //        $scope.showbtnloader1[item.ids] = false;
                    //    }

                    //}
                    if ((result.LandingUrl).toLowerCase() == "proposal integration") {
                        $scope.selectedbuyplan = item;
                        //BuynowloaderShow(flag, item);
                        $scope.showbtnleadloader[item.ids] = true;
                        $rootScope.showleadpopup = false;
                        $rootScope.scrollhide = '';
                        $scope.showbtnloader = false;
                        $rootScope.showleadpopupInner = false;
                        if (item.ids == undefined) {
                            item.ids = item.objectid;
                        }
                        if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = true; }
                        else {
                            $scope.showbtnloader1[item.ids] = true;
                        }
                        $scope.template("Lead", false);
                        gf = 1;
                        $scope.BuyPlan(item, (result.LandingUrl).toLowerCase(), id11);
                    }
                    else if ($scope.userName != undefined && $scope.userName != "" && $scope.userMobileNumber != undefined && $scope.userMobileNumber != "" && $scope.userEmailID != undefined && $scope.userEmailID != "" && ($scope.leadpoperror == false || $scope.leadpoperror == undefined)) {
                        //BuynowloaderShow(flag, item);

                        $scope.showbtnleadloader[item.ids] = true;
                        $rootScope.showleadpopup = false;
                        $rootScope.scrollhide = '';
                        $scope.showbtnloader = false;
                        $rootScope.showleadpopupInner = false;
                        $scope.showcomparepop = false; $rootScope.showfooter = true;
                        $scope.showcomparepopInner = false;
                        if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = true; }
                        else {
                            $scope.showbtnloader1[item.ids] = true;
                        }
                        $scope.showbtnleadloader[item.ids] = true;
                        $scope.selectedbuyplan = item;
                        $rootScope.showleadpopupAnimation = "fadeOut display-none";
                        $scope.$root.scrollhide = "";
                        $scope.template("Lead", false);
                        if ($scope.instantpopupflag != undefined) {

                            $scope.BuyPlan(item, (result.LandingUrl).toLowerCase(), id11);
                        }
                        else {
                            $rootScope.showleadpopupInner = true;
                            $rootScope.showleadpopup = true;
                            $rootScope.scrollhide = 'scollClass';
                            $rootScope.showleadpopupAnimation = "fadeIn";
                            $scope.leadpopupAnimation = "bounceInDown";
                            if (id11 != undefined) {
                                $scope.showbtnloader1[item.ids + id11] = false;
                            }
                            else {
                                $scope.showbtnloader1[item.ids] = false;
                            }
                            $scope.otpFn(1);
                        }

                    }
                    else {
                        $scope.selectedbuyplan = item;
                        $rootScope.showleadpopupInner = true;
                        $rootScope.showleadpopup = true;
                        $rootScope.scrollhide = 'scollClass';
                        $rootScope.showleadpopupAnimation = "fadeIn";
                        $scope.leadpopupAnimation = "bounceInDown";
                        // // $scope.$root.scrollhide = "scrollhides";
                        $scope.proposalflag = true;
                        $scope.template("Lead", true);
                        $scope.showbtnleadloader[item.ids] = false;
                        if (id11 != undefined) {
                            $scope.showbtnloader1[item.ids + id11] = false;
                        }
                        else {
                            $scope.showbtnloader1[item.ids] = false;
                        }

                    }
                    if ($rootScope.showleadpopup == true) {
                        var SavePlanData = QuoteService.SavePlanData($scope.quotesrequest.IGQuoteId, item, $scope)
                        SavePlanData.then(function (pl) {
                        });
                    }
                }, function (response) {
                    ServiceRespnse(response);
                });
            }

        }

        $scope.closeleadpopup = function () {
            $scope.jointbtnloader1 = false;
            $scope.detailsBtnLoader = false;
            $scope.showcomercialpopmsg = false;
            $scope.policyexp1 = false;
            $scope.policyexp = false;
            $scope.policyexp2 = false;
            $scope.policyexp3 = false;
            //$scope.userMobileNumber = $rootScope.healthdata.MobileNo;
            $scope.historyback("lead");
            $rootScope.prePolicydetails = false;
            $rootScope.showcsleadpopup = false;
            $scope.showbtnloader1 = [];
            $rootScope.scrollhide = '';
            if (($rootScope.showleadpopupAnimation == "fadeIn" || $scope.leadpopupAnimation == "bounceInRight") && ($scope.checkbuycompareflag == undefined)) {
                $scope.showcomparepop = false; $rootScope.showfooter = true;
                $scope.showcomparepopInner = false;

                $rootScope.showleadpopup = false;
                $rootScope.scrollhide = '';
                $scope.showbtnloader = false;
                $rootScope.showleadpopupInner = false;
                $scope.template("Lead", false);
                $rootScope.showleadpopupAnimation = "fadeOut";
                $scope.leadpopupAnimation = "bounceOutDown";
                $scope.$root.scrollhide = "";

            }

            if (($rootScope.showleadpopupAnimation == "fadeIn" || $scope.leadpopupAnimation == "bounceInRight") && ($scope.checkbuycompareflag == -1)) {
                $rootScope.showleadpopupAnimation = "fadeOut";
                $scope.leadpopupAnimation = "bounceOut bounceOutLeft";
                $scope.showcomparepopAnimation = "fadeIn";
                $scope.comparepopAnimation = "bounceInRight";
                // // $scope.$root.scrollhide = "scrollhides";
                $scope.showcomparepop = true; $rootScope.showfooter = false;
                $scope.showcomparepopInner = true;

                $rootScope.showleadpopup = false;
                $rootScope.scrollhide = '';
                $scope.showbtnloader = false;
                $rootScope.showleadpopupInner = false;
                $scope.template("Lead", false);
            }
            //            $timeout(function () {
            //                focusOnFiled($rootScope.selctedPlanId);
            //            }, 100);
        }

        $scope.closecignadiv = function () {

            if (($scope.checkbuycompareflag == undefined)) {

            }
            else {
                //   $rootScope.showleadpopupAnimation = "fadeOut";
                //  $scope.leadpopupAnimation = "bounceOut bounceOutLeft";
                $scope.showcomparepop = true; $rootScope.showfooter = false;
                $scope.showcomparepopInner = true;
            }
        }


        $scope.checkleadmobile = function () {
            $scope.showbtnloader = true;
            var a = 'Lead Popup Submit ' + $scope.gaProduct;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            flag = 1;
            if ($scope.leadmod == true || $scope.leadname == true) {
                if ($scope.userName != undefined && $scope.userName != null && $scope.userName != "") {
                    if (ValidationFactory.namevalidate($scope.userName) == "False" || $scope.userName == undefined) {
                        flag = 0;
                        $scope.leadpoperror = true;
                        $scope.nameError = true;
                        $scope.showbtnloader = false;
                    }
                    else {
                        $scope.nameError = false;
                    }
                    $scope.nameblankError = false;
                }
                else {
                    flag = 0;
                    $scope.leadpoperror = true;
                    $scope.showbtnloader = false;
                    $scope.nameblankError = true;
                }
            }
            if ($scope.askDOB == true && $scope.product == "Term") {
                if ($scope.IGdate == undefined || $scope.IGmonth == undefined || $scope.IGyear == undefined || $scope.IGdate == "" || $scope.IGmonth == "" || $scope.IGyear == "" || $scope.IGmonth == "0" || $scope.IGdate == "0" || $scope.age < 18 || $scope.age >= 66) {
                    flag = 0;
                    $scope.dateerror = true;
                    $scope.showbtnloader = false;
                    $scope.leadpoperror = true;
                }
            }
            else {
                $scope.dateerror = false;


            }


            if ($scope.leadmod == true || $scope.leademail == true) {
                if ($scope.userEmailID != undefined && $scope.userEmailID != null && $scope.userEmailID != "") {
                    if (ValidationFactory.emailvalidate($scope.userEmailID) == "False" || $scope.userEmailID == undefined) {
                        flag = 0;
                        $scope.leadpoperror = true;
                        $scope.emailError = true;
                        $scope.showbtnloader = false;
                    }
                    else {
                        $scope.emailError = false;
                    }
                    $scope.emailblankError = false;
                }
                else {
                    flag = 0;
                    $scope.leadpoperror = true;
                    $scope.showbtnloader = false;
                    $scope.emailblankError = true;
                }
            }
            if ($scope.leadmod == true || $scope.leadmobile == true) {
                if (($scope.userMobileNumber == $scope.AgentMobile && $scope.AgentMobile != undefined)  || ValidationFactory.mobilevalidate($scope.userMobileNumber) == "False" || $scope.userMobileNumber == undefined) {
                    flag = 0;
                    $scope.leadpoperror = true;
                    $scope.mobileError = true;
                    $scope.showbtnloader = false;
                }
                else {
                    $scope.mobileError = false;
                }
            }
            if (($scope.userreffrelcode == undefined || $scope.userreffrelcode == "" || $scope.userreffrelcode == null) && $scope.txtreffrelcodeState == true) {
                $scope.buynowShareIderror = true;
                flag = 0;
            }
            else
                $scope.buynowShareIderror = false;
            if (flag == 1) {
                if ($scope.IGdate != undefined && $scope.IGmonth != undefined && $scope.IGyear != undefined) {
                    $scope.dateofbirth = $scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear;
                    $scope.DateOfBirth = $scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear;
                    $scope.quotes_userdata.dateofbirth = $scope.dateofbirth;
                }
                else {
                    var dateofbirth = $scope.quotesrequest.Requests[0].DateOfBirth;
                    if (dateofbirth != "" && dateofbirth != undefined) {
                        var dates = new Date(parseInt(dateofbirth.substring(6, 19))).getDate() + '-' + (new Date(parseInt(dateofbirth.substring(6, 19))).getMonth() + 1) + '-' + new Date(parseInt(dateofbirth.substring(6, 19))).getFullYear();
                        $scope.IGdate = dates.split('-')[0] - 1;
                        $scope.IGmonth = dates.split('-')[1];
                        $scope.IGyear = dates.split('-')[2];
                        $scope.dateofbirth = $scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear;
                        $scope.DateOfBirth = $scope.IGdate + "-" + $scope.IGmonth + "-" + $scope.IGyear;
                        $scope.quotes_userdata.dateofbirth = $scope.dateofbirth;
                    }
                }
                if ($scope.quotes_userdata.dateofbirth != undefined) {
                    $scope.quotesrequest.Requests[0].DateOfBirth = JSON.parse(DataFactory.stringifyWcf($scope.quotes_userdata.dateofbirth));
                }
                $scope.askDOB = false;

                if ($scope.userreffrelcode != undefined && $scope.txtreffrelcodeState == true && $scope.userreffrelcode != "") {
                    var flag = false;
                    flag = QuoteService.CSSValidateAgentReferralCode($scope, $scope.userreffrelcode);
                    flag.then(function (pl) {
                        $scope.statusRefCode = pl.data;
                        if (!$scope.statusRefCode) {
                            $scope.leadpoperror = true;
                            //$scope.LeadCreationStep1(2);
                            $scope.buynowleadpoperrorShareId = true;
                            $scope.showbtnloader = false;
                        }
                        else {
                            // var LeadId = $scope.bikequotesresponse[0].Response.VisitorDetail.TwoWheelerVisitorDetail.LeadId;
                            var LeadId = $scope.IGquoteId;
                            var CSSInsertAgentReferralCodeCPIDMapping = QuoteService.CSSInsertAgentReferralCodeCPIDMapping($scope.IGquoteId, $scope, $scope.userreffrelcode);
                            CSSInsertAgentReferralCodeCPIDMapping.then(function (pl) {
                                $scope.otpFn();
                                $scope.leadpoperror = false;
                            }, function (response) {
                                ServiceRespnse(response);
                            });

                        }
                    }, function (response) {
                        ServiceRespnse(response);
                    });

                }
                else {
                    $scope.leadpoperror = false;
                    $scope.usermaindata.username = $scope.userName;
                    $scope.usermaindata.usermobile = $scope.userMobileNumber;
                    $scope.usermaindata.useremail = $scope.userEmailID;
                }
            }
            else {

            }

            if ($scope.leadpoperror == false && ($scope.userreffrelcode == undefined || $scope.txtreffrelcodeState == false || $scope.userreffrelcode == "")) {
                $scope.showbtnloader = true;


                $scope.otpFn();
                if ($scope.selectedbuyplan != undefined) {
                    if ($scope.selectedbuyplan.InsurerId == 54) {

                        $rootScope.showleadpopup = false;
                        $rootScope.scrollhide = '';
                        $scope.showbtnloader = false;
                        $rootScope.showleadpopupInner = false;
                        $scope.template("Lead", false);
                        $rootScope.showleadpopupAnimation = "fadeOut display-none";
                    }
                }
            }
        }

        $scope.ShareIdToggle = function () {
            var a = "Lead Pop Share ID Open";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


            $scope.txtreffrelcodeState = $scope.txtreffrelcodeState === false ? true : false;
            if ($scope.leadpoperror == true && $scope.buynowleadpoperrorShareId == true) {
                $scope.buynowleadpoperrorShareId = false;
                $scope.leadpoperror = false;
            }
        }
        $scope.BuyPlan = function (item, proposalurl, id11) {
            $scope.BuyNowHelpPopURL = '../HomePage/Template/CommonPopup.html';

            var a = 'Buy Now Proceed ' + $scope.gaProduct;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


            if ($rootScope.agentHide == true) {
                $scope.ProposalCpID = $scope.quotesrequest.IGQuoteId;
            }
            else {
                $scope.ProposalCpID = $scope.quotesrequest.IGQuoteId;
            }
            if ($scope.product == 'Term') {
                if (item == undefined) {
                    item = $scope.selectedbuyplan;
                }
            }
            if ($scope.product == 'Critical') {
                if (item == undefined) {
                    item = $scope.selectedbuyplan;
                }
            }
            else if ($scope.product == 'Investment' || $scope.product == 'Pension' || $scope.product == 'Child') {
                if (item == undefined) {
                    item = $scope.selectedbuyplan;
                }
                if ($scope.item1 != undefined) {
                    item = $scope.item1;
                    $scope.selectedbuyplan = $scope.item1;
                }
            }
            else {
                item = $scope.selectedbuyplan;
            }
            $scope.proposalselectedplanflag = item;


            if (item != undefined) {

                if ($scope.product == "Term") {
                    var x = item.InsurerCode;
                }
                else {
                    var x = item.InsurerName;
                }

                var b = x + ' ' + $scope.gaProduct + ' Buy Now Proceed';
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: b, value: $scope.productID });

            }

            if ($scope.product == "Car" || $scope.product == "Twowheeler" || $scope.product == "Investment" || $scope.product == "Pension" || $scope.product == "Child") {
                if ($scope.selectedbuyplan.Bundles.length > 0 && $scope.selectedbuyplan.Bundles[0] != undefined) {

                    //  if ($scope.product == "Car" || $scope.product == "Twowheeler" || $scope.product == "Investment" || $scope.product == "Pension" || $scope.product == "Child") {
                    //   if ($scope.selectedbuyplan.Bundles.length > 0) {

                    item.PlanId = $scope.selectedbuyplan.Bundles[0].Id;
                }
            }
            if ($scope.product == "Car" || $scope.product == "Twowheeler") {
                var id = 0;
                for (var i = 0; i < $scope.selectedaddon[item.objectid].addonselection1.length; i++) {
                    if ($scope.selectedaddon[item.objectid].addonselection1[i].Type == "Mandatory") {
                        var id = $scope.selectedaddon[item.objectid].addonselection1[i].bid;
                    }
                }
                if (id == 0) {
                    if ($scope.selectedaddon[item.objectid].addonselection1.length > 0) {
                        var id = $scope.selectedaddon[item.objectid].addonselection1[0].bid;
                    }
                }

                if (id != undefined && id != 0) {
                    var len = item.Bundles.length;
                    var item1 = [];

                    for (var i = 0; i < len; i++) {
                        if (id != undefined && id != 0) {
                            if (item.Bundles[i].Id == id) {

                                item1.push(item.Bundles[i]);

                            }
                        }
                    }
                    item.Bundles = [];
                    item.Bundles.push(item1[0]);
                }
                else {
                    var item1 = [];
                    item1.push(item.Bundles[0]);
                    item.Bundles = [];

                    item.Bundles.push(item1[0]);
                    item.Bundles[0].Addons = undefined;
                }
                var addonflag = 0;
                if (item.Bundles.length > 0) {
                    if ($scope.selectedaddon[item.objectid].addonselection1.length > 0) {
                        for (var i = 0; i < $scope.selectedaddon[item.objectid].addonselection1.length; i++) {
                            if ($scope.selectedaddon[item.objectid].addonselection1[i].Type == "Mandatory") {
                                var addonflag = 1;
                            }
                        }
                        if (addonflag == 1) {
                            for (var i = 0; i < item.Bundles[0].Addons.length; i++) {
                                if (item.Bundles[0].Addons[i].Type != "Mandatory") {
                                    item.Bundles[0].Addons.splice(i, 1);
                                    i = i - 1;
                                }
                            }
                            for (var i = 0; i < $scope.selectedaddon[item.objectid].addonselection1.length; i++) {
                                if ($scope.selectedaddon[item.objectid].addonselection1[i].Type != "Mandatory") {
                                    item.Bundles[0].Addons.push($scope.selectedaddon[item.objectid].addonselection1[i]);
                                }
                            }
                        }
                        else {
                            item.Bundles[0].Addons = $scope.selectedaddon[item.objectid].addonselection1;
                        }


                    }
                    else {
                        item.Bundles[0].Addons = [];
                    }
                }

                //item.addonavl = null;

            }
            //   $location.url($location.path());
            if (item.PolicyTerm != undefined && $scope.product == "Group") {
                $scope.quotesrequest.Requests[0].PolicyTerm = item.PolicyTerm;
                item.PolicyTerm = item.PolicyTerm.split(' ')[0];
                $scope.quotesrequest.Requests[0].PolicyTerm = item.PolicyTerm;
            }
            else if (item.PolicyTerm != undefined && $scope.product != "Group") {
                if ($scope.quotesrequest.Requests[0].UserInputIncome < 200000 && $scope.product == "Term") {
                    item.PolicyTerm = item.PolicyTerm.split(' ')[0];
                    $scope.quotesrequest.Requests[0].PolicyTerm = item.PolicyTerm;
                }
                else {
                    $scope.quotesrequest.Requests[0].PolicyTerm = item.PolicyTerm;
                }
            }
            else if (item.policyTerm == undefined) {
                $scope.quotesrequest.Requests[0].policyTerm = item.policyTerm;
            }
            if (item.SumAssured != undefined && item.SumAssured != null && item.SumAssured != "") {
                $scope.quotesrequest.Requests[0].SumAssured = item.SumAssured;
            }
            if (item.PayingMode != undefined) {
                $scope.quotesrequest.Requests[0].PayingMode = item.PayingMode;
            }
            if (item.PayingFrequency != undefined) {
                $scope.quotesrequest.Requests[0].PayingMode = item.PayingFrequency;
            }
            if ($scope.product.toLowerCase() == "health") {
                if ($scope.quotesrequest.Requests[0].IsCovid) {
                    item.PolicyTermDays = $scope.policyPeriod;
                    //item.FinalPremium = item.Premium;
                    $scope.quotesrequest.Requests[0].PolicyTermDays = $scope.policyPeriod;
                }
                else {
                    item.PolicyTermYear = $scope.quotesrequest.Requests[0].PolicyTerm;
                }
            }
            if (item.TermPercentagePremium == 1) {
                if ($scope.product.toLowerCase() == "term" && (item.LumSumPercent == null || item.LumSumPercent == undefined || item.LumSumPercent == 0)) {
                    item.LumSumPercent = 50;
                }
            }
            else {
                item.LumSumPercent = 0;
            }
            if (item.PremiumPayingTerm != undefined && $scope.product.toLowerCase() == "term") {
                $scope.quotesrequest.Requests[0].PremiumPayingTerm = item.PremiumPayingTerm;
            }
            if (item.PremiumPayingTerm < item.PolicyTerm && $scope.product.toLowerCase() == "term") {
                $scope.quotesrequest.Requests[0].IsPremiumPayingTerm = true;
            }
            else {
                $scope.quotesrequest.Requests[0].IsPremiumPayingTerm = false;
            }
            if (item.IsIncreasingSA != true) {
                item.IncreasingSA = 0;
                item.IncreasingSAValue = 0;
            }
            var saveDateReq = FeatureService.SaveRequirements($scope);
            saveDateReq.then(function (pl) {
                if (($scope.userName != undefined && $scope.userEmailID != undefined && $scope.userMobileNumber != undefined) || proposalurl == "proposal integration") {
                    if (item.ApplyPanNumberDiscount) {
                        var CustomerDOB = $scope.kotakdate + "/" + $scope.kotakmonth + "/" + $scope.kotakyear;
                        $scope.CIBILDiscountAmount = $scope.KotakPREVpremium - $scope.KotakQuotes_Data.BasicODPremium;
                        $scope.KotakDiscountUserInfo = { "PanCardNumber": $scope.kotakuserPAN, "CustomerFirstName": $scope.Kotakuserfname, "CustomerLastName": $scope.KotakuserLname, "CustomerMiddleName": $scope.KotakuserMname, "CustomerDOB": CustomerDOB, "MobileNumber": $scope.kotakusermobile, "CIBILDiscountAmount": $scope.CIBILDiscountAmount }
                    }
                    var SavePlanData = QuoteService.SavePlanData($scope.quotesrequest.IGQuoteId, item, $scope)
                    var urlservice = globals.ServiceURL + "/Lead.svc/web/SavePlanSelection";
                    var ServiceName = "Lead";
                    $timeout(function () {
                        if ($scope.SavePlanDatatime == 0) {
                            $scope.TimeOutService("2000", urlservice, ServiceName);
                            $scope.responsenull['SavePlanSelection'] = 0;
                        }
                        else {
                            $scope.SavePlanDatatime = 0;
                            $scope.responsenull['SavePlanSelection'] = 0;
                        }
                    }, 2000);
                    SavePlanData.then(function (pl) {

                        if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = false; }
                        else {
                            $scope.showbtnloader1[item.ids] = false;
                        }
                        $scope.GetTime['SavePlanSelection'] = new Date().getTime();
                        $scope.item = item;
                        if ($scope.responsenull['SavePlanSelection'] == 0) {
                            $scope.totaltime['SavePlanSelection'] = parseInt($scope.GetTime['SavePlanSelection'] - $scope.HitTime['SavePlanSelection']);
                            $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime['SavePlanSelection']);
                        }
                        $scope.SavePlanDatatime = 1;
                        if (item.PolicyType == "FAMILY FLOATER" && $scope.productID == 3) {
                            familyfloater = 1;
                        }
                        else {
                            familyfloater = 0;
                        }
                        if ($scope.tempplanid == 1597) {
                            var planid = 1597
                        }
                        else {
                            var planid = item.PlanId;
                        }
                        var redirecturl = QuoteService.PlanRedirection(planid, familyfloater, $scope);
                        var urlservice = globals.ServiceURL + "/CommonService.svc/web/getredirecturl";
                        var ServiceName = "CommonService";
                        $rootScope.exitfrompage = 2;
                        $timeout(function () {
                            if ($scope.redirecturltime == 0) {
                                $scope.TimeOutService("2000", urlservice, ServiceName);
                                $scope.responsenull['getredirecturl'] = 0;
                            }
                            else {
                                $scope.redirecturltime = 0;
                                $scope.responsenull['getredirecturl'] = 1;
                            }
                        }, 2000);
                        redirecturl.then(function (pl) {
                            $scope.redirecturltime = 1;
                            $scope.vIntegrationData = angular.fromJson(pl.data);
                            $scope.GetTime['getredirecturl'] = new Date().getTime();

                            if ($scope.responsenull['getredirecturl'] == 0) {
                                $scope.totaltime['getredirecturl'] = parseInt($scope.GetTime['getredirecturl'] - $scope.HitTime['getredirecturl']);
                                $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime['getredirecturl']);
                            }
                            if ($scope.product == "Car") {
                                $scope.item = item;
                                $scope.item.InsurerLogo = item.InsurerImage;
                                $scope.item.PlanName = item.Bundles[0].Name;
                                if ($scope.vIntegrationData[0].LandingUrl == undefined || $scope.vIntegrationData[0].LandingUrl == "" || $scope.vIntegrationData[0].LandingUrl == null) {
                                    $scope.showbtnleadloader[item.ids] = false;
                                    $scope.showbtnleadloader1[item.ids] = false;

                                    $scope.showbtnloader1[item.ids] = false;

                                    $scope.BuyNowHelpPop = true;
                                }
                                else {
                                    $location.url($location.path());

                                    var finaldata = CarFactory.BuyNow($scope, item.objectid);
                                    $scope = finaldata;
                                    if ($scope.quotesrequest.Requests[0].IsRenewal == true && $scope.quotesrequest.Requests[0].PreviousInsurerID == item.InsurerId) {
                                        $window.location.href = $scope.quotesrequest.Requests[0].RenewalUrl;
                                    }
                                    else {

                                        if ($scope.noleadpop == true) {
                                            $location.path("/Proposal/" + btoa($scope.ProposalCpID)).search('Leadpopup', false);
                                        }
                                        else {
                                            $location.path("/Proposal/" + btoa($scope.ProposalCpID));
                                        }

                                    }

                                }
                            }
                            else if ($scope.product == "Twowheeler") {
                                $scope.item = item;
                                $scope.item.InsurerLogo = item.InsurerImage;
                                $scope.item.PlanName = item.Bundles[0].Name;
                                if ($scope.vIntegrationData[0].LandingUrl == undefined || $scope.vIntegrationData[0].LandingUrl == "" || $scope.vIntegrationData[0].LandingUrl == null) {
                                    $scope.showbtnleadloader[item.ids] = false;
                                    $scope.showbtnleadloader1[item.ids] = false;
                                    $scope.showbtnloader1[item.ids] = false;
                                    $scope.BuyNowHelpPop = true;
                                }
                                else {

                                    $location.url($location.path());
                                    var finaldata = TwowheelerFactory.BuyNow($scope, item.objectid);
                                    if ($scope.quotesrequest.Requests[0].IsRenewal == true && $scope.quotesrequest.Requests[0].PreviousInsurerID == item.InsurerId) {
                                        $window.location.href = $scope.quotesrequest.Requests[0].RenewalUrl;
                                    }
                                    else {
                                        $location.path("/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                }
                            }
                            else if ($scope.product == "Health") {
                                if ($scope.vIntegrationData[0].LandingUrl == undefined || $scope.vIntegrationData[0].LandingUrl == "" || $scope.vIntegrationData[0].LandingUrl == null) {
                                    $scope.showbtnleadloader[item.ids] = false;

                                    if (id11 != undefined) { $scope.showbtnloader1[item.ids + id11] = false; }
                                    else {
                                        $scope.showbtnloader1[item.ids] = false;
                                    }
                                    $scope.BuyNowHelpPop = true;
                                    $scope.OpenReligarePopup = false;
                                    $rootScope.scrollhide = '';
                                    $scope.religaresmartloader = false;
                                    $scope.ReligareSubmitbtnloader = false;
                                }
                                else {
                                    $scope = HealthFactory.BuyNow($scope, item);
                                }
                            }
                            else if ($scope.product == "Term") {
                                if ($scope.vIntegrationData[0].LandingUrl == undefined || $scope.vIntegrationData[0].LandingUrl == "" || $scope.vIntegrationData[0].LandingUrl == null) {
                                    $scope.showbtnleadloader[item.ids] = false;
                                    $scope.showbtnloader1[item.ids] = false;
                                    $scope.BuyNowHelpPop = true;
                                }
                                else {
                                    var finaldata = TermFactory.BuyNow($scope, item);
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        if (item.InsurerId == globals.TermInsurerId.Maxlife || item.InsurerId == globals.TermInsurerId.Ipru) {
                                            $location.path("/Term-Proposal/" + btoa($scope.ProposalCpID))
                                        }
                                        else {
                                            $location.path("/Term-Proposal/" + btoa($scope.ProposalCpID))
                                        }
                                    } else {
                                        $window.location.href = finaldata;
                                    }
                                }
                            }
                            else if ($scope.product == "Group") {
                                if ($scope.vIntegrationData[0] == undefined || $scope.vIntegrationData[0] == null || $scope.vIntegrationData[0] == "") {
                                    $scope.showbtnleadloader[item.ids] = false;
                                    $scope.showbtnloader1[item.ids] = false;
                                    $scope.BuyNowHelpPop = true;
                                }
                                else if ($scope.vIntegrationData[0].LandingUrl == undefined || $scope.vIntegrationData[0].LandingUrl == "" || $scope.vIntegrationData[0].LandingUrl == null) {
                                    $scope.showbtnleadloader[item.ids] = false;
                                    $scope.showbtnloader1[item.ids] = false;
                                    $scope.BuyNowHelpPop = true;
                                }
                                else {
                                    var finaldata = TermFactory.BuyNow($scope, item);
                                    if ($scope.vIntegrationData[0].LandingUrl.toLowerCase() == "proposal integration") {
                                        $location.path("/Group-Proposal/" + btoa($scope.ProposalCpID))
                                    } else {
                                        $window.location.href = $scope.vIntegrationData[0].LandingUrl;
                                    }
                                }
                            }
                            else if ($scope.product == "Travel") {
                                if ($scope.vIntegrationData[0].LandingUrl == undefined || $scope.vIntegrationData[0].LandingUrl == "" || $scope.vIntegrationData[0].LandingUrl == null) {
                                    $scope.showbtnleadloader[item.ids] = false;
                                    $scope.showbtnloader1[item.ids] = false;
                                    $scope.BuyNowHelpPop = true;
                                }
                                else {
                                    var finaldata = $scope.vIntegrationData[0].LandingUrl;
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        $location.path("/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                    else {
                                        $window.location.href = finaldata;
                                    }
                                }
                            }
                            else if ($scope.product == "Investment") {
                                if ($scope.vIntegrationData[0].LandingUrl == undefined || $scope.vIntegrationData[0].LandingUrl == "" || $scope.vIntegrationData[0].LandingUrl == null) {
                                    $scope.showbtnleadloader[item.ids] = false;
                                    $scope.showbtnloader1[item.ids] = false;
                                    $scope.BuyNowHelpPop = true;
                                }
                                else {
                                    var finaldata = NonTermFactory.BuyNow($scope, item);
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        $location.path("/Investment/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                    else {
                                        if (item.PlanId == 667) {
                                            var min = Math.floor((Math.random() * 50) + 1);
                                            var max = Math.floor((Math.random() * 1000000) + 1);
                                            var requestID = Math.floor((Math.random() * max) + min);
                                            var param = { 'productId': 265, 'sourceId': "CBM_03122", 'requestID': requestID };
                                            OpenWindowWithPost(finaldata, "_self", param);


                                        }
                                        else {
                                            $window.location.href = finaldata;
                                        }

                                    }
                                }
                            }
                            else if ($scope.product == "Pension") {
                                if ($scope.vIntegrationData[0].LandingUrl == undefined || $scope.vIntegrationData[0].LandingUrl == "" || $scope.vIntegrationData[0].LandingUrl == null) {
                                    $scope.showbtnleadloader[item.ids] = false;
                                    $scope.BuyNowHelpPop = true;
                                }
                                else {
                                    var finaldata = NonTermFactory.BuyNow($scope, item);
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        $location.path("/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                    else {
                                        $window.location.href = finaldata;
                                    }
                                }
                            }
                            else if ($scope.product == "Child") {
                                if ($scope.vIntegrationData[0].LandingUrl == undefined || $scope.vIntegrationData[0].LandingUrl == "" || $scope.vIntegrationData[0].LandingUrl == null) {
                                    $scope.showbtnleadloader[item.ids] = false;
                                    $scope.BuyNowHelpPop = true;
                                }
                                else {
                                    var finaldata = NonTermFactory.BuyNow($scope, item);
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        $location.path("/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                    else {
                                        if (item.PlanId == 923) {
                                            var min = Math.floor((Math.random() * 50) + 1);
                                            var max = Math.floor((Math.random() * 1000000) + 1);
                                            var requestID = Math.floor((Math.random() * max) + min);
                                            var param = { 'productId': 265, 'sourceId': "CBM_03122", 'requestID': requestID };
                                            //OpenWindowWithPost(finaldata, "_self", param);
                                            $window.location.href = finaldata;

                                        }
                                        else {
                                            $window.location.href = finaldata;
                                        }
                                    }
                                }
                            }
                            else if ($scope.product == "Critical") {
                                if ($scope.vIntegrationData[0].LandingUrl == undefined || $scope.vIntegrationData[0].LandingUrl == "" || $scope.vIntegrationData[0].LandingUrl == null) {
                                    $scope.showbtnleadloader[item.ids] = false;
                                    $scope.BuyNowHelpPop = true;
                                }
                                else {
                                    var finaldata = CriticalFactory.BuyNow($scope, item);
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        $location.path("/CI-Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                    else {
                                        $window.location.href = finaldata;
                                    }
                                }
                            }
                        }, function (response) {
                            ServiceRespnse(response);
                        });


                    }, function (response) {
                        ServiceRespnse(response);
                    });

                }
                else if ($scope.utmSource != undefined) {
                    if (($scope.datafromproposal == undefined) && ($scope.utmSource.toUpperCase() != "MYBZYNESS" || $scope.utmSource.toUpperCase() != "PML" || $scope.utmSource.toUpperCase() != "WFL" || $scope.utmSource.toUpperCase() != "SDL" || $scope.utmSource.toUpperCase() != "TCL" || $scope.utmSource.toUpperCase() != "UVA" || $scope.noleadpop != true)) {

                        var SavePlanData = QuoteService.SavePlanData($scope.quotesrequest.IGQuoteId, item, $scope)
                        var urlservice = globals.ServiceURL + "/Lead.svc/web/SavePlanSelection";
                        $timeout(function () {
                            if ($scope.SavePlanDatatime == 0) {
                                $scope.TimeOutService(4, urlservice);
                                $scope.responsenull['SavePlanSelection'] = 0;
                            }
                            else {
                                $scope.SavePlanDatatime = 0;
                                $scope.responsenull['SavePlanSelection'] = 1;
                            }
                        }, 2000);
                        SavePlanData.then(function (pl) {
                            $scope.showbtnloader1[item.ids] = false;
                            $scope.GetTime['SavePlanSelection'] = new Date().getTime();
                            $scope.SavePlanDatatime = 1;

                            if ($scope.responsenull['SavePlanSelection'] == 0) {
                                $scope.totaltime['SavePlanSelection'] = parseInt($scope.GetTime['SavePlanSelection'] - $scope.HitTime['SavePlanSelection']);
                                $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime['SavePlanSelection']);
                            }
                            if (item.PolicyType == "FAMILY FLOATER" && $scope.productID == 3) {
                                familyfloater = 1;
                            }
                            else {
                                familyfloater = 0;
                            }
                            var redirecturl = QuoteService.PlanRedirection(item.PlanId, familyfloater, $scope);
                            $timeout(function () {
                            }, 2000);
                            redirecturl.then(function (pl) {
                                $scope.vIntegrationData = angular.fromJson(pl.data);
                                if ($scope.product == "Car") {
                                    var finaldata = CarFactory.BuyNow($scope, item.objectid);
                                    $scope = finaldata;
                                    if ($scope.quotesrequest.Requests[0].IsRenewal == true && $scope.quotesrequest.Requests[0].PreviousInsurerID == item.InsurerId) {
                                        $window.location.href = $scope.quotesrequest.Requests[0].RenewalUrl;
                                    }
                                    else {
                                        $location.path("/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                }
                                else if ($scope.product == "Twowheeler") {
                                    var finaldata = TwowheelerFactory.BuyNow($scope, item.objectid);
                                    if ($scope.quotesrequest.Requests[0].IsRenewal == true && $scope.quotesrequest.Requests[0].PreviousInsurerID == item.InsurerId) {
                                        $window.location.href = $scope.quotesrequest.Requests[0].RenewalUrl;
                                    }
                                    else {
                                        $location.path("/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                }
                                else if ($scope.product == "Health") {
                                    $scope = HealthFactory.BuyNow($scope, item);
                                    $scope.ReligareSubmitbtnloader = false;
                                    $scope.OpenReligarePopup = false;
                                    $rootScope.scrollhide = '';
                                    $scope.religaresmartloader = false;
                                }
                                else if ($scope.product == "Term") {
                                    var finaldata = TermFactory.BuyNow($scope, item);
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        if (item.InsurerId == globals.TermInsurerId.Maxlife || item.InsurerId == globals.TermInsurerId.Ipru) {
                                            $location.path("/Term-Proposal/" + btoa($scope.ProposalCpID))
                                        }
                                        else {
                                            $location.path("/Term-Proposal/" + btoa($scope.ProposalCpID))
                                        }
                                    }
                                    else {
                                        $window.location.href = finaldata;
                                    }
                                }
                                else if ($scope.product == "Travel") {

                                    if ($scope.vIntegrationData[0].LandingUrl.toLowerCase() == "proposal integration") {
                                        $location.path("/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                    else {
                                        $window.location.href = $scope.vIntegrationData[0].LandingUrl;

                                    }
                                }
                                else if ($scope.product == "Investment") {
                                    var finaldata = NonTermFactory.BuyNow($scope, item);
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        $location.path("/Investment/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                    else {
                                        if (item.PlanId == 667) {
                                            var min = Math.floor((Math.random() * 50) + 1);
                                            var max = Math.floor((Math.random() * 1000000) + 1);
                                            var requestID = Math.floor((Math.random() * max) + min);
                                            var param = { 'productId': 265, 'sourceId': "CBM_03122", 'requestID': requestID };
                                            OpenWindowWithPost(finaldata, "_self", param);


                                        }
                                        else {
                                            $window.location.href = finaldata;
                                        }

                                    }
                                }
                                else if ($scope.product == "Pension") {
                                    var finaldata = NonTermFactory.BuyNow($scope, item);
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        $location.path("/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                    else {
                                        $window.location.href = finaldata;
                                    }
                                }
                                else if ($scope.product == "Child") {
                                    var finaldata = NonTermFactory.BuyNow($scope, item);
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        $location.path("/Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                    else {
                                        if (item.PlanId == 923) {
                                            var min = Math.floor((Math.random() * 50) + 1);
                                            var max = Math.floor((Math.random() * 1000000) + 1);
                                            var requestID = Math.floor((Math.random() * max) + min);
                                            var param = { 'productId': 265, 'sourceId': "CBM_03122", 'requestID': requestID };
                                            //OpenWindowWithPost(finaldata, "_self", param);
                                            $window.location.href = finaldata;

                                        }
                                        else {
                                            $window.location.href = finaldata;
                                        }
                                    }
                                }
                                else if ($scope.product == "Critical") {
                                    var finaldata = CriticalFactory.BuyNow($scope, item);
                                    if (finaldata.toLowerCase() == "proposal integration") {
                                        $location.path("/CI-Proposal/" + btoa($scope.ProposalCpID));
                                    }
                                    else {
                                        $window.location.href = finaldata;
                                    }
                                }

                            }, function (response) {
                                ServiceRespnse(response);
                            });
                        }, function (response) {
                            ServiceRespnse(response);
                        });

                    }
                }
                else {
                    $rootScope.showleadpopup = true;
                    $rootScope.scrollhide = 'scollClass';
                    // // $scope.$root.scrollhide = "scrollhides";
                    $scope.proposalflag = true;
                    $scope.template("Lead", true);
                }

            }, function (response) {
                ServiceRespnse(response);
            });


            //care freedom

        }




        $scope.LeadCreationStep1time = 0;
        // Lead Creation Start

        // Lead Creation End
        //Click to Call Start
        // Lead Creation End
        //Click to Call Start


        function OpenWindowWithPost(url, name, params) {
            var form = document.createElement("form");
            form.setAttribute("method", "post");
            form.setAttribute("action", url);
            form.setAttribute("target", name);

            for (var i in params) {
                if (params.hasOwnProperty(i)) {
                    var input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = i;
                    input.value = params[i];
                    form.appendChild(input);
                }
            }

            document.body.appendChild(form);

            //note I am using a post.htm page since I did not want to make double request to the page 
            //it might have some Page_Load call which might screw things up.
            window.open("post.htm", name);

            form.submit();

            document.body.removeChild(form);
        }




        $scope.clicktocallfn = function (id) {
            $scope.iscallback = true;
            $scope.showcantdecide = true;
            if (id == 2) {
                $scope.resendFlag = true;
            }
            else {
                $scope.resendFlag = false;
            }
            if (ValidationFactory.mobilevalidate($scope.usertxtMobileNumber) == "False" || $scope.usertxtMobileNumber == undefined) {
                $scope.showcantdecide = false;
                $scope.showclicktocallerror = true;
            }
            else {
                $scope.userMobileNumber = $scope.usertxtMobileNumber;
                // $scope.historyback("c2c");
                // $scope.otpFn(0, 1);
                var a = 'Click to Call Submit ' + $scope.gaProduct;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });
                if ($scope.userMobileNumber != undefined && id != 1) {
                    $scope.otpFn('', "clicktocall");
                }
                if (id == 1) {
                    $scope.LeadCreationStep1(2, 1);
                }
                $scope.showclicktocallerror = false;
            }
        }
        //Click to Call End


        $scope.showPremiumpopdetails = function (item, id) {
            if (id > 0) {

                $scope.showPopviewdetails(item);
            }
            else {

                $scope.OpenPremiumBreakupPop(true, item)
            }
        }


        $scope.zonechange = function () {
            $scope = HealthFactory.ZoneChange($scope);
        }

        $scope.imgbtn_Cigna_City_Click = function () {
            $scope.zoneclickload = true;
            $scope.showProductMoreTemplate = true;
            $scope.loadProductMoreTemplate = '../HomePage/Template/HealthMore.html';
            $scope = HealthFactory.imgbtn_Cigna_City_Click($scope);
        }

        $scope.btnRecalculatePremium_Click = function () {
            $scope.zonepremiumclickload = true;
            $scope = HealthFactory.btnRecalculatePremium_Click($scope);
        }

        $scope.AddoneSelection = function () {
            $scope = HealthFactory.AddoneSelection($scope);
        }

        $scope.AddoneSelectionCopay = function () {
            $scope = HealthFactory.AddoneSelectionCopay($scope);
        }

        $scope.btnRecalculate_Addon_Premium_Click = function () {
            $scope.addonepremiumclickload = true;
            $scope = HealthFactory.btnRecalculate_Addon_Premium_Click($scope);
        }

        $scope.imgbtn_Cigna_Addon_Click = function () {
            $scope.addoneclickload = true;
            $scope = HealthFactory.imgbtn_Cigna_Addon_Click($scope);
        }


        $scope.viewmore = function (methodname, type) {
            var a = "Left Panel View Text " + type;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


            $scope = CommonFactory.viewmorefunction($scope, methodname, type);
        }

        $scope.replacestring = function (value) {
            var convtstring = value.toString();
            return convtstring.replace('-', '');
        }



        $scope.Mobilefilter = function (id) {
            if ($scope.showloader != true) {
                $scope.showresuslt = true;
            }
            else {
                $scope.showresuslt = false;
            }

            $scope.filterBtnLoader = true;
            if ($scope.product == 'Health') {
                //                if ($scope.Medicaltest == 0)
                //                    $scope.healthleftpanel(1);
                //                if (id == 1) {
                //                    $scope.healthleftpanel(1);
                //                }
                if ($scope.Medicaltest > 0) {
                    $scope.DeleteChipFunction('SetFilterChip', 'Set', 'Medical Test')
                }
            }

        }

        $scope.clearfilter = function (value) {
            if (value != undefined && value == 0) {
                if ($scope.product == 'Health') {

                    for (var i = 1; i <= $scope.HealthFeatureData.length; i++) {
                        $scope.benefit[i] = false;
                        var label = ($filter('filter')($scope.HealthFeatureData, function (d) { return d.id == i; }))[0].text;
                        $scope = HealthFactory.SelectBenefit($scope, i, label);
                    }
                    for (var i = 1; i <= $scope.HealthSufferrData.length; i++) {
                        $scope.suffer[i] = false;
                        $scope = HealthFactory.SelectSuffer($scope, i, $filter('filter')($scope.HealthSufferrData, function (d) { return d.id == i; })[0].text);
                    }

                    $scope.user.SumInsured = 0;
                    $scope.data11.group1 = 0;
                    if ($scope.todos.length > 3)
                        $scope.todos = [];
                    if ($scope.Medicaltest == 0) { $scope.healthleftpanel(1); }

                    else {
                        item = { text: 'Medical Test' }
                        $scope.DeleteChipFunction('SetFilterChip', 'Delete', item);
                    }

                }
            }
        }


        //    $scope.updatedallHospitallist = function () {
        //        $scope.Network_Hospital = $scope.Network_Hospital;
        //     //   $scope.Network_Hospital = [];
        //        //   $scope.Network_Hospital.push({ NetworkHospitalName: "Showing only hospitals in your city. View all", NetworkHospitalID: '0' })
        //    };

        $scope.GetAllHospital = function () {
            if ($scope.selecthospital != 'GetHospital') {
                $scope.selecthospital = 'GetHospital';
                var fngetHealth_NetworkHospital = FeatureService.fngetHealth_NetworkHospital($scope);
                $timeout(function () {
                }, 5000);
                fngetHealth_NetworkHospital.then(function (pl) {
                    $scope.Network_Hospital = angular.fromJson(angular.fromJson(pl.data)).fngetHealth_NetworkHospitalResult;
                }, function (response) {
                    ServiceRespnse(response);
                });

            }
            else {
                // alert("Sorry This hospital is not available in Our Record");
            }
        }

        $scope.bindnerworkhospital = function () {
            $scope.selecthospital = undefined;
            $scope.NetworkHospitalName = undefined;
            $scope.Network_Hospital = undefined;
            $scope.Network_Hospital = [];
            var fngetHealth_NetworkHospital = FeatureService.fngetHealth_NetworkHospital($scope);
            fngetHealth_NetworkHospital.then(function (pl) {
                $scope.Network_Hospital = angular.fromJson(angular.fromJson(pl.data)).fngetHealth_NetworkHospitalResult;
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        $scope.newOrderbyfield = function (sortkey) {
            var a = $scope.product + "Sorting";


            var atxt = 'Sorting ' + sortkey + " " + $scope.gaProduct;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: atxt, value: $scope.productID });

            if (sortkey == "-ClaimSettlementPercent") {
                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    if ($scope.Quotes_Data[i].ClaimSettlementPercent == null)
                        $scope.Quotes_Data[i].ClaimSettlementPercent = -1;
                }
            }
            if ($scope.sortkey == "-HistoricalMaturityBenefit") {
                $scope.selecteGrowth = "1";
            }
            else if ($scope.sortkey == "-MaturityBenefit") {
                $scope.selecteGrowth = "2";
            }
            $scope.orderByField = sortkey;
            $scope.predicate = sortkey;
        }

        $scope.TimeOutService = function (flag, urlservice, ServiceName, totaltime) {
            var vm = this;
            vm.data = deviceDetector;
            var a = ServiceName + " Service Responding Late";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            vm.allData = JSON.stringify(vm.data, null, 2);
            var TimeOut = CommonService.TimeOutcommonService(flag, $scope.IGquoteId, $scope.product, vm.data.browser, vm.data.os_version, urlservice, $scope.ip, ServiceName, $scope.device, $rootScope.online, totaltime);

            TimeOut.then(function (result) {
                TimeOut = result.data;
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        $scope.showSimpleToast = function () {
            $mdToast.show(
                $mdToast.simple()
                    .textContent($scope.ToastText)
                    .position('top right')
                    .hideDelay(3000)
            );
        };
        $scope.template = function (a, flag, flag0) {
            if (a == "Lead") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/Leadpopup.html';
                $location.search("Leadpop", "true");
                $rootScope.leadpopviewflag = 1;

            }
            else if (a == "csLead") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/csLeadPopup.html';
                $location.search("csLeadPopup", "true");
                $rootScope.leadpopviewflag = 1;
            }
            else if (a == "HdfcZeroDept") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/HdfcZeroDept.html';
            }
            else if (a == "PremiumDetails") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/PremiumDetails.html';
            }
            else if (a == "CarEdit") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/CarEdit.html';
            }
            else if (a == "TWEdit") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/TWEdit.html';
            }
            else if (a == "InvestmentEdit") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/InvestmentEdit.html';
            }
            else if (a == "PensionEdit") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/PensionEdit.html';
            }
            else if (a == "ChildEdit") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/ChildEdit.html';
            }
            else if (a == "TravelEdit1") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/TravelEdit1.html';
            }
            else if (a == "TravelEdit2") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/TravelEdit2.html';
            }
            else if (a == "TermEdit") {
                $scope.showloadtemplate = flag;
                if (flag0 == 1) {
                    $scope.loadtemplate = '../HomePage/Template/TermEdit1.html';
                }
                else {
                    $scope.loadtemplate = '../HomePage/Template/TermEdit.html';
                }

            }
            else if (a == "HealthEdit") {
                $scope.showloadtemplate = flag;
                if (flag0 == 1) {
                    $scope.loadtemplate = '../HomePage/Template/HealthEdit1.html';
                }
                else {
                    if ($rootScope.healthdata) {
                        if ($rootScope.healthdata.Requests[0].IsCovid)
                            $scope.loadtemplate = '../HomePage/Template/CovidEdit.html';
                        else
                            $scope.loadtemplate = '../HomePage/Template/HealthEdit.html';
                    }
                }

            }
            else if (a == "Sharepop") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/Sharepop.html';
            }
            else if (a == "Emailpopup") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/Emailpopup.html';
            }
            else if (a == "popdetailsmobile") {
                $scope.showloadtemplate = flag;
                if ($scope.product == 'Health' && $scope.gaProduct != "Health Super") {
                    if ($rootScope.healthdata.Requests[0].IsCovid) {
                        $rootScope.loadtemplate = '../HomePage/Template/CovidMoreInfo.html';
                    }
                    else {
                        $rootScope.loadtemplate = '../HomePage/Template/HealthMoreInfo.html';
                    }
                }
                else if ($scope.product == 'Term') {
                    $rootScope.loadtemplate = '../HomePage/Template/TermMoreInfo.html';
                }
                else if ($scope.product == 'Investment') {
                    $rootScope.loadtemplate = '../HomePage/Template/InvestmentMoreInfo.html';
                }
                else {
                    $rootScope.loadtemplate = '../HomePage/Template/popdetailsmobile.html';
                }

                //  $rootScope.loadtemplate = '../HomePage/Template/popdetailsmobile.html';

                // $rootScope.loadtemplate = '../HomePage/Template/popdetailsmobile.html';

                $scope.$root.sharethepage = false;
            }
            else if (a == "nontermpopdetailsmobile") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/nontermpopdetailsmobile.html';
                $scope.$root.sharethepage = false;
            }
            else if (a == "CoverCalculation") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/CoverCalculation.html';
            }
            else if (a == "Thanks") {
                $scope.showloadtemplate = flag;
                $scope.loadtemplate = '../HomePage/Template/Thanks.html';
            }
            else if (a == "Sliderpopup") {
                $scope.showloadtemplate = flag;
                $scope.TermSliderpopupSrc = '../HomePage/Template/TermSliderpopup.html';
            }
            else if (a == "NonTermSliderpopup") {
                $scope.showloadtemplate = flag;
                $scope.TermSliderpopupSrc = '../HomePage/Template/NonTermSliderpopup.html';
            }

        }
        $scope.ViewMoreOpt = function (type) {
            if (type == 'More') {
                $scope.hideOpt = true;
                $scope.showOpt = false;
                $scope.Optlimit = 3;
            }
            else {
                $scope.hideOpt = false;
                $scope.showOpt = true;
                $scope.Optlimit = 2;
            }
        }
        $scope.sorting = function (name) {

            var a = "Sorting Change";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


            if (name == "-ClaimSettlementPercent") {
                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    if ($scope.Quotes_Data[i].ClaimSettlementPercent == null)
                        $scope.Quotes_Data[i].ClaimSettlementPercent = null;
                }
            }
        }
        $(window).scroll(function () {
            if (($scope.Comparedisplay == undefined || $scope.Comparedisplay == false) && ($(this).scrollTop() > 225)) {
                $(".fixTitleBg").addClass("fixed-pos");
            } else {
                $(".fixTitleBg").removeClass("fixed-pos");
            }

            if (($scope.Comparedisplay == true) && ($(this).scrollTop() > 50)) {
                $(".fixTitleBg").addClass("fixed-pos-compare");
                $(".fixCompare").addClass("fixed-pos");
            }
            else {
                $(".fixTitleBg").removeClass("fixed-pos-compare");
                $(".fixCompare").removeClass("fixed-pos");
            }
        });

        // term slider calculatoin

        $scope.ridercalulationfrterm = function (rideritem, flag, item, id, diabeticid) {
            if (!rideritem.isDisabled) {
                $scope.TermSliderpopupSrc = '../HomePage/Template/TermSliderpopup.html';
                if ($scope.ADDisablemodel[item.PlanId + ',1'] != true || rideritem.RiderId != 1 || item.PlanId != 890) {
                    Termrideritem = rideritem;
                    Termflag = flag;
                    Termritem = item;
                    if (id != undefined && id != 'getquote')
                        $scope.editid = id;
                    if (item != undefined) {
                        $scope.item1 = item;
                        $scope.Tempitem = angular.copy(item);
                    }
                    else
                        $scope.item1;
                    if (rideritem.SAdissabled != true && ($scope.item1.InsurerId != 20 || diabeticid == false || $scope.diabeticsuffer == 'no' || $scope.mdrider[$scope.item1.PlanId + ',' + rideritem.RiderId] == true || (rideritem.RiderId != 3 && rideritem.RiderId != 6 && rideritem.RiderId != 11 && rideritem.RiderId != 15 && rideritem.RiderId != 16 && rideritem.RiderId != 17))) {
                        if (rideritem.BundleId > 0 && (flag == 1 || flag == 5 || flag == 4 || flag == 6)) {
                            $scope.ridercheckradiobtn(rideritem, item, id);
                        }
                        else if (rideritem.BundleId == 0 && rideritem.SAdissabled != true && (flag == 1 || flag == 5 || flag == 4 || flag == 6)) {
                            $scope = TermFactory.insertselectedrider($scope, $rootScope, rideritem, flag, $scope.item1, id);
                        }
                        else if (flag == 2)
                            $scope = TermFactory.updateridercalculation($scope, $rootScope, rideritem, flag, $scope.item1, $scope.editid);
                        else if (flag == 3) {
                            // this code run when model is unchecked      
                            if ($scope.mdrider[rideritem.PlanId + ',' + rideritem.RiderId]) {
                                $scope = TermFactory.insertselectedrider($scope, $rootScope, rideritem, flag, $scope.item1);
                            }
                            else {
                                $scope = TermFactory.insertselectedrider($scope, $rootScope, rideritem, flag, $scope.item1);
                            }
                            if (rideritem.RiderId == 1 && item != undefined) {
                                if (item.PlanId == 890) {
                                    if ($scope.mdrider[item.PlanId + ',' + rideritem.RiderId] == true) {
                                        $scope.increasingSADisablemodel[item.PlanId] = false;
                                    }
                                    else {
                                        $scope.increasingSADisablemodel[item.PlanId] = true;
                                    }
                                }
                            }
                        }
                        $scope.template("Sliderpopup", true);
                        $location.search("sumassuredpop", "true");
                        termselectedchip();

                        var refresh = undefined;
                        if (id == "edit") {
                            $rootScope.scrollhide = 'scollClass';
                        }
                        if (rideritem.RiderId == 1 && item != undefined) {
                            var rideritemTemp = rideritem;
                            var itemnewTemp = item;
                            $timeout(function () {
                                $scope.showincreasing(rideritemTemp, itemnewTemp);
                            }, 100);
                        }
                        if ($scope.item1.InsurerId == 20) {
                            rideritemTemp1 = angular.copy(rideritem);
                            $timeout(function () {

                                MaxCABCal();
                            }, 100);
                        }
                        if ($rootScope.jointlifemodel != undefined && item.InsurerId == 19) {
                            if ($rootScope.jointlifemodel[item.PlanId] == true) {
                                Addjointlifeplan($scope.PlanItem);
                            }
                        }
                    }
                    else {
                        $scope.mdrider[item.PlanId + ',' + rideritem.RiderId] = false;
                        if (item.InsurerId == 20) {
                            if ($scope.ADDisablemodel[item.PlanId + ',' + 3] != true && $scope.ADDisablemodel[item.PlanId + ',' + 6] != true && $scope.ADDisablemodel[item.PlanId + ',' + 11] != true && $scope.ADDisablemodel[item.PlanId + ',' + 15] != true && $scope.ADDisablemodel[item.PlanId + ',' + 16] != true && $scope.ADDisablemodel[item.PlanId + ',' + 17] != true) {
                                $rootScope.scrollhide = "scollClass";
                                $scope.MaxItem = item;
                                $scope.diabeticsuffer = undefined;
                                $scope.showdiabeticpop = true;
                                $scope.diabeticpopques = true;
                            }
                        }
                    }
                }
            }
        }


        $scope.ridercalulationfrnonterm = function (rideritem, flag, item, id, diabeticid) {
            $scope.TermSliderpopupSrc = '../HomePage/Template/NonTermSliderpopup.html';
            if ($scope.ADDisablemodel[item.PlanId + ',1'] != true || rideritem.RiderId != 1 || item.PlanId != 890) {
                Termrideritem = rideritem;
                Termflag = flag;
                Termritem = item;
                if (id != undefined && id != 'getquote')
                    $scope.editid = id;
                if (item != undefined) {
                    $scope.item1 = item;
                    $scope.Tempitem = angular.copy(item);
                }
                else
                    $scope.item1;
                if (rideritem.SAdissabled != true && ($scope.item1.InsurerId != 20 || diabeticid == false || $scope.diabeticsuffer == 'no' || $scope.mdrider[$scope.item1.PlanId + ',' + rideritem.RiderId] == true || (rideritem.RiderId != 3 && rideritem.RiderId != 6))) {
                    if (rideritem.BundleId > 0 && (flag == 1 || flag == 5 || flag == 4 || flag == 6)) {
                        $scope.ridercheckradiobtn(rideritem, item, id);
                    }
                    else if (rideritem.SAdissabled != true && (flag == 1 || flag == 5 || flag == 4 || flag == 6)) {
                        $scope = NonTermFactory.insertselectedrider($scope, $rootScope, rideritem, flag, $scope.item1, id);
                    }
                    else if (flag == 2)
                        $scope = NonTermFactory.updateridercalculation($scope, $rootScope, rideritem, flag, $scope.item1, $scope.editid);
                    else if (flag == 3) {
                        // this code run when model is unchecked      
                        if ($scope.mdrider[rideritem.PlanId + ',' + rideritem.RiderId]) {
                            $scope = NonTermFactory.insertselectedrider($scope, $rootScope, rideritem, flag, $scope.item1);
                        }
                        else {
                            $scope = NonTermFactory.insertselectedrider($scope, $rootScope, rideritem, flag, $scope.item1);
                        }
                        if (rideritem.RiderId == 1 && item != undefined) {
                            if (item.PlanId == 890) {
                                if ($scope.mdrider[item.PlanId + ',' + rideritem.RiderId] == true) {
                                    $scope.increasingSADisablemodel[item.PlanId] = false;
                                }
                                else {
                                    $scope.increasingSADisablemodel[item.PlanId] = true;
                                }
                            }
                        }
                    }
                    $scope.template("NonTermSliderpopup", true);
                    $location.search("sumassuredpop", "true");
                    termselectedchip();

                    var refresh = undefined;
                    if (id == "edit") {
                        $rootScope.scrollhide = 'scollClass';
                    }
                    if (rideritem.RiderId == 1 && item != undefined) {
                        var rideritemTemp = rideritem;
                        var itemnewTemp = item;
                        $timeout(function () {
                            $scope.showincreasing(rideritemTemp, itemnewTemp);
                        }, 100);
                    }
                    if ($scope.item1.InsurerId == 20) {
                        rideritemTemp1 = angular.copy(rideritem);
                        $timeout(function () {

                            MaxCABCal();
                        }, 100);
                    }
                    if ($rootScope.jointlifemodel != undefined && item.InsurerId == 19) {
                        if ($rootScope.jointlifemodel[item.PlanId] == true) {
                            Addjointlifeplan($scope.PlanItem);
                        }
                    }
                }
                else {
                    $scope.mdrider[item.PlanId + ',' + rideritem.RiderId] = false;
                    if (item.InsurerId == 20) {
                        if ($scope.ADDisablemodel[item.PlanId + ',' + 3] != true && $scope.ADDisablemodel[item.PlanId + ',' + 6] != true) {
                            $rootScope.scrollhide = "scollClass";
                            $scope.MaxItem = item;
                            $scope.diabeticsuffer = undefined;
                            $scope.showdiabeticpop = true;
                            $scope.diabeticpopques = true;
                        }
                    }
                }
            }
        }

        function MaxCABCal(rider) {
            for (var s = 0; s < $scope.Quotes_Data.length; s++) {
                var insurerid = 0;
                var planid = 0;
                if (rider == undefined && rideritemTemp1 != undefined) {
                    insurerid = rideritemTemp1.InsurerId;
                    planid = rideritemTemp1.PlanId;
                }
                if (($scope.Quotes_Data[s].InsurerId == insurerid && planid == $scope.Quotes_Data[s].PlanId) || ((rider == 3 || rider == 6) && $scope.Quotes_Data[s].InsurerId == 20)) {
                    var itemnewTemp1 = angular.copy($scope.Quotes_Data[s]);
                    if (rider != undefined) {
                        rideritemTemp1 = $filter('filter')(itemnewTemp1.AvailableRiders, function (d) { return d.RiderId == rider })[0];
                    }
                    var maxitem = TermFactory.MaxCABCalculation($scope, rideritemTemp1, itemnewTemp1);
                    for (var z = 0; z < $scope.Quotes_Data[s].AvailableRiders.length; z++) {
                        if ($scope.Quotes_Data[s].AvailableRiders[z].RiderId == 88) {
                            if ($scope.mdrider[$scope.Quotes_Data[s].PlanId + ',8'] == true) {
                                $scope.Quotes_Data[s].Premium = Math.round($scope.Quotes_Data[s].Premium + (maxitem.RiderPremium - $scope.Quotes_Data[s].AvailableRiders[z].RiderPremium));
                                $scope.Quotes_Data[s].AnnualPremium = Math.round($scope.Quotes_Data[s].AnnualPremium + (maxitem.AnnualPremium - $scope.Quotes_Data[s].AvailableRiders[z].AnnualPremium));
                                $scope.Quotes_Data[s].MonthlyPremium = Math.round($scope.Quotes_Data[s].MonthlyPremium + (maxitem.RiderMonthlyPremium - $scope.Quotes_Data[s].AvailableRiders[z].RiderMonthlyPremium));
                            }
                            $scope.Quotes_Data[s].AvailableRiders[z].AnnualPremium = angular.copy(maxitem.AnnualPremium);
                            $scope.Quotes_Data[s].AvailableRiders[z].RiderMonthlyPremium = angular.copy(maxitem.RiderMonthlyPremium);
                            $scope.Quotes_Data[s].AvailableRiders[z].RiderPremium = angular.copy(maxitem.RiderPremium);
                            $scope.Quotes_Data[s].AvailableRiders[z].SelectedSumAssured = angular.copy(maxitem.SelectedSumAssured);
                            $scope.Quotes_Data[s].AvailableRiders[z].MaxSumAssured = angular.copy(maxitem.MaxSumAssured);
                        }
                    }
                }
            }
        }
        $scope.showincreasing = function (rideritem, item) {

            if (item.IncreasingSAValidate > 0 && $scope.mdrider[item.PlanId + ',' + rideritem.RiderId] == true) {
                var riderval1 = $filter('filter')(item.AvailableRiders, function (d) { return d.RiderId == rideritem.RiderId })[0];
                if (rideritem.MaxSumAssured == undefined) {
                    rideritem = riderval1;
                }
                var RiderSa = rideritem.MaxSumAssured;
                if (rideritem.SelectedSumAssured > 0) {
                    RiderSa = rideritem.SelectedSumAssured;
                }
                if (parseInt($scope.quotesrequest.Requests[0].SumAssured + RiderSa) < item.IncreasingSAValidate && $scope.quotesrequest.Requests[0].SumAssured <= 15000000) {
                    $scope.HideIncreasingSA(item.IncreasingSAValidate, parseInt($scope.quotesrequest.Requests[0].SumAssured), RiderSa);
                }
                if (item.SumAssured > 15000000 || $scope.totalcount1 == 0 || parseInt($scope.quotesrequest.Requests[0].SumAssured + RiderSa) > item.IncreasingSAValidate) {
                    for (var n = 0; n < $scope.Quotes_Data.length; n++) {
                        if ($scope.Quotes_Data[n].PlanId == item.PlanId) {

                            $scope.Quotes_Data[n].IncreasingSumAssured = 0;
                            $scope.Quotes_Data[n].IsIncreasingSA = false;
                            $scope.mdrider[rideritem.PlanId + ',' + 'IncreasingSumAssured'] = false;
                        }
                    }
                }
                else {
                    for (var n = 0; n < $scope.Quotes_Data.length; n++) {
                        if ($scope.Quotes_Data[n].PlanId == item.PlanId) {
                            if ($scope.Quotes_Data[n].IncreasingSAValue > $scope.totalcount1 || $scope.mdrider[item.PlanId + ',' + 'IncreasingSumAssured'] != true) {
                                $scope.Quotes_Data[n].IncreasingSAValue = $scope.totalcount1;
                            }

                            $scope.Quotes_Data[n].IncreasingSumAssured = 3;
                        }
                    }
                }
            }
            else {
                for (var n = 0; n < $scope.Quotes_Data.length; n++) {
                    if ($scope.Quotes_Data[n].PlanId == item.PlanId && item.IncreasingSAValidate > 0) {

                        $scope.Quotes_Data[n].IncreasingSumAssured = 3;
                        if ($scope.mdrider[item.PlanId + ',' + 'IncreasingSumAssured'] != true) {
                            $scope.Quotes_Data[n].IncreasingSAValue = 10;
                        }
                        $scope.totalcount1 = 10;
                    }
                }
            }
            $scope.TermleftpanelDissablefn();
        }
        $scope.JointLifeBuynow = function (item, index) {
            $scope.jointbtnloader1 = [];
            // $scope.Tempreimium = angular.copy(item.Premium);
            item.Premium = $scope.ShowTotalJointLifePremium;
            $scope.jointbtnloader1[item.PlanId] = true;
            $scope.getPlanDetails(item, index, true);
        }
        $scope.getPlanDetails = function (item, index, flag) {
            if ($scope.ProductId == 3 && item.InsurerId == 20) {
                $scope.maxCharLength = "75";
                $scope.maxEmailLength = "52";
            }
            if (flag != true && $scope.ProductId == 3 && item.InsurerId == 19 && $rootScope.jointlifemodel != undefined) {
                $rootScope.jointlifemodel[item.PlanId] = false;
                if (item.PayingMode.toLowerCase() == "monthly") {
                    item.Premium = item.MonthlyPremium;
                }
                else {
                    item.Premium = item.AnnualPremium;
                }
            }
            if (item.InsurerId == 20 && $scope.ProductId == 3) {
                $scope.maxplan = item;
                var totalRiderPremium = 0;
                $scope.userselectionrider.forEach(function (userRider) {
                    if (item.PlanId == userRider.PlanId && (userRider.RiderId == 11 || userRider.RiderId == 15 || userRider.RiderId == 16 || userRider.RiderId == 17 || userRider.RiderId == 6)) {
                        totalRiderPremium = totalRiderPremium + userRider.RiderPremium;
                    }
                });
                if ((item.PayingMode == "monthly" || item.PayingMode == "Monthly") && item.OriginalmonthlyPremium < totalRiderPremium) {
                    $scope.IsExceedRiderPremium = true;
                }
                else if (item.OriginalannualPremium < totalRiderPremium) {
                    $scope.IsExceedRiderPremium = true;
                }
                else {
                    if (item.IsIncreasingSA == true && item.IncreasingSAValue != undefined) {
                        item.IncreasingSA = item.IncreasingSAValue;
                    }
                    $scope.finalPlan = TermFactory.gettingPlanId($scope, item);
                    if ($scope.finalPlan != undefined) {
                        $scope.GetLeadPop($scope.finalPlan, flag);
                    }
                }
            }
            else {
                if (item.IsIncreasingSA == true && item.IncreasingSAValue != undefined) {
                    item.IncreasingSA = item.IncreasingSAValue;
                }
                $scope.finalPlan = TermFactory.gettingPlanId($scope, item);
                if ($scope.finalPlan != undefined) {
                    $scope.GetLeadPop($scope.finalPlan, flag);
                }
            }

        }
        // method for monthly income selection
        $scope.ChooseMonthlyIncome = function (value) {
            if (value != undefined) {
                $scope.validatemonthlyincome = false;
                if (value.incomevalue != undefined) {
                    $scope.DefaultMonthlyIncome = value.incomevalue;
                    $scope.txtMonthlyIncome = value.incomevalue;
                }
                else {
                    $scope.txtMonthlyIncome = $scope.DefaultMonthlyIncome;
                }
                if ($scope.quotesrequest.Requests[0].MonthlyIncome != undefined && $scope.quotesrequest.Requests[0].MonthlyIncome > 0) {
                    $scope.TempMonthlyIncome = $scope.quotesrequest.Requests[0].MonthlyIncome;
                }
                $scope.quotesrequest.Requests[0].MonthlyIncome = $scope.DefaultMonthlyIncome;
                $scope.validatemonthlyincome = false;

                $scope.Initialzedata();

            }
            return $scope;
        }
        $scope.setmonthlyincome = function (item, id) {
            var itemincome = item;
            if (id == 'leftpanel' && $scope.IncomereplacementMonthlyPayout == true) {
                $scope.ChooseMonthlyIncome(item);
            }
            else {
                $scope.incomeMonthlypayout = item;
            }
            $scope.txtMonthlyIncome = parseInt(item);
        }
        $scope.silderpopupfortermClose = function () {
            $rootScope.silderpopupforterm = false;
            $scope.showincreasindropdown = false;
            if ($scope.Tempitem.SumOfPremiaum > 0 && $scope.termapplyLoader == true) {
                var idx = $scope.Quotes_Data.indexOf(($filter('filter')($scope.Quotes_Data, function (d) { return d.PlanId == $scope.Tempitem.PlanId })[0]));
                if (idx > -1) {
                    $scope.Quotes_Data.splice(idx, 1);
                    $scope.Quotes_Data.push($scope.Tempitem);
                    $scope.item1 = $scope.Tempitem;
                }
            }
            $rootScope.scrollhide = '';
        }
        $scope.TermriderchipClose = function (riderchipitem, item) {
            if (riderchipitem.BundleId == 0) {
                $scope.ridercalulationfrterm(riderchipitem, 1, item, 1);
            }
            else if (riderchipitem.NoResponse > 0) {
                $scope.ridercalulationfrterm(riderchipitem, 1, item);
            }
            termselectedchip();

        }
        function termselectedchip() {
            if ($scope.userselectionrider != null && $scope.userselectionrider != undefined && $scope.Quotes_Data != undefined) {
                for (var q = 0; q < $scope.Quotes_Data.length; q++) {
                    var rideridxlength = $filter('filter')($scope.userselectionrider, function (d1) { return d1.PlanId == $scope.Quotes_Data[q].PlanId });

                    $scope.Quotes_Data[q].FreeRiderlengthForMobile = rideridxlength.length;
                }
            }
        }
        $scope.termaddonssumassured = function () {
            if ($scope.riderslider.length > 0 && $scope.TermAddonSA != null && $scope.TermAddonSA != undefined) {
                if ($scope.riderslider[0].SelectedSumAssured != $scope.TermAddonSA.AddonsSumAssuredvalue) {
                    $scope.showriderpremium = false;
                    $scope.riderslider[0].SelectedSumAssured = $scope.TermAddonSA.AddonsSumAssuredvalue;
                    if ($scope.riderslider[0].RiderId == 8) {
                        var CABpremium = Math.round(($scope.riderslider[0].SelectedSumAssured * $scope.riderslider[0].Rates / $scope.riderslider[0].MFactor) * $scope.riderslider[0].RiderServiceTax);
                        $scope.riderslider[0].AnnualPremium = Math.round(CABpremium);
                        $scope.riderslider[0].RiderMonthlyPremium = Math.round(CABpremium * $scope.riderslider[0].MonthlyFactor);
                        $scope.riderslider[0].RiderPremium = $scope.riderslider[0].AnnualPremium;
                        if ($scope.item1.PayingMode.toLowerCase() == "monthly") {
                            $scope.riderslider[0].RiderPremium = $scope.riderslider[0].RiderMonthlyPremium;
                        }
                    }
                    if ($scope.riderslider[0].BundleId > 0) {
                        ridercalulationfn($scope.riderslider[0]);
                    }
                    else {
                        // $scope.riderpremiumloader[$scope.riderslider[0].PlanId + ',' + $scope.riderslider[0].RiderId] = true;
                        if ($scope.riderslider[0].RiderId == 1 && $scope.riderslider[0].PlanId == 890) {
                            $scope.TermIncomeOptionPlan($scope.riderslider[0], $scope.item1);
                        }
                        else {
                            $scope.ridercalulationfrterm($scope.riderslider[0], 2, $scope.item1);
                            for (var q = 0; q < $scope.Quotes_Data.length; q++) {
                                if ($scope.Quotes_Data[q].PlanId == $scope.riderslider[0].PlanId && $scope.Quotes_Data[q].IncreasingSAValidate > 0 && $scope.riderslider[0].RiderId == 1) {
                                    $scope.showincreasing($scope.riderslider[0], $scope.Quotes_Data[q], 'refresh');
                                }
                            }
                        }
                    }
                }
            }
        }

        $scope.Nontermaddonssumassured = function () {
            if ($scope.riderslider.length > 0 && $scope.TermAddonSA != null && $scope.TermAddonSA != undefined) {
                if ($scope.riderslider[0].SelectedSumAssured != $scope.TermAddonSA.AddonsSumAssuredvalue) {
                    $scope.showriderpremium = false;
                    $scope.riderslider[0].SelectedSumAssured = $scope.TermAddonSA.AddonsSumAssuredvalue;
                    if ($scope.riderslider[0].RiderId == 8) {
                        var CABpremium = Math.round(($scope.riderslider[0].SelectedSumAssured * $scope.riderslider[0].Rates / $scope.riderslider[0].MFactor) * $scope.riderslider[0].RiderServiceTax);
                        $scope.riderslider[0].AnnualPremium = Math.round(CABpremium);
                        $scope.riderslider[0].RiderMonthlyPremium = Math.round(CABpremium * $scope.riderslider[0].MonthlyFactor);
                        $scope.riderslider[0].RiderPremium = $scope.riderslider[0].AnnualPremium;
                        if ($scope.item1.PayingMode.toLowerCase() == "monthly") {
                            $scope.riderslider[0].RiderPremium = $scope.riderslider[0].RiderMonthlyPremium;
                        }
                    }
                    if ($scope.riderslider[0].BundleId > 0) {
                        ridercalulationfn($scope.riderslider[0]);
                    }
                    else {
                        // $scope.riderpremiumloader[$scope.riderslider[0].PlanId + ',' + $scope.riderslider[0].RiderId] = true;
                        if ($scope.riderslider[0].RiderId == 1 && $scope.riderslider[0].PlanId == 890) {
                            $scope.TermIncomeOptionPlan($scope.riderslider[0], $scope.item1);
                        }
                        else {
                            $scope.ridercalulationfrnonterm($scope.riderslider[0], 2, $scope.item1);
                            for (var q = 0; q < $scope.Quotes_Data.length; q++) {
                                if ($scope.Quotes_Data[q].PlanId == $scope.riderslider[0].PlanId && $scope.Quotes_Data[q].IncreasingSAValidate > 0 && $scope.riderslider[0].RiderId == 1) {
                                    $scope.showincreasing($scope.riderslider[0], $scope.Quotes_Data[q], 'refresh');
                                }
                            }
                        }
                    }
                }
            }
        }
        $scope.JourneyDate = function (event) {
            var allowedRegex = /[0-9\/]/g;
            if (!event.key.match(allowedRegex)) {
                event.preventDefault();
            }
        }

        $scope.IGchilddateKey = function (flag, event) {
            if (flag == 1 && $scope.IGchilddate != undefined && $scope.IGchilddate != null && $scope.IGchilddate != "" && $scope.IGchilddate.length == 2) {
                $scope.mm2 = true;
                $scope.usermm01 = 0;
            }
            else if (flag == 2 && $scope.IGchildmonth != undefined && $scope.IGchildmonth != null && $scope.IGchildmonth != "" && $scope.IGchildmonth.length == 2) {
                $scope.mm3 = true;
                $scope.usermm11 = 0;
            }
            else if (flag == 3 && $scope.IGchildyear != undefined && $scope.IGchildyear != null && $scope.IGchildyear != "" && $scope.IGchildyear.length == 4) {
                $scope.usermm21 = 0;
            }
            else if (flag == 2 && event.keyCode === 8 && $scope.IGchildmonth == undefined) {
                if ($scope.usermm11 == 1) {
                    $scope.usermm11 = 0;
                    $scope.mm1 = true;
                }
                else {
                    $scope.usermm11 = 1;
                }
            }
            else if (flag == 3 && event.keyCode === 8 && $scope.IGchildyear == undefined) {
                if ($scope.usermm21 == 1) {
                    $scope.usermm21 = 0;
                    $scope.mm2 = true;
                }
                else {
                    $scope.usermm21 = 1;
                }
            }

        }
        $scope.IGdateKey = function (flag, event) {
            if (flag == 1 && $scope.IGdate != undefined && $scope.IGdate != null && $scope.IGdate != "" && $scope.IGdate.length == 2) {
                $scope.dd2 = true;
                $scope.userdd01 = 0;
            }
            else if (flag == 2 && $scope.IGmonth != undefined && $scope.IGmonth != null && $scope.IGmonth != "" && $scope.IGmonth.length == 2) {
                $scope.dd3 = true;
                $scope.userdd11 = 0;
            }
            else if (flag == 3 && $scope.IGyear != undefined && $scope.IGyear != null && $scope.IGyear != "" && $scope.IGyear.length == 4) {
                $scope.userdd21 = 0;
            }
            else if (flag == 2 && event.keyCode === 8 && $scope.IGmonth == undefined) {
                if ($scope.userdd11 == 1) {
                    $scope.userdd11 = 0;
                    $scope.dd1 = true;
                }
                else {
                    $scope.userdd11 = 1;
                }
            }
            else if (flag == 3 && event.keyCode === 8 && $scope.IGyear == undefined) {
                if ($scope.userdd21 == 1) {
                    $scope.userdd21 = 0;
                    $scope.dd2 = true;
                }
                else {
                    $scope.userdd21 = 1;
                }
            }
        }
        function HealthNetworkHospitals(cityid, insurerid, id) {
            Insureridtemp = insurerid;
            //            if (id == 1) {
            //                $scope.PlanidReligare = ReligarePlanId;
            //            }
            $scope.hspname = undefined;
            var data = CommonService.HealthNetworkHospitals(cityid, insurerid, PlanidFornetwork);
            data.then(function (result) {
                $scope.hospnetworklist = result.data;
                if ($scope.hospnetworklist != undefined) {
                    if ($scope.hospnetworklist.length > 0) {
                        $scope.showhospnet = true;
                        $scope.nohospnetwork = false;
                        $scope.showhospcity = true;
                    }
                    else {
                        $scope.showhospnet = true;
                        $scope.nohospnetwork = true;
                        $scope.showhospcity = true;
                    }
                }
                else {
                    $scope.showhospnet = false;
                    $scope.showhospcity = true;
                    $scope.nohospnetwork = true;
                }
                $scope.showbtnNetloader = false;
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        $scope.showHospitalNetworkClose = function (id) {
            $rootScope.hospitalnetworkpop = false;
            $rootScope.scrollhide = '';
            if (id != 'viewmore') {
                $location.search("hospitalnetwork", null);
            }
            //            $timeout(function () {
            //                focusOnFiled($rootScope.selctedPlanId);
            //            }, 100);
        }
        $scope.showGarageNetworkClose = function (id) {
            if (id == 'backbutton') {
                $scope.showrtocitylist = false;
            }
            else {
                $scope.garageListPop = false;
                $rootScope.motorGarageshow = false;
                $rootScope.scrollhide = '';
            }
        }
        $scope.showHospitalNetwork = function (item, flag, id, smartplanid) {

            $rootScope.scrollhide = 'scollClass';
            if (item.PlanId != undefined) {
                PlanidFornetwork = item.PlanId;
                $rootScope.selctedPlanId = item.PlanId;
            }
            if (smartplanid != undefined) {
                PlanidFornetwork = smartplanid;
            }
            if ($scope.mdrider[931, 1] == true) {
                PlanidFornetwork = smartplanid;
            }
            if (flag == 'showpop') {
                $scope.hospNetworkPopSrc = '../HomePage/Template/hospNetworkPop.html';
                if (item.NetworkHospitalCount > 0) {
                    $rootScope.hospitalnetworkpop = true;
                    if (id != 'viewmore') {
                        $location.search("hospitalnetwork", "true");
                    }
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'Network Hospital List', value: $scope.productID });

                    $scope.showhospcity = true;
                    $scope.insurername = item.InsurerName;
                    $scope.cityname = $scope.quotes_userdata.Citylist.cityname.split(",")[0];
                    $scope.hospitalcity = $scope.quotes_userdata.Citylist;
                    HealthNetworkHospitals($scope.quotesrequest.Requests[0].CityId, item.InsurerId, id);
                }
            }
            else if (flag == 'editcity') {
                $scope.showhospcity = false;
                $scope.showhospnet = false;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'Network Hospital List Edit City', value: $scope.productID });

                $scope.nohospnetwork = false;
                //$scope.hospitalcity = $scope.quotes_userdata.Citylist;
                $scope.commoncity1();
            }
            else if (flag == 'changecity' || flag == 'Viewchangecity') {
                if ($scope.hospitalcity != null && $scope.hospitalcity != undefined) {
                    var cityid = parseInt($scope.hospitalcity.cityid.split(',')[0]);
                    $scope.cityname = $scope.hospitalcity.cityname.split(",")[0];
                    $scope.showbtnNetloader = true;
                    HealthNetworkHospitals(cityid, Insureridtemp);
                    if (flag == 'Viewchangecity') {
                        $rootScope.scrollhide = '';
                    }
                }
                else {
                    $scope.nohospnetwork = true;
                }
            }
            else if (flag == 'backbutton') {
                if ($scope.hospnetworklist != undefined) {
                    if ($scope.hospnetworklist.length > 0) {
                        $scope.showhospcity = true;
                        $scope.showhospnet = true;
                        $scope.nohospnetwork = false;
                    }
                    else {
                        $scope.showhospcity = true;
                        $scope.showhospnet = false;
                        $scope.nohospnetwork = true;
                    }
                }
                else {
                    $scope.showhospcity = true;
                    $scope.showhospnet = false;
                    $scope.nohospnetwork = true;
                }

            }
        }


        $scope.otpKey = function (flag, event) {
            if (flag == 0 && $scope.userOTP0 != undefined && $scope.userOTP0 != null && $scope.userOTP != "") {
                $scope.OTP1 = true;
                $scope.userOTP01 = 0;
            }
            else if (flag == 1 && $scope.userOTP1 != undefined && $scope.userOTP1 != null && $scope.userOTP1 != "") {
                $scope.OTP2 = true;
                $scope.userOTP11 = 0;
            }
            else if (flag == 2 && $scope.userOTP2 != undefined && $scope.userOTP2 != null && $scope.userOTP2 != "") {
                $scope.OTP3 = true;
                $scope.userOTP21 = 0;
            }
            else if (flag == 3 && $scope.userOTP3 != undefined && $scope.userOTP3 != null && $scope.userOTP3 != "") {

                $scope.userOTP31 = 0;
            }

            else if (flag == 1 && event.keyCode === 8 && $scope.userOTP1 == undefined) {
                if ($scope.userOTP11 == 1) {
                    $scope.userOTP11 = 0;
                    $scope.OTP0 = true;
                }
                else {
                    $scope.userOTP11 = 1;
                }
            }
            else if (flag == 2 && event.keyCode === 8 && $scope.userOTP2 == undefined) {
                if ($scope.userOTP21 == 1) {
                    $scope.userOTP21 = 0;
                    $scope.OTP1 = true;
                }
                else {
                    $scope.userOTP21 = 1;
                }
            }
            else if (flag == 3 && event.keyCode === 8 && $scope.userOTP3 == undefined) {
                if ($scope.userOTP31 == 1) {
                    $scope.userOTP31 = 0;
                    $scope.OTP2 = true;
                }
                else {
                    $scope.userOTP31 = 1;
                }
            }
        }
        $scope.otpBack = function () {
            $scope.showotpbox = false;
            $scope.showbtnloader = false;
            $rootScope.showleadpopup = true;
            $rootScope.scrollhide = 'scollClass';
            $scope.showleadpopupInner = true;
        }

        $scope.otpFn = function (flag, id) {

            if (flag == 2) {
                $scope.resendFlag = true;
                var a = "Lead Pop Resend OTP";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


            }
            else {
                $scope.resendFlag = false;
            }
            $scope.showbtnleadloader = true;

            if ($scope.product == 'Car' || $scope.product == 'Twowheeler') {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserName = "123";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserPassword = "123";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserName = "123";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserPassword = "123";
                if ($scope.product == 'Car') {
                    $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 4;
                    $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 4;
                }
                else {
                    $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 8;
                    $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 8;
                }
            }
            else if ($scope.product == "Term") {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserName = "IGTERM2016";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserPassword = "IG@TERM@2016";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserName = "IGTERM2016";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserPassword = "IG@TERM@2016";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 3;
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 3;
            }
            else if ($scope.product == "Health") {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserName = "IGHEALTH2016";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserPassword = "IG@HEALTH@2016";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserName = "IGHEALTH2016";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserPassword = "IG@HEALTH@2016";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 2;
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 2;
            }
            else if ($scope.product == "Investment") {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserName = "IGINVT17";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserPassword = "IG@INVT@217";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserName = "IGINVT17";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserPassword = "IG@INVT@217";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 5;
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 5;
            }
            else if ($scope.product == "Pension") {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserName = "IGPENSION17";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserPassword = "IG@IG@PENSION@17@217";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserName = "IGPENSION17";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserPassword = "IG@IG@PENSION@17@217";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 6;
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 6;
            }
            else if ($scope.product == "Child") {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserName = "IGCHILD17";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserPassword = "IG@INVTIG@CHILD@17217";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserName = "IGCHILD17";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserPassword = "IG@INVTIG@CHILD@17217";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 7;
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 7;
            }
            else if ($scope.product == "Travel") {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserName = "IGTRAVEL";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserPassword = "IG@TRAVEL";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserName = "IGTRAVEL";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserPassword = "IG@TRAVEL";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 1;
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 1;
            }
            else if ($scope.product == "Critical") {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserName = "123";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserPassword = "123";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserName = "123";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserPassword = "123";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 9;
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 9;
            }
            else if ($scope.product == "Group") {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserName = "EP";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.UserPassword = "Ep@123";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserName = "EP";
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.UserPassword = "Ep@123";
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Products.product[0].productid = 17;
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.User.Productid = 17;
            }
            if (id == 'spouse') {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.leads.lead[0].leadId = $scope.SpouseQuotesrequest.IGQuoteId;
            }
            else {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.leads.lead[0].leadId = $scope.IGquoteId;
            }

            if ($scope.userName != undefined && $scope.userName != "" && $scope.userName != null) {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.Name = $scope.userName;
            }

            //            $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.PinCode = '111111';
            if ($scope.userEmailID != undefined && $scope.userEmailID != "" && $scope.userEmailID != null) {
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.EmailId = $scope.userEmailID;
            }
            $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.MobileNo = $scope.userMobileNumber;
            var resendFlag = CommonService.SendOTPReboot($scope, globals);
            resendFlag.then(function (result) {
                console.log(result);
                var token = result.data.TokenId;
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.OTPValidation.Tokenid = token;
                $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.OTPValidation.Mobile = $scope.userMobileNumber;
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.OriginPageid = 0;
                if ($scope.iscallback == true) {
                    $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.IsCallBackRequire = "true";
                    $scope.iscallback == false;
                }
                else {
                    $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.IsCallBackRequire = "false";
                }
                $scope.mobileError = false;
                $scope.showResend = false;
                $scope.showbtnleadloader = false;
                if (result.data.IsVerified == true) {
                    if (id == "clicktocall") {
                        $scope.clicktocallOtp = false;
                        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.Tokenid = token;
                        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.MobileNo = $scope.userMobileNumber;
                        $scope.leadcreationfn4(token, 0, 1);
                        $scope.showcantdecide = false;
                    }
                    else {
                        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.Tokenid = token;
                        $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.MobileNo = $scope.userMobileNumber;
                        $scope.leadcreationfn4(token, 0, id);
                    }

                }
                else if (result.data.Message == "success") {
                    if (id == "clicktocall") {
                        $scope.clicktocallOtp = true;
                        $scope.OTP0 = true;
                        $scope.showcantdecide = false;
                    }
                    else {
                        $rootScope.showleadpopup = true;
                        $rootScope.scrollhide = 'scollClass';
                        $scope.showbtnleadloader = false;
                        $scope.showloadtemplate = true;
                        $scope.showleadpopupInner = false;
                    }
                    $scope.showotpbox = true;
                    $scope.btnnootp = false;
                    if (result.data.OTPResendTimer != undefined && result.data.OTPResendTimer != "") {

                        var otpResendTimer = result.data.OTPResendTimer * 1000;
                    }
                    else {
                        var otpResendTimer = 10000;
                    }
                    $scope.resendtime = angular.copy(parseInt(result.data.OTPResendTimer));
                    resendTimer();


                }
                else if (result.data.Message == "Proceed to the quotes page without OTP verification") {
                    if (id == 1) {
                        $scope.clicktocallflag = true;
                        var d = new Date();
                        //if ($rootScope.CurrenDateTimeService != undefined) {
                        //    d = new Date($rootScope.CurrenDateTimeService);
                        //}
                        var n = d.getHours();
                        if (n >= 10 && n <= 20) {
                            $scope.clicktocallmsg = "Thanks! We're calling you right away!";
                        }
                        else {
                            $scope.clicktocallmsg = "Thanks! We're closed right now, we'll call you once we're back in office.";
                        }
                        $scope.showcantdecide = false;

                        // $localStorage.quotes_userdata.Mobile = $scope.userMobileNumber;
                        $scope.usertxtMobileNumber = $scope.userMobileNumber;
                    }
                    else if (id == "clicktocall") {
                        $scope.clicktocallOtp = false;
                        $scope.LeadCreationStep1(2, 1);
                        $scope.showcantdecide = false;
                    }
                    else {
                        $scope.Email = $scope.userEmailID;
                        $scope.usertxtMobileNumber = $scope.userMobileNumber;
                        $scope.BuyPlan();
                    }

                }
                else {
                    if (id == "clicktocall") {
                        $scope.showclicktocallerror = true;
                        $scope.showcantdecide = false;

                    }
                    else {
                        $rootScope.showleadpopupInner = !0;
                        $rootScope.showleadpopup = !0;
                        $rootScope.scrollhide = 'scollClass';
                        $rootScope.showleadpopupAnimation = "fadeIn";
                        $scope.leadpopupAnimation = "bounceInDown";
                        $scope.proposalflag = !0;
                        $scope.template("Lead", !0);
                        $scope.mobileError = true;
                        $scope.wrongMobilemsg = result.data.Message;
                        $scope.showbtnloader = false;
                    }

                }

            }, function (response) {
                ServiceRespnse(response);
            });

        }

        function resendTimer() {
            var timekey = $interval(function () {
                $scope.resendtime = $scope.resendtime - 1;
                if ($scope.resendtime <= 0) {
                    $interval.cancel(timekey);
                    $scope.showResend = true;
                }
            }, 1000);
        }
        $scope.leadcreationfn7 = function (flag, id) {


            $scope.otpcreaterequestdata.RequestString.OTPValidationRequest.OTPValidation.OTP = $scope.userOTP;
            var response = CommonService.GetMobileVerificationWithOTPRequest2($scope.otpcreaterequestdata);
            response.then(function (result) {
                console.log(result);
                result.data = [angular.fromJson(result.data)];
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.User.Tokenid = result.data[0].data.Token.Tokenid;
                $scope.leadcreaterequestdata.RequestString.LeadCreateRequest.Visitor.MobileNo = $scope.userMobileNumber;
                if (result.data[0].data.Error.ErrorCode == 1) {
                    if (id == "clicktocall") {
                        $scope.showclicktocallotperror = true;
                    }
                    else {
                        $scope.wrongotpmsg = "Enter Correct OTP";
                        $scope.wrongotpmsgshow = true;
                        $scope.showbtnloader = false;
                        $scope.showbtnleadloader = false;
                        $scope.otpcodeerror = true;
                    }
                }
                else {
                    if (id == "clicktocall") {
                        $scope.showclicktocallotperror = false;
                        $scope.leadcreationfn4(result.data, '', 1);
                    }
                    else {
                        $scope.wrongotpmsgshow = false;
                        $scope.leadcreationfn4(result.data, flag);
                    }
                }
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        $scope.leadcreationfn4 = function (value, flag, id) {
            if ($scope.sId == -1) {
                $rootScope.showcsleadpopup = true;
                $rootScope.value = value;
                $scope.template("csLead", true);
            }
            else {
                $scope.leadcreationfn5(value, flag, id)
            }
        }

        $scope.leadcreationfn5 = function (value, flag, id) {
            var response = CommonService.GetMobileVerificationWithOTPRequest1($scope.leadcreaterequestdata);
            response.then(function (result) {
                console.log(result);
                result.data = [angular.fromJson(result.data)];

                if (result.data[0].data.Error.ErrorCode == "0") {
                    if (id == 1) {
                        $scope.clicktocallOtp = false;
                        $scope.showverifybtnloader = false;
                        $scope.clicktocallflag = true;
                        var d = new Date();
                        //if ($rootScope.CurrenDateTimeService != undefined) {
                        //    d = new Date($rootScope.CurrenDateTimeService);
                        //}
                        var n = d.getHours();
                        if (n >= 10 && n <= 20) {
                            $scope.clicktocallmsg = "Thanks! We're calling you right away!";
                        }
                        else {
                            $scope.clicktocallmsg = "Thanks! We're closed right now, we'll call you once we're back in office.";
                        }
                        $scope.showcantdecide = false;

                        // $localStorage.quotes_userdata.Mobile = $scope.userMobileNumber;
                        $scope.usertxtMobileNumber = $scope.userMobileNumber;
                    }
                    else if (id == 'spouse') {
                        JointLifedata();
                    }
                    else {
                        $scope.Email = $scope.userEmailID;
                        $scope.usertxtMobileNumber = $scope.userMobileNumber;
                        $scope.BuyPlan();
                    }

                }
            }, function (response) {
                ServiceRespnse(response);
            });
        }


        $scope.submitleadform = function (flag, id) {

            if ($scope.userOTP0 != undefined && $scope.userOTP1 != undefined && $scope.userOTP2 != undefined && $scope.userOTP3 != undefined) {
                $scope.userOTP = $scope.userOTP0.toString() + $scope.userOTP1.toString() + $scope.userOTP2.toString() + $scope.userOTP3.toString();
                $scope.wrongotpmsgshow = false;
                $scope.showclicktocallotperror = false;
            }
            else {
                $scope.wrongotpmsgshow = true;
            }
            if ($scope.userOTP == undefined || $scope.userOTP == "" || $scope.userOTP == null) {
                if (id == "clicktocall") {
                    $scope.showclicktocallotperror = true;
                }
                else {
                    $scope.wrongotpmsgshow = true;
                    $scope.wrongotpmsg = "Enter Correct OTP";
                }
            }
            else {
                if (id == "clicktocall") {
                    $scope.showverifybtnloader = true;
                    $scope.showclicktocallotperror = false;
                    $scope.leadcreationfn7('', id);
                }
                else {
                    $scope.wrongotpmsgshow = false;
                    $scope.showbtnleadloader = true;
                    $scope.leadcreationfn7();
                }


            }
        }
        $scope.CallMeClick = function () {
            if ($scope.CallMe == "Call Me") {
                $scope.afterCallMePop = true;
                $scope.afterCallMe = "Our team will contact you on your mobile " + $scope.userMobileNumber;
            } else {
                $scope.afterCallMePop = true;
                $scope.afterCallMe = "Please call our toll free number 1800-313-3279";
            }
        }
        $scope.downloadCSV = function (args) {
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'Download Network Hospital CSV', value: $scope.productID });

            HealthFactory.downloadCSV(args, $scope);
        }
        $scope.Openriderdetails = function (item, id) {
            //$rootScope.scrollhide = 'scollClass';
            if ($scope.productID == 3) {
                $scope.RiderMobileSRC = '../HomePage/Template/Ridersmobile.html';
                if (item.InsurerId == 29) {
                    if (item.IncreasingSumAssured == 3) {
                        item.IncreasingSAValue = $scope.totalcount1;
                        $scope.increasingTooltip = "Sum assured chosen on plan commencement increases periodically by a specified amount. Sum assured reached at the time of payout is paid to the nominee.";

                    }
                    for (var q = 0; q < item.AvailableRiders.length; q++) {
                        if (item.AvailableRiders[q].RiderId == 2) {
                            $scope.RiderPT[item.PlanId + ',' + item.AvailableRiders[q].RiderId] = item.AvailableRiders[q].PolicyTermYear;
                            $scope.RiderPPT[item.PlanId + ',' + item.AvailableRiders[q].RiderId] = item.AvailableRiders[q].PremiumPayingTerm;
                            $scope.TempriderPremiumPayingTerm = item.AvailableRiders[q].PremiumPayingTerm;
                            $scope.RiderPPTlist[item.PlanId] = [];
                            $scope.RiderPTlist[item.PlanId] = [];
                            var ppt = item.AvailableRiders[q].PremiumPayingTerm;
                            if (ppt > 35) {
                                ppt = 35;
                            }
                            for (var s = 5; s <= ppt; s++) {
                                $scope.RiderPPTlist[item.PlanId].push({ "value": s, "Name": s + ' yrs' })
                            }
                            if (item.AvailableRiders[q].PremiumPayingTerm > 35) {
                                $scope.RiderPPTlist[item.PlanId].push({ "value": item.AvailableRiders[q].PremiumPayingTerm, "Name": item.AvailableRiders[q].PremiumPayingTerm + ' yrs' })
                            }
                            for (var s = 10; s <= item.AvailableRiders[q].PolicyTermYear; s++) {
                                $scope.RiderPTlist[item.PlanId].push({ "value": s, "Name": s + ' yrs' })
                            }
                        }
                        if (item.PlanId == 865) {
                            if (item.AvailableRiders[q].RiderId == 3) {
                                if (item.PayingMode == "monthly" || item.PayingMode == "Monthly") {
                                    item.AvailableRiders[q].MaxSumAssured = Math.floor(((((((((item.OriginalmonthlyPremium) / item.AvailableRiders[q].RiderServiceTax) * item.AvailableRiders[q].MFactor) / (item.AvailableRiders[q].Rates - item.AvailableRiders[q].Rates * item.AvailableRiders[q].Discount / 100))) / item.AvailableRiders[q].MonthlyFactor) / item.AvailableRiders[q].MFactor)) * item.AvailableRiders[q].MFactor / item.AvailableRiders[q].SliderRange) * item.AvailableRiders[q].SliderRange;
                                }
                                else {
                                    item.AvailableRiders[q].MaxSumAssured = Math.floor((((((((item.OriginalannualPremium) / item.AvailableRiders[q].RiderServiceTax) * item.AvailableRiders[q].MFactor) / (item.AvailableRiders[q].Rates - item.AvailableRiders[q].Rates * item.AvailableRiders[q].Discount / 100))) / item.AvailableRiders[q].MFactor)) * item.AvailableRiders[q].MFactor / item.AvailableRiders[q].SliderRange) * item.AvailableRiders[q].SliderRange;
                                }
                                var MaxSumassured = 5000000;
                                if (item.SumAssured < MaxSumassured) {
                                    MaxSumassured = item.SumAssured;
                                }
                                if (item.AvailableRiders[q].MaxSumAssured > MaxSumassured) {
                                    item.AvailableRiders[q].MaxSumAssured = MaxSumassured;
                                }
                            }
                        }
                    }
                }
                if (item.InsurerId == 20) {
                    if ($scope.diabeticsuffer == 'yes') {
                        $scope.ADDisablemodel[item.PlanId + ',' + 3] = true;
                        $scope.ADDisablemodel[item.PlanId + ',' + 6] = true;
                    }
                    else {
                        $scope.ADDisablemodel[item.PlanId + ',' + 3] = false;
                        $scope.ADDisablemodel[item.PlanId + ',' + 6] = false;
                    }
                }
            }
            else if ($scope.productID == 2) {
                $scope.RiderMobileSRC = '../HomePage/Template/HealthRidersmobile.html';
            }
            else if ($scope.productID == 5) {
                $scope.RiderMobileSRC = '../HomePage/Template/NonTermRidersMobile.html';
                if (item.InsurerId == 29) {
                    if (item.IncreasingSumAssured == 3) {
                        item.IncreasingSAValue = $scope.totalcount1;
                        $scope.increasingTooltip = "Sum assured chosen on plan commencement increases periodically by a specified amount. Sum assured reached at the time of payout is paid to the nominee.";

                    }
                    for (var q = 0; q < item.AvailableRiders.length; q++) {
                        if (item.AvailableRiders[q].RiderId == 2) {
                            $scope.RiderPT[item.PlanId + ',' + item.AvailableRiders[q].RiderId] = item.AvailableRiders[q].PolicyTermYear;
                            $scope.RiderPPT[item.PlanId + ',' + item.AvailableRiders[q].RiderId] = item.AvailableRiders[q].PremiumPayingTerm;
                            $scope.TempriderPremiumPayingTerm = item.AvailableRiders[q].PremiumPayingTerm;
                            $scope.RiderPPTlist[item.PlanId] = [];
                            $scope.RiderPTlist[item.PlanId] = [];
                            var ppt = item.AvailableRiders[q].PremiumPayingTerm;
                            if (ppt > 35) {
                                ppt = 35;
                            }
                            for (var s = 5; s <= ppt; s++) {
                                $scope.RiderPPTlist[item.PlanId].push({ "value": s, "Name": s + ' yrs' })
                            }
                            if (item.AvailableRiders[q].PremiumPayingTerm > 35) {
                                $scope.RiderPPTlist[item.PlanId].push({ "value": item.AvailableRiders[q].PremiumPayingTerm, "Name": item.AvailableRiders[q].PremiumPayingTerm + ' yrs' })
                            }
                            for (var s = 10; s <= item.AvailableRiders[q].PolicyTermYear; s++) {
                                $scope.RiderPTlist[item.PlanId].push({ "value": s, "Name": s + ' yrs' })
                            }
                        }
                        if (item.PlanId == 865) {
                            if (item.AvailableRiders[q].RiderId == 3) {
                                if (item.PayingMode == "monthly" || item.PayingMode == "Monthly") {
                                    item.AvailableRiders[q].MaxSumAssured = Math.floor(((((((((item.OriginalmonthlyPremium) / item.AvailableRiders[q].RiderServiceTax) * item.AvailableRiders[q].MFactor) / (item.AvailableRiders[q].Rates - item.AvailableRiders[q].Rates * item.AvailableRiders[q].Discount / 100))) / item.AvailableRiders[q].MonthlyFactor) / item.AvailableRiders[q].MFactor)) * item.AvailableRiders[q].MFactor / item.AvailableRiders[q].SliderRange) * item.AvailableRiders[q].SliderRange;
                                }
                                else {
                                    item.AvailableRiders[q].MaxSumAssured = Math.floor((((((((item.OriginalannualPremium) / item.AvailableRiders[q].RiderServiceTax) * item.AvailableRiders[q].MFactor) / (item.AvailableRiders[q].Rates - item.AvailableRiders[q].Rates * item.AvailableRiders[q].Discount / 100))) / item.AvailableRiders[q].MFactor)) * item.AvailableRiders[q].MFactor / item.AvailableRiders[q].SliderRange) * item.AvailableRiders[q].SliderRange;
                                }
                                var MaxSumassured = 5000000;
                                if (item.SumAssured < MaxSumassured) {
                                    MaxSumassured = item.SumAssured;
                                }
                                if (item.AvailableRiders[q].MaxSumAssured > MaxSumassured) {
                                    item.AvailableRiders[q].MaxSumAssured = MaxSumassured;
                                }
                            }
                        }
                    }
                }
            }
            $scope.item1 = item;
            if (id == 1) {
                $scope.jointlifeRiderdetails = true;
            }
            else {
                $scope.mobileviewplan = item;
                $scope.Riderdetails = true;
            }
            $location.search("riderpop", "true");
            var a = 'Mobile Rider Details ' + $scope.gaProduct;
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

        }
        $scope.TermPremium = function (id) {
            if (id == 1) {
                $scope.showMonthlyPremium = false;
                $scope.showAnnualPremium = true;
                $scope.monthlypaymodeCss = "";
                $scope.yearlypaymodeCss = "yearctive";
                $scope.term1monthlypaymodeCss = "activeclass";
                $scope.term1yearlypaymodeCss = "";
                $scope.payemodepremium = "month";
                var a = $scope.gaProduct + " Term Monthly Premium Change";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });
            }
            else {
                $scope.showMonthlyPremium = true;
                $scope.yearlypaymodeCss = "";
                $scope.monthlypaymodeCss = "yearctive";
                $scope.term1monthlypaymodeCss = "";
                $scope.term1yearlypaymodeCss = "activeclass";
                $scope.showAnnualPremium = false;
                $scope.payemodepremium = "year";
                var a = $scope.gaProduct + " Term Yearly Premium Change";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            }

            for (var i = 0; i < $scope.Quotes_Data_Plan.length; i++) {
                if (id == 1) {
                    if ($scope.Quotes_Data_Plan[i].MonthlyPremium > 0) {
                        $scope.Quotes_Data_Plan[i].Premium = $scope.Quotes_Data_Plan[i].MonthlyPremium;
                        $scope.Quotes_Data_Plan[i].OriginalPremium = $scope.Quotes_Data_Plan[i].OriginalmonthlyPremium;
                        $scope.Quotes_Data_Plan[i].PayingMode = "Monthly";
                        if ($scope.Quotes_Data_Plan[i].AvailableRiders.length > 0) {
                            for (var q = 0; q < $scope.Quotes_Data_Plan[i].AvailableRiders.length; q++) {
                                $scope.Quotes_Data_Plan[i].AvailableRiders[q].RiderPremium = Math.round($scope.Quotes_Data_Plan[i].AvailableRiders[q].RiderMonthlyPremium);
                            }
                        }
                    }
                }
                else {
                    $scope.Quotes_Data_Plan[i].Premium = $scope.Quotes_Data_Plan[i].AnnualPremium;
                    $scope.Quotes_Data_Plan[i].OriginalPremium = $scope.Quotes_Data_Plan[i].OriginalannualPremium;
                    $scope.Quotes_Data_Plan[i].PayingMode = "Yearly";
                    if ($scope.Quotes_Data_Plan[i].AvailableRiders.length > 0) {
                        for (var q = 0; q < $scope.Quotes_Data_Plan[i].AvailableRiders.length; q++) {
                            $scope.Quotes_Data_Plan[i].AvailableRiders[q].RiderPremium = parseInt($scope.Quotes_Data_Plan[i].AvailableRiders[q].AnnualPremium);
                        }
                    }
                }
                if ($scope.Quotes_Data_Plan[i].PlanId == 864 && $scope.Quotes_Data_Plan[i].InsurerId == 29) {
                    termhdfcCIcalculation($scope.Quotes_Data_Plan[i], $scope.Quotes_Data_Plan[i].AvailableRiders[0]);
                }
                if ($scope.device == "Mobile" && $rootScope.loadcardtemplate.indexOf('TermjointlifeMobile') != -1) {
                    if ($scope.Quotes_Data_Plan[i].PlanId == jointlifeparentplan.PlanId) {
                        $scope.Quotes_Data = [];
                        $scope.Quotes_Data.push($scope.Quotes_Data_Plan[i]);
                    }
                }
            }
            if ($scope.JointLifeQuote != undefined) {
                if ($scope.JointLifeQuote.length > 0) {
                    if (id == 1) {
                        jointlifeparentplan.PayingMode = "Monthly";
                        $scope.JointLifeQuote[0].Premium = $scope.JointLifeQuote[0].MonthlyPremium;
                        $scope.JointLifeQuote[0].OriginalPremium = $scope.JointLifeQuote[0].OriginalmonthlyPremium;
                        $scope.ShowTotalJointLifePremium = $scope.ShowTotalJointLifeMPremium;
                        if ($scope.JointLifeQuote[0].AvailableRiders.length > 0) {
                            for (var q = 0; q < $scope.JointLifeQuote[0].AvailableRiders.length; q++) {
                                $scope.JointLifeQuote[0].AvailableRiders[q].RiderPremium = Math.round($scope.JointLifeQuote[0].AvailableRiders[q].RiderMonthlyPremium);
                            }
                        }
                    }
                    else {
                        jointlifeparentplan.PayingMode = "Yearly";
                        $scope.ShowTotalJointLifePremium = $scope.ShowTotalJointLifeYPremium;
                        $scope.JointLifeQuote[0].Premium = $scope.JointLifeQuote[0].AnnualPremium;
                        $scope.JointLifeQuote[0].OriginalPremium = $scope.JointLifeQuote[0].OriginalannualPremium;
                        if ($scope.JointLifeQuote[0].AvailableRiders.length > 0) {
                            for (var q = 0; q < $scope.JointLifeQuote[0].AvailableRiders.length; q++) {
                                $scope.JointLifeQuote[0].AvailableRiders[q].RiderPremium = Math.round($scope.JointLifeQuote[0].AvailableRiders[q].AnnualPremium);
                            }
                        }
                    }
                }

            }
        }
        function showSanitizecust(email, mobile) {
            if ($rootScope.agentHide == true) {
                if (email == "" || email == undefined || email == null) {
                    $rootScope.showemailbox = true;
                    $scope.showemailbox1 = false;
                }
                else {
                    $scope.MaskedUeremail = maskvalue(email, 'email');
                    $rootScope.showemailbox = false;
                    $scope.showemailbox1 = true;
                }
                if (mobile == "" || mobile == undefined || mobile == null) {
                    $rootScope.showmobilebox = true;
                    $scope.showmobilebox1 = false;
                }
                else {
                    $scope.MaskedUsermobile = maskvalue(mobile, 'mobile');
                    $rootScope.showmobilebox = false;
                    $scope.showmobilebox1 = true;
                }
                //$scope.clickToCallShow = false;
                //$rootScope.clickToCallShow = false;
                $rootScope.hideOnProposal = false;
            }
            else {
                $rootScope.showmobilebox = true;
                $rootScope.showemailbox = true;
                $scope.showmobilebox1 = false;
                $scope.showemailbox1 = false;
            }
        }
        $scope.GetLeadPopHealth = function (item, index, flag, id1, id11) {
            $rootScope.selctedPlanId = item.PlanId;
            if ($scope.product.toLowerCase() == "health") {
                if ($scope.quotesrequest.Requests[0].IsCovid) {
                    if (id1 != undefined && id1 >= 105) {
                        $scope.policyTermYearValue = id1;
                    }
                    if (id1 >= 105 || ($scope.policyTermYearValue >= 105 && $scope.showhealthdiscountmobile != true)) {
                        item.FinalPremium1 = item.FinalPremium;
                    }
                    if (item.FinalPremium == item.FinalPremium1) {
                        $scope.quotesrequest.Requests[0].PolicyTermDays = id1;
                    }
                }
                else {
                    if (id1 != undefined && (id1 == 1 || id1 == 2 || id1 == 3)) {
                        $scope.policyTermYearValue = id1;
                    }
                    if (id1 == 1 || ($scope.policyTermYearValue == 1 && $scope.showhealthdiscountmobile != true)) {
                        item.FinalPremium = item.FinalPremium1;
                    }
                    else if (id1 == 2 || $scope.policyTermYearValue == 2 || ($scope.show2ndyr == true && $scope.showhealthdiscountmobile == true)) {
                        if (item.DiscountedFinalPremium2 > 0) {
                            item.FinalPremium = item.DiscountedFinalPremium2;
                        }
                        else {
                            item.FinalPremium = item.FinalPremium2;
                        }
                    }
                    else if (id1 == 3 || $scope.policyTermYearValue == 3 || ($scope.show3rdyr == true && $scope.showhealthdiscountmobile == true)) {
                        if (item.DiscountedFinalPremium3 > 0) {
                            item.FinalPremium = item.DiscountedFinalPremium3;
                        }
                        else {
                            item.FinalPremium = item.FinalPremium3;
                        }
                    }
                    if (item.FinalPremium == item.FinalPremium1) {
                        $scope.quotesrequest.Requests[0].PolicyTerm = 1;
                    }
                    else if (item.FinalPremium == item.DiscountedFinalPremium2) {
                        $scope.quotesrequest.Requests[0].PolicyTerm = 2;
                    }
                    else if (item.FinalPremium == item.DiscountedFinalPremium3) {
                        $scope.quotesrequest.Requests[0].PolicyTerm = 3;
                    }
                }
            }
            for (var p = 0; p < item.Riderlistforbuy.length; p++) {
                if ($scope.quotesrequest.Requests[0].PolicyTerm == 3) {
                    if (item.Riderlistforbuy[p].RiderPremium3 == 0 && item.Riderlistforbuy[p].RiderId != 3) {
                        item.Riderlistforbuy.splice(p, 1);
                    }
                }
                if (item.Riderlistforbuy[p].RiderName == "Smart Select" && item.Riderlistforbuy[p].RiderId == 3) {
                    var amount = 0;
                    if ($scope.quotesrequest.Requests[0].PolicyTerm == 1) {
                        amount = item.SmartDiscount1;
                    }
                    else if ($scope.quotesrequest.Requests[0].PolicyTerm == 2) {
                        amount = item.SmartDiscount2;
                    }
                    else if ($scope.quotesrequest.Requests[0].PolicyTerm == 3) {
                        amount = item.SmartDiscount3;
                    }
                    item.Riderlistforbuy[p].DiscountAmount = amount / 1.18;
                }
                if (item.Riderlistforbuy[p].RiderId == 10 && $scope.quotesrequest.Requests[0].IsCovid) {
                    var amount = 0;

                    amount = item.SmartDiscount1;

                    item.Riderlistforbuy[p].DiscountAmount = amount / 1.18;
                }
            }
            $scope.GetLeadPop(item, index, id11);
        }

        function termhdfcCIcalculation(item, rider) {
            if ($scope.mdrider['864' + ',' + '1'] == true) {
                if (item.AvailableRiders.length > 0) {
                    item.AvailableRiders.forEach(function (AvailableRiders) {
                        if (AvailableRiders.RiderId == 3) {
                            if (item.PayingMode == "monthly" || item.PayingMode == "Monthly") {
                                AvailableRiders.MaxSumAssured = Math.floor(((((((((item.OriginalmonthlyPremium + rider.RiderPremium) / AvailableRiders.RiderServiceTax) * AvailableRiders.MFactor) / (AvailableRiders.Rates - AvailableRiders.Rates * AvailableRiders.Discount / 100))) / AvailableRiders.MonthlyFactor) / AvailableRiders.MFactor)) * AvailableRiders.MFactor / AvailableRiders.SliderRange) * AvailableRiders.SliderRange;
                            }
                            else {
                                AvailableRiders.MaxSumAssured = Math.floor((((((((item.OriginalannualPremium + rider.AnnualPremium) / AvailableRiders.RiderServiceTax) * AvailableRiders.MFactor) / (AvailableRiders.Rates - AvailableRiders.Rates * AvailableRiders.Discount / 100))) / AvailableRiders.MFactor)) * AvailableRiders.MFactor / AvailableRiders.SliderRange) * AvailableRiders.SliderRange;
                            }
                            var MaxSumassured = 5000000;
                            if (item.SumAssured <= MaxSumassured) {
                                MaxSumassured = item.SumAssured;
                            }
                            if (MaxSumassured <= AvailableRiders.MaxSumAssured) {
                                AvailableRiders.MaxSumAssured = MaxSumassured;
                            }
                            if ($scope.mdrider[item.PlanId + ',' + AvailableRiders.RiderId] != true || AvailableRiders.SelectedSumAssured > AvailableRiders.MaxSumAssured) {
                                AvailableRiders.SelectedSumAssured = AvailableRiders.MaxSumAssured;
                                AvailableRiders.AnnualPremium = Math.round((((AvailableRiders.MaxSumAssured * AvailableRiders.Rates) / AvailableRiders.MFactor) - (((AvailableRiders.MaxSumAssured * AvailableRiders.Rates) / AvailableRiders.MFactor) * AvailableRiders.Discount / 100)) * AvailableRiders.RiderServiceTax, 0);
                                AvailableRiders.RiderMonthlyPremium = Math.round(AvailableRiders.AnnualPremium * AvailableRiders.MonthlyFactor);

                            }
                            if (item.PayingMode == "monthly" || item.PayingMode == "Monthly")
                                AvailableRiders.RiderPremium = Math.round(AvailableRiders.RiderMonthlyPremium);
                            else
                                AvailableRiders.RiderPremium = AvailableRiders.AnnualPremium;
                        }

                    });
                }
            }
        }
        $scope.LeadCreationStep1time = 0;
        $scope.LeadCreationStep1 = function (flag, id) {
            var urlservice = globals.IGwServiceURL + "/Lead.svc/web/GetMobileVerificationWithOTPRequest";
            var ServiceName = "Leadcreate";
            var data = DataFactory.GetLeadEncryptcal($scope, id);
            $scope = data;
            $scope.leadcreationid = id;
            if ($scope.otpverify != undefined) {
                $scope.leadencrypteddata.RequestString.MobileValidationRequest.MobileValidation.isOTPRequire = "Yes"
            }
            var response = QuoteService.LeadCreation1($scope.leadencrypteddata, $scope);
            $timeout(function () {
                if ($scope.LeadCreationStep1time == 0) {
                    $scope.TimeOutService("2000", urlservice, ServiceName);
                    $scope.responsenull['GetMobileVerificationWithOTPRequest'] = 0
                } else {
                    $scope.LeadCreationStep1time = 0;
                    $scope.responsenull['GetMobileVerificationWithOTPRequest'] = 1
                }
            }, 2000);
            response.then(function (result) {
                result.data = [angular.fromJson(result.data)];
                $scope.LeadCreationStep1time = 1;
                $scope.GetTime.GetMobileVerificationWithOTPRequest = new Date().getTime();
                if ($scope.responsenull['GetMobileVerificationWithOTPRequest'] == 0) {
                    $scope.totaltime.GetMobileVerificationWithOTPRequest = parseInt($scope.GetTime.GetMobileVerificationWithOTPRequest - $scope.HitTime.GetMobileVerificationWithOTPRequest);
                    $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime.GetMobileVerificationWithOTPRequest)
                }
                if (parseInt(result.data[0].data.Error.ErrorCode) == 0) {
                    if (flag == 1) {
                        $scope.LeadCreationStep2()
                    } else if (flag == 2) {
                        $scope.leadcreationdata.RequestString.LeadCreateRequest.User.Tokenid = result.data[0].data.MobileValidationResponse.Tokenid;
                        if ($scope.otpverify == undefined || (result.data[0].data.MobileValidationResponse.Valid == "Yes" && result.data[0].data.MobileValidationResponse.Meassage == "OK")) {
                            $scope.LeadCreationStep3(id);
                            $scope.showotp = !1
                        } else {
                            $scope.leadotpdata.RequestString.OTPValidationRequest.OTPValidation.Tokenid = result.data[0].data.MobileValidationResponse.Tokenid;
                            $scope.showotp = !0
                        }
                    }
                }
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        $scope.LeadCreationStep2time = 0;
        $scope.LeadCreationStep2 = function (id) {
            $scope.showotploader = !0;
            var a = "Lead Popup OTP Submit";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });


            $scope.leadotpdata.RequestString.OTPValidationRequest.OTPValidation.Mobile = $scope.userMobileNumber;
            var urlservice = globals.IGwServiceURL + "/Lead.svc/web/GetOTPVerificationRequest";
            var ServiceName = "Leadcreate";
            $scope.leadotpdata.RequestString.OTPValidationRequest.OTPValidation.OTP = $scope.userOTP;
            var response = QuoteService.LeadCreation2($scope.leadotpdata, $scope);
            $timeout(function () {
                if ($scope.LeadCreationStep2time == 0) {
                    $scope.TimeOutService("2000", urlservice, ServiceName);
                    $scope.responsenull['GetOTPVerificationRequest'] = 0
                } else {
                    $scope.LeadCreationStep2time = 0;
                    $scope.responsenull['GetOTPVerificationRequest'] = 1
                }
            }, 2000);
            response.then(function (result) {
                result.data = [angular.fromJson(result.data)];
                $scope.GetTime.GetOTPVerificationRequest = new Date().getTime();
                if ($scope.responsenull['GetOTPVerificationRequest'] == 0) {
                    $scope.totaltime.GetOTPVerificationRequest = parseInt($scope.GetTime.GetOTPVerificationRequest - $scope.HitTime.GetOTPVerificationRequest);
                    $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime.GetOTPVerificationRequest)
                }
                $scope.LeadCreationStep2time = 1;
                if (result.data[0].data.Error.ErrorType == "Ok" && result.data[0].data.Error.ErrorMessage == "OTP Validated") {
                    $scope.leadcreationdata.RequestString.LeadCreateRequest.User.Tokenid = result.data[0].data.Token.Tokenid;
                    $scope.LeadCreationStep3(id);
                    $scope.otpError = !1
                } else {
                    $scope.otpError = !0;
                    $scope.showotploader = !1
                }
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        $scope.LeadCreationStep3 = function (id) {
            if (id != undefined) {
                id = $scope.leadcreationid
            }
            var data = DataFactory.GetLeadCreationcal($scope);
            $scope = data;
            if ($scope.utmSource != undefined && ($scope.utmSource.toUpperCase() == "UVA" || $scope.utmSource.toUpperCase() == "TCL" || $scope.utmSource.toUpperCase() == "PML" || $scope.utmSource.toUpperCase() == "SDL" || $scope.noleadpop == !0)) {
                $scope.leadcreationdata.RequestString.LeadCreateRequest.Visitor.OriginPageid = 1
            }
            var response = QuoteService.LeadCreation3($scope.leadcreationdata, $scope);
            var urlservice = globals.IGwServiceURL + "/Lead.svc/web/GetLeadCreateRequest";
            var ServiceName = "Leadcreate";
            $timeout(function () {
                if ($scope.LeadCreationStep3time == 0) {
                    $scope.TimeOutService("2000", urlservice, ServiceName);
                    $scope.responsenull['GetLeadCreateRequest'] = 0
                } else {
                    $scope.LeadCreationStep3time = 0;
                    $scope.responsenull['GetLeadCreateRequest'] = 1
                }
            }, 2000);
            response.then(function (result) {
                result.data = [angular.fromJson(result.data)];
                $scope.clicktocallOtp = false;
                $scope.GetTime.GetLeadCreateRequest = new Date().getTime();
                if ($scope.responsenull['GetLeadCreateRequest'] == 0) {
                    $scope.totaltime.GetLeadCreateRequest = parseInt($scope.GetTime.GetLeadCreateRequest - $scope.HitTime.GetLeadCreateRequest);
                    $scope.TimeOutService("2000", urlservice, ServiceName, $scope.totaltime.GetLeadCreateRequest)
                }
                $scope.LeadCreationStep3time = 1;

                if ($scope.firstleadpop == 1) {
                    $rootScope.showleadpopup = !1;
                    $rootScope.scrollhide = '';

                    $scope.showbtnloader = !1;
                    $rootScope.showleadpopupInner = !1;
                    $scope.firstleadpop = 0;
                    $scope.template("Lead", !1)
                } else {
                    if (id == 1) {
                        $scope.clicktocallflag = !0;
                        var d = new Date();
                        //if ($rootScope.CurrenDateTimeService != undefined) {
                        //    d = new Date($rootScope.CurrenDateTimeService);
                        //}
                        var n = d.getHours();
                        if (n >= 10 && n <= 20) {
                            $scope.clicktocallmsg = "Thanks! We're calling you right away!"
                        } else {
                            $scope.clicktocallmsg = "Thanks! We're closed right now, we'll call you once we're back in office."
                        }
                        $scope.showcantdecide = !1;
                        // $localStorage.quotes_userdata.Mobile = $scope.userMobileNumber;
                        $scope.usertxtMobileNumber = $scope.userMobileNumber
                    } else {
                        $scope.Email = $scope.userEmailID;
                        $scope.usertxtMobileNumber = $scope.userMobileNumber;
                        $scope.BuyPlan()
                    }
                }
            }, function (response) {
                ServiceRespnse(response);
            });

        }
        $scope.closeReligarepop = function () {
            $scope.OpenReligarePopup = false;
            $rootScope.scrollhide = '';
            $scope.religaresmartloader = false;
            //            $timeout(function () {
            //                focusOnFiled($rootScope.selctedPlanId);
            //            }, 100);
        }

        $scope.showDisPop = function (item, flag) {
            $scope.discountlist = [];
            $scope.HealthdiscountUrl = '../HomePage/Template/HealthDiscountPopup.html';

            $location.search("discountpop", "true");
            var total, disamt;

            if (flag == 2) {
                if (item.DiscountedFinalPremium2 != 0 && item.FinalPremium2 != 0) {
                    $rootScope.showhealthdiscount = true;
                    $scope.discMessage = "2 years";

                    if (item.DiscountType == 2) {


                        disamt2year = parseInt(((item.PremiumForPolicyYear2) * item.DiscountPercentforPolicyTerm2) / 100);
                        $scope.FinalPremium = item.DiscountedFinalPremium2;
                        var secondfinal = item.PremiumForPolicyYear2 - disamt2year;
                        total = parseInt(item.Premium + secondfinal);
                        if (item.ServiceTax == 0 && item.ServiceTax2 == 0) {
                            $scope.discountlist = [{ text: "1 yr Premium(A)", value: item.Premium, id: 1 }, { text: "2 yrs Premium(B)", value: item.PremiumForPolicyYear2, id: 1 }, { text: "Discount % for 2nd year Premium (B)", value: item.DiscountPercentforPolicyTerm2, id: 2 }, { text: "Discount Amount on 2 yrs Premium", value: disamt2year, id: 1 }, { text: "2nd year Premium after Discount(C)", value: secondfinal, id: 1 }, { text: "Total(D) = (A + C)", value: total, id: 1 }];

                        }
                        else {
                            $scope.discountlist = [{ text: "1 yr Premium(A)", value: item.Premium, id: 1 }, { text: "2 yrs Premium(B)", value: item.PremiumForPolicyYear2, id: 1 }, { text: "Discount % for 2nd year Premium (B)", value: item.DiscountPercentforPolicyTerm2, id: 2 }, { text: "Discount Amount on 2 yrs Premium", value: disamt2year, id: 1 }, { text: "2nd year Premium after Discount(C)", value: secondfinal, id: 1 }, { text: "Total(D) = (A + C)", value: total, id: 1 }, { text: "GST", value: item.TotalTax2, id: 1 }];

                        }
                    }
                    else {
                        total = parseInt(item.Premium + item.PremiumForPolicyYear2);
                        disamt = parseInt(((item.Premium + item.PremiumForPolicyYear2) * item.DiscountPercentforPolicyTerm2) / 100);
                        var total1 = total - disamt;
                        $scope.FinalPremium = item.DiscountedFinalPremium2;
                        if (item.ServiceTax == 0 && item.ServiceTax2 == 0) {
                            $scope.discountlist = [{ text: "1 yr Premium(A)", value: item.Premium, id: 1 }, { text: "2 yrs Premium(B)", value: item.PremiumForPolicyYear2, id: 1 }, { text: "Total(C) = (A+B)", value: total, id: 1 }, { text: "Discount % for Total (C)", value: item.DiscountPercentforPolicyTerm2, id: 2 }, { text: "Discount Amount", value: disamt, id: 1 }, { text: "Total Premium after Discount(D)", value: total1, id: 1 }];
                        }
                        else {
                            $scope.discountlist = [{ text: "1 yr Premium(A)", value: item.Premium, id: 1 }, { text: "2 yrs Premium(B)", value: item.PremiumForPolicyYear2, id: 1 }, { text: "Total(C) = (A+B)", value: total, id: 1 }, { text: "Discount % for Total (C)", value: item.DiscountPercentforPolicyTerm2, id: 2 }, { text: "Discount Amount", value: disamt, id: 1 }, { text: "Total Premium after Discount(D)", value: total1, id: 1 }, { text: "GST", value: item.TotalTax2, id: 1 }];

                        }

                    }
                }
            }
            else if (flag == 3) {
                if (item.DiscountedFinalPremium3 != 0 && item.FinalPremium3 != 0) {
                    $rootScope.showhealthdiscount = true;
                    $scope.discMessage = "3 years";

                }

                if (item.DiscountType == 2) {

                    disamt3year = parseInt(((item.PremiumForPolicyYear3) * item.DiscountPercentforPolicyTerm3) / 100);
                    $scope.FinalPremium = item.DiscountedFinalPremium3;
                    var thirdfinal = item.PremiumForPolicyYear3 - disamt3year;
                    total = parseInt(item.Premium + item.PremiumForPolicyYear2 + thirdfinal);
                    $scope.discountlist = [{ text: "1 yr Premium(A)", value: item.Premium, id: 1 }, { text: "2 yrs Premium(B)", value: item.PremiumForPolicyYear2, id: 1 }, { text: "3 yrs Premium(C)", value: item.PremiumForPolicyYear3, id: 1 }, { text: "Discount % for 3nd year Premium (C)", value: item.DiscountPercentforPolicyTerm3, id: 2 }, { text: "Discount Amount on 3rd yr Premium ", value: disamt3year, id: 1 }, { text: "3rd year Premium after Discount(D)", value: thirdfinal, id: 1 }, { text: "Total(E) = (A + B + D)", value: total, id: 1 }, { text: "GST", value: item.TotalTax3, id: 1 }];
                }
                else {
                    total = parseInt(item.Premium + item.PremiumForPolicyYear2 + item.PremiumForPolicyYear3);
                    disamt = parseInt(((item.Premium + item.PremiumForPolicyYear2 + item.PremiumForPolicyYear3) * item.DiscountPercentforPolicyTerm3) / 100);
                    var thirdfinal = total - disamt;
                    if (item.ServiceTax == 0 && item.ServiceTax2 == 0 && item.ServiceTax3 == 0) {
                        $scope.discountlist = [{ text: "1 yr Premium(A)", value: item.Premium, id: 1 }, { text: "2 yrs Premium(B)", value: item.PremiumForPolicyYear2, id: 1 }, { text: "3 yrs Premium(C)", value: item.PremiumForPolicyYear3, id: 1 }, { text: "Total(D) = (A+B+C)", value: total, id: 1 }, { text: "Discount % for Total(D)", value: item.DiscountPercentforPolicyTerm3, id: 2 }, { text: "Discount Amount on Total Premium ", value: disamt, id: 1 }, { text: "Total Premium after Discount(E)", value: thirdfinal, id: 1 }];

                    }
                    else {
                        $scope.discountlist = [{ text: "1 yr Premium(A)", value: item.Premium, id: 1 }, { text: "2 yrs Premium(B)", value: item.PremiumForPolicyYear2, id: 1 }, { text: "3 yrs Premium(C)", value: item.PremiumForPolicyYear3, id: 1 }, { text: "Total(D) = (A+B+C)", value: total, id: 1 }, { text: "Discount % for Total(D)", value: item.DiscountPercentforPolicyTerm3, id: 2 }, { text: "Discount Amount on Total Premium ", value: disamt, id: 1 }, { text: "Total Premium after Discount(E)", value: thirdfinal, id: 1 }, { text: "GST", value: item.TotalTax3, id: 1 }];

                    }

                    $scope.FinalPremium = item.DiscountedFinalPremium3;
                }
            }
        }
        $scope.onTabSelected = function (item, itm) {
            $scope.data11.group1 = itm.value;
            if ($scope.data11.group1 == 1) {
                item.Premium1 = true;
                item.Premium2 = false;
                item.Premium3 = false;

                item.FinalPremium = item.FinalPremium1;

            }
            else if ($scope.data11.group1 == 2) {


                item.FinalPremium = item.DiscountedFinalPremium2;
                item.Premium2 = true;
                item.Premium3 = false;
                item.Premium1 = false;
            }
            else if ($scope.data11.group1 == 3) {

                item.FinalPremium = item.DiscountedFinalPremium3;
                item.Premium3 = true;
                item.Premium2 = false;
                item.Premium1 = false;



            }
        }
        $scope.ridercheckradiobtn = function (rider, item, id) {
            var checkflag = 0;
            if ($scope.mdridertemp != undefined && rider.NoResponse == 1) {
                if (rider.BundleId == $scope.mdridertemp[item.PlanId]) {
                    $scope.mdridertemp[item.PlanId] = undefined;
                    checkflag = 1;
                }
                else {
                    $scope.mdridertemp[item.PlanId] = rider.BundleId;
                }
            }
            else {
                $scope.mdridertemp = [];
                $scope.mdridertemp[item.PlanId] = rider.BundleId;

            }
            var idxq = $filter('filter')($scope.userselectionrider, function (d) { return d.PlanId == item.PlanId && d.BundleId > 0 })[0];
            if (idxq != undefined) {
                $scope.editmdrider[item.PlanId + ',' + idxq.BundleId] = false;
                $scope.mdrider[item.PlanId + ',' + idxq.BundleId] = undefined;
            }
            var idx = $scope.userselectionrider.indexOf(idxq);
            if (idx > -1) {
                $scope.userselectionrider.splice(idx, 1);
            }
            if (checkflag != 1 || rider.NoResponse == 0) {
                $scope.userselectionrider.push(rider);
            }
            item.Premium = Math.round(item.OriginalPremium);
            item.AnnualPremium = Math.round(item.OriginalannualPremium);
            item.MonthlyPremium = Math.round(item.OriginalmonthlyPremium);
            if ($scope.userselectionrider.length > 0) {
                for (var c = 0; c < $scope.userselectionrider.length; c++) {
                    if ($scope.userselectionrider[c].PlanId == item.PlanId) {
                        if ($scope.userselectionrider[c].BundleId != 20) {
                            $scope.editmdrider[$scope.userselectionrider[c].PlanId + ',' + $scope.userselectionrider[c].BundleId] = true;
                        }
                        $scope.mdrider[$scope.userselectionrider[c].PlanId + ',' + $scope.userselectionrider[c].BundleId] = $scope.userselectionrider[c].BundleId;
                        item.Premium = Math.round(item.Premium + $scope.userselectionrider[c].RiderPremium);
                        item.AnnualPremium = Math.round(item.AnnualPremium + $scope.userselectionrider[c].AnnualPremium);
                        item.MonthlyPremium = Math.round(item.MonthlyPremium + $scope.userselectionrider[c].RiderMonthlyPremium);
                    }
                }
            }
            if (id == 'getquote') {
                $scope.PlanItem = item;
            }
            else {
                for (var i = 0; i < $scope.Quotes_Data_Plan.length; i++) {
                    if ($scope.Quotes_Data_Plan[i].PlanId == item.PlanId) {
                        $scope.Quotes_Data_Plan[i] = item;
                    }
                }
                //if ($scope.userselectionrider.length > 0) {
                //    for (var c = 0; c < $scope.userselectionrider.length; c++) {
                //        for (var ik = 0; ik < $scope.Quotes_Data_Plan.length; ik++) {
                //            if ($scope.Quotes_Data_Plan[ik].PlanId == $scope.userselectionrider[c].PlanId && $scope.userselectionrider[c].PlanId == item.PlanId) {
                //                if ($scope.userselectionrider[c].BundleId != 20) {
                //                    $scope.editmdrider[$scope.userselectionrider[c].PlanId + ',' + $scope.userselectionrider[c].BundleId] = true;
                //                }
                //                $scope.mdrider[$scope.userselectionrider[c].PlanId + ',' + $scope.userselectionrider[c].BundleId] = $scope.userselectionrider[c].BundleId;
                //                $scope.Quotes_Data_Plan[ik].Premium = Math.round($scope.Quotes_Data_Plan[ik].Premium + $scope.userselectionrider[c].RiderPremium);
                //                $scope.Quotes_Data_Plan[ik].AnnualPremium = Math.round($scope.Quotes_Data_Plan[ik].AnnualPremium + $scope.userselectionrider[c].AnnualPremium);
                //                $scope.Quotes_Data_Plan[ik].MonthlyPremium = Math.round($scope.Quotes_Data_Plan[ik].MonthlyPremium + $scope.userselectionrider[c].RiderMonthlyPremium);
                //            }
                //        }
                //    }
                //}
            }
        }
        $scope.policyTermforSuper = function (id) {
            $scope.loadertext = "Fetching best quotes as per your need";
            $scope.noshowloader = false;
            $scope.showloader = true;
            //$scope.policyTermYearValue

            $timeout(function () {
                if ($scope.policyTermYearValue == 1) {
                    $scope.totalPlans = 0;
                    for (var n = 0; n < $scope.SuperInsurerList.length; n++) {
                        var minSumInsured = Math.min(...$scope.PlanList[$scope.SuperInsurerList[n]].map(item => item.SumInsured));
                        for (var j = 0; j < $scope.PlanList[$scope.SuperInsurerList[n]].length; j++) {
                            if ($scope.PlanList[$scope.SuperInsurerList[n]][j].PremiumForPolicyYear1 > 0 && $scope.PlanList[$scope.SuperInsurerList[n]][j].SumInsured == minSumInsured) {
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].isShow = true;
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].Premium1 = true;
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].Premium2 = false;
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].Premium3 = false;
                                $scope.selectSumInsured[$scope.PlanList[$scope.SuperInsurerList[n]][j].PlanId] = $scope.PlanList[$scope.SuperInsurerList[n]][j].SumInsured;
                                $scope.totalPlans = $scope.totalPlans + 1;
                            }
                            else {
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].isShow = false;
                            }
                        }
                    }
                    $scope.noshowloader = true;
                    $scope.showloader = false;
                }
                else if ($scope.policyTermYearValue == 2) {
                    $scope.totalPlans = 0;
                    for (var n = 0; n < $scope.SuperInsurerList.length; n++) {
                        var minSumInsured = Math.min(...$scope.PlanList[$scope.SuperInsurerList[n]].map(item => item.SumInsured));
                        for (var j = 0; j < $scope.PlanList[$scope.SuperInsurerList[n]].length; j++) {
                            if ($scope.PlanList[$scope.SuperInsurerList[n]][j].PremiumForPolicyYear2 > 0 && $scope.PlanList[$scope.SuperInsurerList[n]][j].SumInsured == minSumInsured) {
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].isShow = true;
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].Premium1 = false;
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].Premium2 = true;
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].Premium3 = false;
                                $scope.selectSumInsured[$scope.PlanList[$scope.SuperInsurerList[n]][j].PlanId] = $scope.PlanList[$scope.SuperInsurerList[n]][j].SumInsured;
                                $scope.totalPlans = $scope.totalPlans + 1;
                            }
                            else {
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].isShow = false;
                            }
                        }
                    }
                    $scope.noshowloader = true;
                    $scope.showloader = false;
                }
                else if ($scope.policyTermYearValue == 3) {
                    $scope.totalPlans = 0;
                    for (var n = 0; n < $scope.SuperInsurerList.length; n++) {
                        var minSumInsured = Math.min(...$scope.PlanList[$scope.SuperInsurerList[n]].map(item => item.SumInsured));
                        for (var j = 0; j < $scope.PlanList[$scope.SuperInsurerList[n]].length; j++) {
                            if ($scope.PlanList[$scope.SuperInsurerList[n]][j].PremiumForPolicyYear3 > 0 && $scope.PlanList[$scope.SuperInsurerList[n]][j].SumInsured == minSumInsured) {
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].isShow = true;
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].Premium1 = false;
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].Premium2 = false;
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].Premium3 = true;
                                $scope.selectSumInsured[$scope.PlanList[$scope.SuperInsurerList[n]][j].PlanId] = $scope.PlanList[$scope.SuperInsurerList[n]][j].SumInsured;
                                $scope.totalPlans = $scope.totalPlans + 1;
                            }
                            else {
                                $scope.PlanList[$scope.SuperInsurerList[n]][j].isShow = false;
                            }
                        }
                    }
                    $scope.noshowloader = true;
                    $scope.showloader = false;
                }
            }, 2000)
        }
        $scope.policyTermYearFn = function (id) {

            if ($scope.Quotes_Data != undefined) {
                if ($scope.Quotes_Data.length > 0) {
                    var a = $scope.gaProduct + " Cover For Filter";
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

                }
            }

            $scope.loadertext = "Fetching best quotes as per your need";
            if (id == 1) {
                $scope.noshowloader = false;
                $scope.showloader = true;
            }
            if ($scope.policyTermYearValue == 2) {
                $timeout(function () {
                    policyTermYearFn2();
                    $scope.totalplanlength = $scope.Quotes_Data.length;
                    if (id == 1) {
                        $scope.noshowloader = true;
                        $scope.showloader = false;
                    }
                    HealthleftpanelDissablefn();
                }, 500);
            }
            else if ($scope.policyTermYearValue == 3) {
                // policyTermYearFn3();
                $timeout(function () {
                    policyTermYearFn3();
                    $scope.totalplanlength = $scope.Quotes_Data.length;
                    if (id == 1) {
                        $scope.noshowloader = true;
                        $scope.showloader = false;
                    }
                    HealthleftpanelDissablefn();
                }, 500);
            }
            else {
                $timeout(function () {
                    policyTermYearFn1();
                    $scope.totalplanlength = $scope.Quotes_Data.length;
                    if (id == 1) {
                        $scope.noshowloader = true;
                        $scope.showloader = false;
                    }
                    HealthleftpanelDissablefn();
                }, 500);
            }
        }
        $scope.setcalendar = function () {
            if ($scope.travelEndDate1 != undefined) {
                $scope.travelEndDate1.calendars[0] = { "month": $scope.quotes_userdata.EndDate.getMonth(), "year": $scope.quotes_userdata.EndDate.getFullYear() };
                $scope.travelStartDate1.calendars[0] = { "month": $scope.quotes_userdata.StartDate.getMonth(), "year": $scope.quotes_userdata.StartDate.getFullYear() };
            }
        }
        $rootScope.closeRider = function () {
            $scope.Riderdetails = false;
            $scope.jointlifeRiderdetails = false;
            $rootScope.scrollhide = '';
            $location.search("riderpop", null);

        }

        $scope.chipcheck = function (item1, id) {
            var count = 0;
            if ($scope.userselectionrider != undefined && $scope.userselectionrider != null) {
                for (var i = 0; i < $scope.userselectionrider.length; i++) {

                    if ($scope.userselectionrider[i].PlanId == item1.PlanId) {
                        count++;
                    }

                }

                termselectedchip();
            }

            if (count == 0) {
                cl1 = "impfeaanimation1";
                cl2 = "impfeaanimation2";
                cl3 = "impfeaanimation";
            }
            else if (count < 3) {
                cl1 = "impfeaanimation11";
                cl2 = "impfeaanimation3";
                cl3 = "impfeaanimation01";
            }
            else if (count >= 3 && count <= 4) {
                cl1 = "impfeaanimation12";
                cl2 = "impfeaanimation4";
                cl3 = "impfeaanimation02";
            }
            else if (count > 3) {
                cl1 = "impfeaanimation13";
                cl2 = "impfeaanimation5";
                cl3 = "impfeaanimation03";
            }

            if (item1.impfeaanimation == "impfeaanimation1" || item1.impfeaanimation == "impfeaanimation11" || item1.impfeaanimation == "impfeaanimation12"
                || item1.impfeaanimation == "impfeaanimation13") {
                item1.impfeaanimation == cl1;
            }
            else {
                item1.impfeaanimation == cl2;
            }

        }

        $rootScope.backClose = function () {
            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                $scope.Quotes_Data[i].NetworkShow = false;

                //$scope.Quotes_Data[i].claimShowMore = false;
                $scope.Quotes_Data[i].showanm = false;
                $scope.Quotes_Data[i].impclass = "impfeatanimateclose";
                $scope.Quotes_Data[i].impdisclass = "disno";
                $scope.Quotes_Data[i].FeatureDetailsShow = false;

                // var y = $window.scrollY - 160;
                $scope.Quotes_Data[i].topClass = "";


                $scope.Quotes_Data[i].impfeaanimation = cl1;
            }
            $timeout.cancel($scope.timecancel);
        }

        $scope.FeatureDetails = function (item, id, flag, ids) {



            if ($scope.product.toLowerCase() == "health" && item.FeatureDetailsShow != true && item.exclusion == undefined && item.PlanId != undefined) {
                if ($scope.featureValueMobile == undefined) {

                    if ($rootScope.healthdata.Requests[0].IsCovid) {
                        $scope.featureValueMobile = [
                            { class: "roomrent", id: "#roomrent", Opentooltip: false, name: "Room Rent", value: "", rank: 0, flag: false, elemid: "RoomBar-", orderrank: 0, tooltip: "Actual expenses incurred by insured during the course of hospitalization will be covered from the insurance company." },
                            { class: "ambulance1", id: "#ambulance1", Opentooltip: false, name: "Ambulance Charges", value: "", rank: 0, flag: true, elemid: "AmbuBar-", orderrank: 0, tooltip: "Under this feature ambulance expenses incurred by you during hospitalization will be covered." },
                            { class: "waitingper", id: "#waitingper", Opentooltip: false, name: "Waiting Period", value: "", rank: 0, flag: true, elemid: "HCUHBar-", orderrank: 0, tooltip: 'Waiting Period means a period from the inception of this Policy during which Covid is not covered.' },
                            // { class: "coverage", id: "#coverage", Opentooltip: false, name: "Coverage of Pre-existing Diseases", value: "", rank: 0, flag: true, elemid: "HCUHBar-", orderrank: 0, tooltip: 'Pre-existing Disease means any condition, ailment, injury or disease' },
                            { class: "homecare", id: "#homecare", Opentooltip: false, name: "Home Care Treatment Expenses", value: "", rank: 0, flag: true, elemid: "AmbuBar-", orderrank: 0, tooltip: 'Home Care Treatment means Treatment availed by the Insured Person at home for Covid on positive diagnosis of Covid in a Government authorized diagnostic Centre, which in normal course would require care and treatment at a hospital but is actually taken at home provided that:<br>a) The Medical practitioner advices the Insured person to undergo treatment at home.<br>b) There is a continuous active line of treatment with monitoring of the health status by a medical practitioner for each day through the duration of the home care treatment.<br>c) Daily monitoring chart including records of treatment administered duly signed by the treating doctor is maintained.<br>d) Insured shall be permitted to avail the services as prescribed by the medical practitioner.Cashless or reimbursement facility shall be offered under homecare expenses subject to claim settlement policy disclosed in the website.<br>e) In case the insured intends to avail the services of non - network provider claim shall be subject to reimbursement, a prior approval from the Insurer needs to be taken before availing such services.ln this benefit, the following shall be covered if prescribed by the treating medical practitioner and is related to treatment of COVID,<br>a.Diagnostic tests undergone at home or at diagnostics centre<br>b.Medicines prescribed in writing<br>c.Consultation charges of the medical practitioner<br>d.Nursing charges related to medical staff<br>e.Medical procedures limited to parenteral administration of medicines<br>f.Cost of Pulse oximeter, Oxygen cylinder and Nebulizer' },
                        ];

                    }
                    else {
                        $scope.featureValueMobile = [
                            { class: "restorebenefit", name: "Restore Benefit", flag: true, elemid: "ResBHBar-", orderrank: 0, tooltip: "This feature will reinstate  your Sum Insured for a non-related illness to original Sum Insured if you have exhausted your original sum insured & no claim bonus in a policy period." },
                            { class: "noclaim", name: "No Claim Bonus", flag: true, elemid: "NCBHBar-", orderrank: 0, tooltip: "It is the percentage increase in the Sum Insured in case there was no claim in previous year under the policy. It can vary from 5-100% of the Sum Insured." },
                            { class: "opd", name: "OPD", flag: true, elemid: "OPDBar-", orderrank: 0, tooltip: "Expenses related to pharmacy, diagnostics, medical aids prescribed by doctor which does not require 24 hours hospitalization. It will be on reimbursement basis. " },
                            { class: "roomrent", name: "Room Rent", flag: true, elemid: "RoomBar-", orderrank: 0, tooltip: "Actual expenses incurred by insured during the course of hospitalization will be covered from the insurance company. Ideally one should look for No limit under this benefit." },
                            { class: "preexist", name: "Pre Existing Illnesses", flag: true, elemid: "PreExiBar-", orderrank: 0, tooltip: "A specific wait period after which the claim for Pre-existing disease will be settled." },
                            { class: "maternity", name: "Maternity Benefits", flag: true, elemid: "MaterBar-", orderrank: 0, tooltip: "Maternity Benefit is the cover you can avail for expenses related to child birth. It includes normal delivery, Caesarean section & lawful Medical termination of pregnancy. " },
                            { class: "policyterm", name: "Policy Term", flag: true, elemid: "MaterBar-", orderrank: 0, tooltip: "Policy Term. " }
                        ];
                    }
                }
                var planid = item.PlanId;
                var ageinmonth = parseInt($scope.AgeTerm * 12);
                var SumInsuredMin = item.SumInsuredMin;
                if ($rootScope.healthdata.Requests[0].DeductibleAmount > 0) {
                    SumInsuredMin = item.SumInsured;
                }

                var moreinfodata = FeatureService.GetHealthMoreInfoData($scope.quotesrequest.Requests[0], ageinmonth, planid, SumInsuredMin);
                moreinfodata.then(function (response) {
                    if (response.data.length > 0) {
                        item = angular.extend(item, response.data[0]);
                        item.exclusion = response.data[0].Exclusion;
                        item.extra_features = response.data[0].ExtraFeatures;
                    }
                    if ($scope.gaProduct == "Health Super") {
                        $scope.mobilepopdetails(item);

                    }
                    else {

                        $scope.FeatureDetailsNew(item, id, flag, ids);
                    }

                });
            }
            else {

                if ($scope.gaProduct == "Health Super") {
                    $scope.mobilepopdetails(item);
                }
                else {

                    //if ($scope.product == "Term" && id == undefined) {
                    //    item.showAllAddon = true;
                    //}
                    //else {
                    //    item.showAllAddon = false;
                    //}
                    if ($scope.product == "Term" && id == undefined) {
                        Openfeaturedetails[item.PlanId] = true;
                        if (item.IncreasingSumAssured == 3) {
                            item.IncreasingSAValue = $scope.totalcount1;
                        }
                        if (item.TermPercentagePremium == 1) {
                            $scope.Iprocover = angular.copy(item.InitialRiskcover);
                            $scope.IPRO_Annaual = angular.copy(item.OriginalannualPremium);
                            $scope.IPRO_Month = angular.copy(item.OriginalmonthlyPremium);
                        }
                        $scope.increasingTooltip = "Sum assured chosen on plan commencement increases periodically by a specified amount. Sum assured reached at the time of payout is paid to the nominee.";
                        if (item.InsurerId == 29) {
                            for (var q = 0; q < item.AvailableRiders.length; q++) {
                                if (item.AvailableRiders[q].RiderId == 2) {
                                    $scope.RiderPT[item.PlanId + ',' + item.AvailableRiders[q].RiderId] = item.AvailableRiders[q].PolicyTermYear;
                                    $scope.RiderPPT[item.PlanId + ',' + item.AvailableRiders[q].RiderId] = item.AvailableRiders[q].PremiumPayingTerm;
                                    $scope.TempriderPremiumPayingTerm = item.AvailableRiders[q].PremiumPayingTerm;
                                    $scope.RiderPPTlist[item.PlanId] = [];
                                    $scope.RiderPTlist[item.PlanId] = [];
                                    var ppt = item.AvailableRiders[q].PremiumPayingTerm;
                                    if (ppt > 35) {
                                        ppt = 35;
                                    }
                                    for (var s = 5; s <= ppt; s++) {
                                        $scope.RiderPPTlist[item.PlanId].push({ "value": s, "Name": s + ' yrs' })
                                    }
                                    if (item.AvailableRiders[q].PremiumPayingTerm > 35) {
                                        $scope.RiderPPTlist[item.PlanId].push({ "value": item.AvailableRiders[q].PremiumPayingTerm, "Name": item.AvailableRiders[q].PremiumPayingTerm + ' yrs' })
                                    }
                                    for (var s = 10; s <= item.AvailableRiders[q].PolicyTermYear; s++) {
                                        $scope.RiderPTlist[item.PlanId].push({ "value": s, "Name": s + ' yrs' })
                                    }
                                }
                                if (item.PlanId == 865) {
                                    if (item.AvailableRiders[q].RiderId == 3) {
                                        if (item.PayingMode == "monthly" || item.PayingMode == "Monthly") {
                                            item.AvailableRiders[q].MaxSumAssured = Math.floor(((((((((item.OriginalmonthlyPremium) / item.AvailableRiders[q].RiderServiceTax) * item.AvailableRiders[q].MFactor) / (item.AvailableRiders[q].Rates - item.AvailableRiders[q].Rates * item.AvailableRiders[q].Discount / 100))) / item.AvailableRiders[q].MonthlyFactor) / item.AvailableRiders[q].MFactor)) * item.AvailableRiders[q].MFactor / item.AvailableRiders[q].SliderRange) * item.AvailableRiders[q].SliderRange;
                                        }
                                        else {
                                            item.AvailableRiders[q].MaxSumAssured = Math.floor((((((((item.OriginalannualPremium) / item.AvailableRiders[q].RiderServiceTax) * item.AvailableRiders[q].MFactor) / (item.AvailableRiders[q].Rates - item.AvailableRiders[q].Rates * item.AvailableRiders[q].Discount / 100))) / item.AvailableRiders[q].MFactor)) * item.AvailableRiders[q].MFactor / item.AvailableRiders[q].SliderRange) * item.AvailableRiders[q].SliderRange;
                                        }
                                        var MaxSumassured = 5000000;
                                        if (item.SumAssured < MaxSumassured) {
                                            MaxSumassured = item.SumAssured;
                                        }
                                        if (item.AvailableRiders[q].MaxSumAssured > MaxSumassured) {
                                            item.AvailableRiders[q].MaxSumAssured = MaxSumassured;
                                        }
                                    }
                                }
                            }
                        }
                        if (item.InsurerId == 20) {
                            if ($scope.diabeticsuffer == 'yes') {
                                $scope.ADDisablemodel[item.PlanId + ',' + 3] = true;
                                $scope.ADDisablemodel[item.PlanId + ',' + 6] = true;
                            }
                            else {
                                $scope.ADDisablemodel[item.PlanId + ',' + 3] = false;
                                $scope.ADDisablemodel[item.PlanId + ',' + 6] = false;
                            }
                        }

                    }

                    $scope.FeatureDetailsNew(item, id, flag, ids);
                }
            }
        }

        $scope.FeatureDetailsNew = function (item, id, flag, ids) {



            $scope.chipcheck(item, 1);

            if (flag == 'impfeature') {
                if (id == true) {
                    id = 'less';
                }
                else {
                    id = 'more';
                }
            }
            else if (flag == 'impfeatureextra') {
                if (id == true) {
                    id = 'featureless';
                }
                else {
                    id = 'featuremore';
                }
            }
            else if (flag == 'networkfeature') {
                if (id == true) {
                    id = 'Networkless';
                }
                else {
                    id = 'NetworkMore';
                }
            }
            else if (flag == 'Policyfeature') {
                if (id == true) {
                    id = 'PolicyTermless';
                }
                else {
                    id = 'PolicyTermmore';
                }
            }
            else if (flag == 'Payingfeature') {
                if (id == true) {
                    id = 'PayingTermless';
                }
                else {
                    id = 'PayingTermmore';
                }
            }
            else if (flag == 'Taxfeature') {
                if (id == true) {
                    id = 'Taxless';
                }
                else {
                    id = 'Taxmore';
                }
            }
            else if (flag == 'Issuancefeature') {
                if (id == true) {
                    id = 'Issuanceless';
                }
                else {
                    id = 'Issuancemore';
                }
            }
            else if (flag == 'survivalfeature') {
                if (id == true) {
                    id = 'survivalless';
                }
                else {
                    id = 'survivalmore';
                }
            }
            else if (flag == 'AmountPercentfeature') {
                if (id == true) {
                    id = 'AmountPercentless';
                }
                else {
                    id = 'AmountPercentmore';
                }
            }
            else if (flag == 'Totalcoverfeature') {
                if (id == true) {
                    id = 'Totalcoverless';
                }
                else {
                    id = 'Totalcovermore';
                }
            }
            else if (flag == 'Onetimefeature') {
                if (id == true) {
                    id = 'Onetimeless';
                }
                else {
                    id = 'Onetimemore';
                }
            }
            else if (flag == 'MonthlyIncomefeature') {
                if (id == true) {
                    id = 'MonthlyIncomeless';
                }
                else {
                    id = 'MonthlyIncomemore';
                }
            }
            $scope.impanimate = "fadeInDown";


            if (id == 'more') {
                item.claimShowMore = true;
            }
            else if (id == 'less') {
                item.claimShowMore = false;
            }
            else if (id == 'PolicyTermmore') {
                item.PolicyTermShowMore = true;
            }
            else if (id == 'PolicyTermless') {
                item.PolicyTermShowMore = false;
            }
            else if (id == 'PayingTermmore') {
                item.payingtermMore = true;
            }
            else if (id == 'PayingTermless') {
                item.payingtermMore = false;
            }
            else if (id == 'Taxmore') {
                item.TaxShowMore = true;
            }
            else if (id == 'Taxless') {
                item.TaxShowMore = false;
            }
            else if (id == 'Issuancemore') {
                item.IssuanceRateMore = true;
            }
            else if (id == 'Issuanceless') {
                item.IssuanceRateMore = false;
            }
            else if (id == 'AmountPercentmore') {
                item.AmountPercentmore = true;
            }
            else if (id == 'AmountPercentless') {
                item.AmountPercentmore = false;
            }
            else if (id == 'Totalcovermore') {
                item.TotalcoverShowMore = true;
            }
            else if (id == 'Totalcoverless') {
                item.TotalcoverShowMore = false;
            }
            else if (id == 'Onetimemore') {
                item.OnetimeShowMore = true;
            }
            else if (id == 'Onetimeless') {
                item.OnetimeShowMore = false;
            }
            else if (id == 'MonthlyIncomemore') {
                item.MonthlyIncomeShowMore = true;
            }
            else if (id == 'MonthlyIncomeless') {
                item.MonthlyIncomeShowMore = false;
            }
            else if (id == 'survivalmore') {
                item.Survivalmore = true;
            }
            else if (id == 'survivalless') {
                item.Survivalmore = false;
            }
            else if (id == 'close') {
                item.NetworkShow = false;
                $timeout.cancel($scope.timecancel);
                //item.claimShowMore = false;
                item.showanm = false;
                item.impclass = "impfeatanimateclose";
                item.impdisclass = "disno";
                // $location.search("ImpFea", null);
                // var y = $window.scrollY - 160;
                item.topClass = "";


                item.impfeaanimation = cl1;
                if ($scope.device == 'Mobile') {
                    var id1 = "#" + item.PlanId;
                    // $window.scrollTo(id1, y, 1000);
                    item.FeatureDetailsShow = false;
                }
                else {
                    $scope.timecancel1 = $timeout(function () {
                        item.FeatureDetailsShow = false;
                    }, 500);
                }

                var a = 'Important Feature Close ' + $scope.gaProduct;

                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            }
            else if (id == 'featuremore') {
                $scope.FeatureDetailsShowMore[ids + item.name] = true;
                var a = $scope.gaProduct + " Feature More";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            }
            else if (id == 'featureless') {
                $scope.FeatureDetailsShowMore[ids + item.name] = false;
                var a = $scope.gaProduct + " Feature Less";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            }
            else if (id == 'NetworkMore') {
                item.NetworkShow = true;
            }
            else if (id == 'Networkless') {
                item.NetworkShow = false;
            }
            else {
                if (item.FeatureDetailsShow != true) {
                    for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                        $scope.Quotes_Data[i].impclass = "";
                        $scope.Quotes_Data[i].topClass = "";
                        //         $scope.Quotes_Data[i].FeatureDetailsShow = false;
                        //         $scope.Quotes_Data[i].NetworkShow = false;
                        // $scope.Quotes_Data[i].claimShowMore = false;
                        //                    $scope.Quotes_Data[i].FeatureDetailsShow = false;
                        if ($scope.product == "Term") {
                            if ($scope.Quotes_Data[i].AvailableRiders.length == 0 && $scope.Quotes_Data[i].ToolTipWaiveOff.length == 0) {
                                $scope.Quotes_Data[i].borderclass = "bordernone";
                            }
                            else {
                                $scope.Quotes_Data[i].borderclass = " ";
                            }
                        }
                    }
                    item.topClass = "topClassPos";
                    $scope.showpulseLoader = true;
                    item.impclass = "impfeatanimate";
                    item.impdisclass = "disyes";
                    $location.search("ImpFea", "true");
                    item.impfeaanimation = cl3;
                    $timeout.cancel($scope.timecancel1);
                    $scope.timecancel = $timeout(function () {
                        item.impfeaanimation = cl2;
                        item.impclass = "impfeatanimatetemp";
                        item.showanm = true;
                    }, 500);

                    item.FeatureDetailsShow = true;
                    if ($scope.productID == 3) {

                    }
                    // var y = $window.scrollY + 60;
                    var id1 = "#" + item.PlanId;

                    // focusOnFiled(item.PlanId);
                    // $window.scrollTo(id1, y, 1000);
                }
                var a = 'Important Feature ' + $scope.gaProduct;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: $scope.productID });

            }
        }
        $scope.ridercalulationfrterm2 = function (rider, item) {
            $scope.TermSliderpopupSrc = '../HomePage/Template/TermSliderpopup.html';
            $scope.item1 = item;
            $rootScope.silderpopupforterm = true;
            TermFactory.setsliderrange($scope, rider);
        }
        function ridercalulationfn(rider) {
            TermFactory.ridercalulationfunction($scope, rider, $rootScope);
        }

        function ServiceRespnse(errorRes) {
            console.log(errorRes);
            //alert(errorRes.status + "\n" + errorRes.config.url + "\n" + errorRes.statusText);
            //$scope.TimeOutService(2, errorRes.config.url, 'GetcityList', 10);
        }
        $scope.opendispopyear = function (id) {
            if (id == 2) {
                $scope.show2ndyr = true;
                $scope.show3rdyr = false;
            }
            else if (id == 3) {
                $scope.show2ndyr = false;
                $scope.show3rdyr = true;
            }
            $scope.showDisMobilePop($scope.Discountlistdata, id);
        }

        function focusOnFiled(ids) {
            //            var elmnt = document.getElementById(ids);
            //            elmnt.scrollIntoView();
            var elem = document.getElementById(ids);
            // // elem.scrollIntoView(true);
            if (elem != null) {
                elem.scrollIntoView({
                    block: "start",
                    inline: "start"
                })
            }

            // $window.scrollY + 260;


            //         var target = document.getElementById(ids);
            // target.parentNode.scrollTop = target.offsetTop;  
            // $location.hash(ids);

            // // call $anchorScroll()
            // anchorSmoothScroll.scrollTo(ids);
        }
        $scope.showDisMobilePop = function (item, id) {
            $scope.HealthdiscountUrl = '../HomePage/Template/HealthDiscountPopup.html';
            $rootScope.scrollhide = 'scollClass';
            $rootScope.sortfiltermobileshow = false;
            $scope.sortfiltermobileshow = false;
            $scope.Discountlistdata = item;
            $rootScope.selctedPlanId = $scope.Discountlistdata.PlanId;
            $rootScope.showhealthdiscountmobile = true;
            $scope.discountPercentSmart = undefined;
            $location.search("discountpop", "true");
            $scope.discountRiders = [];
            $scope.discountRiders3 = [];
            var discountRidersTotal2 = 0;
            var discountRidersTotal3 = 0;
            var discountRidersTotaltemp2 = 0;
            var discountRidersTotaltemp3 = 0;
            $scope.personaccflag = false;
            $scope.PersonalAccidentRider2 = [];
            $scope.SmartTotal = 0;
            $scope.SmartTotal1 = 0;
            $scope.PersonalAccidentRider3 = [];
            var addonGST = 0.18;
            for (var i = 0; i < $scope.Discountlistdata.AvailableRiders.length; i++) {
                if ($scope.mdrider[$scope.Discountlistdata.PlanId + "," + $scope.Discountlistdata.AvailableRiders[i].RiderId] == true || $scope.Discountlistdata.AvailableRiders[i].IsInculded == true) {
                    if ($scope.Discountlistdata.AvailableRiders[i].RiderPremium2 > 0) {
                        $scope.discountRiders.push({ ridername: $scope.Discountlistdata.AvailableRiders[i].RiderName, RiderPremium2: $scope.Discountlistdata.AvailableRiders[i].RiderPremium2, RiderPremium3: $scope.Discountlistdata.AvailableRiders[i].RiderPremium3 });
                        discountRidersTotal2 = discountRidersTotal2 + $scope.Discountlistdata.AvailableRiders[i].RiderPremium2;

                        if ($scope.Discountlistdata.AvailableRiders[i].NoDiscount == true) {
                            discountRidersTotaltemp2 = $scope.Discountlistdata.AvailableRiders[i].RiderPremium2 - ($scope.Discountlistdata.AvailableRiders[i].RiderPremium2 * ($scope.Discountlistdata.DiscountPercentforPolicyTerm2 / 100));
                            $scope.personaccflag = true;
                        }

                    }

                    if ($scope.Discountlistdata.AvailableRiders[i].RiderPremium3 > 0) {
                        $scope.discountRiders3.push({ ridername: $scope.Discountlistdata.AvailableRiders[i].RiderName, RiderPremium2: $scope.Discountlistdata.AvailableRiders[i].RiderPremium2, RiderPremium3: $scope.Discountlistdata.AvailableRiders[i].RiderPremium3 });
                        discountRidersTotal3 = discountRidersTotal3 + $scope.Discountlistdata.AvailableRiders[i].RiderPremium3;
                        if ($scope.Discountlistdata.AvailableRiders[i].NoDiscount == true) {
                            $scope.personaccflag = true;
                            discountRidersTotaltemp3 = $scope.Discountlistdata.AvailableRiders[i].RiderPremium3 - ($scope.Discountlistdata.AvailableRiders[i].RiderPremium3 * ($scope.Discountlistdata.DiscountPercentforPolicyTerm3 / 100));
                        }

                    }

                    if ($scope.Discountlistdata.AvailableRiders[i].RiderServiceTax > 1)
                        addonGST = $scope.Discountlistdata.AvailableRiders[i].RiderServiceTax - 1;
                    if ($scope.Discountlistdata.AvailableRiders[i].RiderPremium3 == 0 && $scope.Discountlistdata.AvailableRiders[i].RiderPremium2 == 0 && $scope.Discountlistdata.AvailableRiders[i].RiderPremium == 0) {
                        $scope.discountPercentSmart = $scope.Discountlistdata.AvailableRiders[i].Discount / 100;
                        $scope.SmartName = $scope.Discountlistdata.AvailableRiders[i].RiderName;
                    }

                }
            }


            $scope.discountedRiderTotal = discountRidersTotal2;



            $scope.discountedRiderTotal1 = discountRidersTotal3;

            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: 'Discount Card Popup Health', value: $scope.productID });

            if ($scope.policyTermYearValue == 1 && id == undefined) {
                $scope.show2ndyr = true;
                $scope.show3rdyr = false;
            }
            else if ($scope.policyTermYearValue == 2 || id == 2) {
                $scope.show2ndyr = true;
                $scope.show3rdyr = false;
            }
            else if ($scope.policyTermYearValue == 3 || id == 3) {
                $scope.show3rdyr = true;
                $scope.show2ndyr = false;
            }
            if (item.DiscountedFinalPremium2 > 0 && item.FinalPremium2 > 0) {
                if (item.DiscountType == 2) {

                    $scope.Discountlistdata.disamt2year = (((item.PremiumForPolicyYear2) * item.DiscountPercentforPolicyTerm2) / 100);
                    $scope.Discountlistdata.total2yr = (item.Premium + item.PremiumForPolicyYear2 - $scope.Discountlistdata.disamt2year + $scope.discountedRiderTotal);
                    $scope.Discountlistdata.net2ndyear = item.PremiumForPolicyYear2 - $scope.Discountlistdata.disamt2year;
                    $scope.Discountlistdata.nettotal = $scope.Discountlistdata.total2yr;
                }
                else {
                    $scope.Discountlistdata.total2yr = (item.Premium + item.PremiumForPolicyYear2 + $scope.discountedRiderTotal);
                    $scope.Discountlistdata.disamt2year = (((item.Premium + item.PremiumForPolicyYear2 + $scope.discountedRiderTotal) * item.DiscountPercentforPolicyTerm2) / 100);

                    $scope.Discountlistdata.nettotal = $scope.Discountlistdata.total2yr - $scope.Discountlistdata.disamt2year;
                    if ($scope.discountPercentSmart != undefined) {
                        $scope.SmartTotal = (($scope.Discountlistdata.nettotal - discountRidersTotaltemp2) * $scope.discountPercentSmart);
                    }
                }
                if ($scope.SmartTotal == undefined) {
                    $scope.SmartTotal = 0;
                }
                $scope.Discountlistdata.TotalTax02 = (($scope.Discountlistdata.nettotal - $scope.SmartTotal) * addonGST);

            }

            if (item.DiscountedFinalPremium3 > 0 && item.FinalPremium3 > 0) {
                if (item.DiscountType == 2) {
                    $scope.Discountlistdata.total3yr = (item.Premium + item.PremiumForPolicyYear2 + item.PremiumForPolicyYear3 + $scope.discountedRiderTotal1);
                    $scope.Discountlistdata.disamt3year = (((item.PremiumForPolicyYear3) * item.DiscountPercentforPolicyTerm3) / 100);
                    $scope.Discountlistdata.netTotal = $scope.Discountlistdata.total3yr;
                }
                else {
                    $scope.Discountlistdata.total3yr = (item.Premium + item.PremiumForPolicyYear2 + item.PremiumForPolicyYear3 + $scope.discountedRiderTotal1);
                    $scope.Discountlistdata.disamt3year = (((item.Premium + item.PremiumForPolicyYear2 + item.PremiumForPolicyYear3 + $scope.discountedRiderTotal1) * item.DiscountPercentforPolicyTerm3) / 100);
                    $scope.Discountlistdata.netTotal = $scope.Discountlistdata.total3yr - $scope.Discountlistdata.disamt3year;

                    if ($scope.discountPercentSmart != undefined) {
                        $scope.SmartTotal1 = (($scope.Discountlistdata.netTotal - discountRidersTotaltemp3) * $scope.discountPercentSmart);

                    }
                }
                if ($scope.SmartTotal1 == undefined) {
                    $scope.SmartTotal1 = 0;
                }
                $scope.Discountlistdata.TotalTax03 = (($scope.Discountlistdata.netTotal - $scope.SmartTotal1) * addonGST);

            }
        }
        $scope.showDisMobilePopclose = function (item) {

            $rootScope.showhealthdiscountmobile = false;
            $rootScope.sortfiltermobileshow = true;
            $scope.sortfiltermobileshow = true;
            $location.search("discountpop", null);
            $rootScope.scrollhide = '';
            //            $timeout(function () {
            //                focusOnFiled($rootScope.selctedPlanId);
            //            }, 100);
        }
        function maskvalue(value, flag) {
            var masked = "";
            if (flag == 'mobile') {
                var array = value.split('');
                masked = array[0] + array[1] + "XXXXXX" + array[8] + array[9];
                return masked;
            }
            else if (flag == 'email') {
                var array = value.split('@');
                var array1 = array[1].split('.');
                var array2 = array[0].split('');
                var length = (array2.length - 2) + array1[0].length;
                var array3 = "";
                for (var i = 0; i < length; i++) {
                    array3 = array3 + 'X';
                }
                masked = array2[0] + array2[1] + array3 + array1[1];
                return masked;
            }
        }
        function policyTermYearFn1() {
            if ($scope.HealthRefineChips.length > 0) {
                $scope.Quotes_Data = $scope.Quotes_Data1styr;
            }
            else {
                $scope.Quotes_Data = $scope.Quotes_Data_Plan;
            }
            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                if ($scope.Quotes_Data[i].DiscountedFinalPremium1 != 0) {
                    $scope.Quotes_Data[i].FinalPremium = $scope.Quotes_Data[i].DiscountedFinalPremium1;
                }
                else if ($scope.Quotes_Data[i].DiscountedFinalPremium2 != 0) {
                    $scope.Quotes_Data[i].FinalPremium = $scope.Quotes_Data[i].DiscountedFinalPremium2;
                }
                else if ($scope.Quotes_Data[i].DiscountedFinalPremium3 != 0) {
                    $scope.Quotes_Data[i].FinalPremium = $scope.Quotes_Data[i].DiscountedFinalPremium3;
                }
                $scope.Quotes_Data[i].Premium1 = true;
                $scope.Quotes_Data[i].Premium2 = false;
                $scope.Quotes_Data[i].Premium3 = false;
                if ($scope.Quotes_Data[i].DiscountPercentforPolicyTerm3 != 0 && $scope.Quotes_Data[i].FinalPremium3 != 0) {
                    $scope.Quotes_Data[i].discountmsg = "Tap to get " + $scope.Quotes_Data[i].DiscountPercentforPolicyTerm3 + "% off";
                }
                else if ($scope.Quotes_Data[i].DiscountPercentforPolicyTerm2 != 0 && $scope.Quotes_Data[i].FinalPremium2 != 0) {
                    $scope.Quotes_Data[i].discountmsg = "Tap to get " + $scope.Quotes_Data[i].DiscountPercentforPolicyTerm2 + "% off";
                }
                else {
                    $scope.Quotes_Data[i].discountmsg = "";
                }
            }
        }
        function policyTermYearFn2() {
            if ($scope.HealthRefineChips.length > 0) {
                $scope.Quotes_Data = $filter('filter')($scope.Quotes_Data2ndyr, function (d) { return d.DiscountedFinalPremium2 > 0 && d.FinalPremium2 > 0 });
            }
            else {
                $scope.Quotes_Data = $filter('filter')($scope.Quotes_Data_Plan, function (d) { return d.DiscountedFinalPremium2 > 0 && d.FinalPremium2 > 0 });
            }
            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                $scope.Quotes_Data[i].FinalPremium = $scope.Quotes_Data[i].DiscountedFinalPremium2;
                if ($scope.Quotes_Data[i].DiscountPercentforPolicyTerm2 != 0 && $scope.Quotes_Data[i].FinalPremium2 != 0) {
                    $scope.Quotes_Data[i].discountmsg = $scope.Quotes_Data[i].DiscountPercentforPolicyTerm2 + "% discount " + " applied ";
                }
                $scope.Quotes_Data[i].Premium1 = false;
                $scope.Quotes_Data[i].Premium3 = false;
                $scope.Quotes_Data[i].Premium2 = true;
            };
        }
        function policyTermYearFn3() {
            if ($scope.HealthRefineChips.length > 0) {
                $scope.Quotes_Data = $filter('filter')($scope.Quotes_Data3rdyr, function (d) { return d.DiscountedFinalPremium3 > 0 && d.FinalPremium3 > 0 });
            }
            else {
                $scope.Quotes_Data = $filter('filter')($scope.Quotes_Data_Plan, function (d) { return d.DiscountedFinalPremium3 > 0 && d.FinalPremium3 > 0 });
            }
            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                $scope.Quotes_Data[i].FinalPremium = $scope.Quotes_Data[i].DiscountedFinalPremium3;
                if ($scope.Quotes_Data[i].DiscountPercentforPolicyTerm3 != 0 && $scope.Quotes_Data[i].FinalPremium3 != 0) {
                    $scope.Quotes_Data[i].discountmsg = $scope.Quotes_Data[i].DiscountPercentforPolicyTerm3 + "% discount " + " applied ";
                }
                $scope.Quotes_Data[i].Premium1 = false;
                $scope.Quotes_Data[i].Premium3 = true;
                $scope.Quotes_Data[i].Premium2 = false;
            }
        }
        function HealthleftpanelDissablefn() {
            for (var i = 0; i < $scope.HealthSufferrData.length; i++) {
                if ($scope.HealthSufferrData[i].tooltip1 == undefined) {
                    $scope.HealthSufferrData[i].tooltip1 = angular.copy($scope.HealthSufferrData[i].tooltip);
                }
                if ($scope.HealthSufferrData[i].text != "Others") {
                    $scope.HealthSufferrData[i].IsDisabled = true;
                    $scope.HealthSufferrData[i].tooltip = "This option is not available with already selected filters";
                }
            }
            for (var i = 0; i < $scope.HealthFeatureData.length; i++) {
                if ($scope.HealthFeatureData[i].tooltip1 == undefined) {
                    $scope.HealthFeatureData[i].tooltip1 = angular.copy($scope.HealthFeatureData[i].tooltip);
                }
                $scope.HealthFeatureData[i].IsDisabled = true;
                $scope.HealthFeatureData[i].tooltip = "This option is not available with already selected filters";
            }
            $scope.Quotes_Data.forEach(function (obj) {
                for (var i = 0; i < $scope.HealthSufferrData.length; i++) {
                    if ($scope.HealthSufferrData[i].text != "Others") {
                        if (obj[$scope.HealthSufferrData[i].text] == "True" && $scope.HealthSufferrData[i].IsDisabled != false) {
                            $scope.HealthSufferrData[i].IsDisabled = false;
                            $scope.HealthSufferrData[i].tooltip = $scope.HealthSufferrData[i].tooltip1;
                        }
                    }
                }
                for (var i = 0; i < $scope.HealthFeatureData.length; i++) {
                    if ($scope.HealthFeatureData[i].text == "Maternity Benefits") {
                        if (obj.MaternityBenefit > 0 && $scope.HealthFeatureData[i].IsDisabled != false && ($scope.quotesrequest.Requests[0].NumberOfAdults > 1 || $scope.quotesrequest.Requests[0].Gender == 'F')) {
                            $scope.HealthFeatureData[i].IsDisabled = false;
                            $scope.HealthFeatureData[i].tooltip = $scope.HealthFeatureData[i].tooltip1;
                        }
                    }
                    if ($scope.HealthFeatureData[i].text == "Actual Room Rent") {
                        if ((obj.RoomRentCalculation == "Actual" || obj.RoomRentCalculation == "No Sub-Limit") && $scope.HealthFeatureData[i].IsDisabled != false) {
                            $scope.HealthFeatureData[i].IsDisabled = false;
                            $scope.HealthFeatureData[i].tooltip = $scope.HealthFeatureData[i].tooltip1;
                        }
                    }
                    if ($scope.HealthFeatureData[i].text == "Single Room & Above") {
                        if ((obj.IsSingleRoomRent == true) && $scope.HealthFeatureData[i].IsDisabled != false) {
                            $scope.HealthFeatureData[i].IsDisabled = false;
                            $scope.HealthFeatureData[i].tooltip = $scope.HealthFeatureData[i].tooltip1;
                        }
                    }
                    if ($scope.HealthFeatureData[i].text == "OPD") {
                        if ((obj.IsOPD == "1") && $scope.HealthFeatureData[i].IsDisabled != false) {
                            $scope.HealthFeatureData[i].IsDisabled = false;
                            $scope.HealthFeatureData[i].tooltip = $scope.HealthFeatureData[i].tooltip1;
                        }
                    }
                    if ($scope.HealthFeatureData[i].text == "No Co-Pay") {
                        if ((obj.CoPay == false) && $scope.HealthFeatureData[i].IsDisabled != false) {
                            $scope.HealthFeatureData[i].IsDisabled = false;
                            $scope.HealthFeatureData[i].tooltip = $scope.HealthFeatureData[i].tooltip1;
                        }
                    }
                    if ($scope.HealthFeatureData[i].text == "Critical Illness") {
                        if ((obj.Criticalillness > 0) && $scope.HealthFeatureData[i].IsDisabled != false) {
                            $scope.HealthFeatureData[i].IsDisabled = false;
                            $scope.HealthFeatureData[i].tooltip = $scope.HealthFeatureData[i].tooltip1;
                        }
                    }
                }

            });
        }
        function healthsmartfn(rider, item, flag) {
            if (flag == true) {
                if (item.Riderlistforbuy == undefined || item.Riderlistforbuy == null) {
                    item.Riderlistforbuy = [];
                }
                item.Riderlistforbuy.push(rider);
                item.FinalPremium1 = Math.round(item.FinalPremium1 - (item.TempPremium1 * rider.Discount / 100));
                item.FinalPremium2 = Math.round(item.FinalPremium2 - (item.TempPremium2 * rider.Discount / 100));
                item.DiscountedFinalPremium2 = Math.round(item.DiscountedFinalPremium2 - (item.TempDiscountedPremium2 * rider.Discount / 100));
                item.FinalPremium3 = Math.round(item.FinalPremium3 - (item.TempFinalPremium3 * rider.Discount / 100));
                item.DiscountedFinalPremium3 = Math.round(item.DiscountedFinalPremium3 - (item.TempDiscountedPremium3 * rider.Discount / 100));

            }
            else {
                if (item.Riderlistforbuy.length > 0) {
                    var idx = item.Riderlistforbuy.indexOf(($filter('filter')(item.Riderlistforbuy, function (d) { return d.RiderId == rider.RiderId })[0]));
                    if (idx > -1) {
                        item.Riderlistforbuy.splice(idx, 1);
                    }
                }
                item.FinalPremium1 = Math.round(item.FinalPremium1 + (item.TempPremium1 * rider.Discount / 100));
                item.FinalPremium2 = Math.round(item.FinalPremium2 + (item.TempPremium2 * rider.Discount / 100));
                item.DiscountedFinalPremium2 = Math.round(item.DiscountedFinalPremium2 + (item.TempDiscountedPremium2 * rider.Discount / 100));
                item.FinalPremium3 = Math.round(item.FinalPremium3 + (item.TempFinalPremium3 * rider.Discount / 100));
                item.DiscountedFinalPremium3 = Math.round(item.DiscountedFinalPremium3 + (item.TempDiscountedPremium3 * rider.Discount / 100));

            }
        }

        $scope.HealthAddonSelection = function (rider, item, flag) {
            var smartFlag = 0;
            //new code for cigna wop rider calculation//
            var waiverpremium1 = 0
            var waiverpremium2 = 0
            var waiverpremium3 = 0
            if (rider.InsurerId == 54) {
                var RiderPremium1 = 0;
                var RiderPremium2 = 0;
                var RiderPremium3 = 0;
                if (rider.RiderId == 7 && flag == true) {
                    RiderPremium1 = rider.RiderPremium;
                    RiderPremium2 = rider.RiderPremium2;
                    RiderPremium3 = rider.RiderPremium3;
                }



            }
            //end//
            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                //new code for cigna wop rider calculation//
                if (rider.InsurerId == 54 && rider.InsurerId == $scope.Quotes_Data[i].InsurerId && item.PlanId == $scope.Quotes_Data[i].PlanId && rider.RiderId == 7) {
                    for (var j = 0; j < $scope.Quotes_Data[i].AvailableRiders.length; j++) {
                        if ($scope.Quotes_Data[i].AvailableRiders[j].RiderId == 6) {
                            $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium = angular.copy(Math.round((RiderPremium1 + item.PremiumForPolicyYear1) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / 100));
                            $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium2 = angular.copy(Math.round((RiderPremium2 + item.PremiumForPolicyYear1 + item.PremiumForPolicyYear2) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / 100));
                            $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium3 = angular.copy(Math.round((RiderPremium3 + item.PremiumForPolicyYear1 + item.PremiumForPolicyYear2 + item.PremiumForPolicyYear3) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / 100));
                        }
                    }
                    for (var j = 0; j < $scope.Quotes_Data[i].Riderlistforbuy.length; j++) {
                        if ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderId == 6) {
                            $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium = angular.copy(Math.round((RiderPremium1 + item.TempPremium1 - item.ServiceTax) * $scope.Quotes_Data[i].Riderlistforbuy[j].Rates / 100));
                            $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 = angular.copy(Math.round((RiderPremium2 + item.TempPremium1 + item.TempPremium2 - item.TotalTax2) * $scope.Quotes_Data[i].Riderlistforbuy[j].Rates / 100));
                            $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium3 = angular.copy(Math.round((RiderPremium3 + item.TempPremium1 + item.TempPremium2 + item.TempFinalPremium3 - item.TotalTax3) * $scope.Quotes_Data[i].Riderlistforbuy[j].Rates / 100));
                        }
                    }

                }
                else if (rider.InsurerId == 54 && rider.InsurerId == $scope.Quotes_Data[i].InsurerId && item.PlanId == $scope.Quotes_Data[i].PlanId && rider.RiderId == 8 && flag) {

                    for (var j = 0; j < $scope.Quotes_Data[i].AvailableRiders.length; j++) {
                        if ($scope.Quotes_Data[i].AvailableRiders[j].RiderId == 7) {
                            $scope.Quotes_Data[i].AvailableRiders[j].cbRiderPremium1 = $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium;
                            $scope.Quotes_Data[i].AvailableRiders[j].cbRiderPremium2 = $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium2;
                            $scope.Quotes_Data[i].AvailableRiders[j].cbRiderPremium3 = $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium3;
                            //$scope.Quotes_Data[i].AvailableRiders[j].RiderPremium = angular.copy(Math.round((RiderPremium1 + item.PremiumForPolicyYear1) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / 100));
                            //$scope.Quotes_Data[i].AvailableRiders[j].RiderPremium2 = angular.copy(Math.round((RiderPremium2 + item.PremiumForPolicyYear1 + item.PremiumForPolicyYear2) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / 100));
                            //$scope.Quotes_Data[i].AvailableRiders[j].RiderPremium3 = angular.copy(Math.round((RiderPremium3 + item.PremiumForPolicyYear1 + item.PremiumForPolicyYear2 + item.PremiumForPolicyYear3) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / 100));

                            $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium = angular.copy(Math.round(((item.PremiumForPolicyYear1 + rider.RiderPremium) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / $scope.Quotes_Data[i].AvailableRiders[j].MFactor), 0));
                            $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium2 = angular.copy(Math.round(((item.PremiumForPolicyYear1 + item.PremiumForPolicyYear2 + rider.RiderPremium2) * $scope.Quotes_Data[i].AvailableRiders[j].Rates2 / $scope.Quotes_Data[i].AvailableRiders[j].MFactor), 0));
                            $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium3 = angular.copy(Math.round(((item.PremiumForPolicyYear1 + item.PremiumForPolicyYear2 + item.PremiumForPolicyYear3 + rider.RiderPremium3) * $scope.Quotes_Data[i].AvailableRiders[j].Rates2 / $scope.Quotes_Data[i].AvailableRiders[j].MFactor), 0));
                        }
                    }
                    for (var j = 0; j < $scope.Quotes_Data[i].Riderlistforbuy.length; j++) {
                        if ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderId == 7) {
                            $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium = angular.copy(Math.round(((item.PremiumForPolicyYear1 + rider.RiderPremium) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / $scope.Quotes_Data[i].AvailableRiders[j].MFactor), 0));
                            $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 = angular.copy(Math.round(((item.PremiumForPolicyYear1 + item.PremiumForPolicyYear2 + rider.RiderPremium2) * $scope.Quotes_Data[i].AvailableRiders[j].Rates2 / $scope.Quotes_Data[i].AvailableRiders[j].MFactor), 0));
                            $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium3 = angular.copy(Math.round(((item.PremiumForPolicyYear1 + item.PremiumForPolicyYear2 + item.PremiumForPolicyYear3 + rider.RiderPremium3) * $scope.Quotes_Data[i].AvailableRiders[j].Rates2 / $scope.Quotes_Data[i].AvailableRiders[j].MFactor), 0));
                        }
                    }

                }
                else if (rider.InsurerId == 54 && rider.InsurerId == $scope.Quotes_Data[i].InsurerId && item.PlanId == $scope.Quotes_Data[i].PlanId && rider.RiderId == 8 && flag == false) {
                    for (var j = 0; j < $scope.Quotes_Data[i].AvailableRiders.length; j++) {
                        if ($scope.Quotes_Data[i].AvailableRiders[j].RiderId == 7) {
                            //$scope.Quotes_Data[i].AvailableRiders[j].RiderPremium = angular.copy(Math.round((RiderPremium1 + item.PremiumForPolicyYear1) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / 100));
                            //$scope.Quotes_Data[i].AvailableRiders[j].RiderPremium2 = angular.copy(Math.round((RiderPremium2 + item.PremiumForPolicyYear1 + item.PremiumForPolicyYear2) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / 100));
                            //$scope.Quotes_Data[i].AvailableRiders[j].RiderPremium3 = angular.copy(Math.round((RiderPremium3 + item.PremiumForPolicyYear1 + item.PremiumForPolicyYear2 + item.PremiumForPolicyYear3) * $scope.Quotes_Data[i].AvailableRiders[j].Rates / 100));

                            $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium = $scope.Quotes_Data[i].AvailableRiders[j].cbRiderPremium1;
                            $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium2 = $scope.Quotes_Data[i].AvailableRiders[j].cbRiderPremium2;
                            $scope.Quotes_Data[i].AvailableRiders[j].RiderPremium3 = $scope.Quotes_Data[i].AvailableRiders[j].cbRiderPremium3;
                        }
                    }


                }
                //end//
                if (item.PlanId == $scope.Quotes_Data[i].PlanId) {
                    var selectedID = i;
                    if (flag == true) {

                        $scope.Quotes_Data[i].Riderlistforbuy.push(rider);
                        $scope.healtheditmdrider[item.PlanId + ',' + rider.RiderId] = true;

                        if ((rider.RiderId == 1) && rider.InsurerId == $scope.Quotes_Data[i].InsurerId) {
                            var reductionRider = $filter('filter')($scope.Quotes_Data[i].AvailableRiders, function (d) { return d.InsurerId == 46 && d.PlanId == rider.PlanId && d.RiderId == 13 })[0];
                            var reducDesable = $filter('filter')($scope.Quotes_Data[i].AvailableRiders, function (d) { return d.InsurerId == 46 && d.PlanId == rider.PlanId && d.RiderId == 15 })[0];

                            if (rider.RiderId == 1 && reductionRider) {
                                reductionRider.RiderPremium = Math.round((($scope.Quotes_Data[i].BasePremium + rider.RiderPremium) * reductionRider.Rates / reductionRider.MFactor));
                                reductionRider.RiderPremium2 = Math.round((($scope.Quotes_Data[i].BasePremium + $scope.Quotes_Data[i].BasePremium + rider.RiderPremium2) * reductionRider.Rates / reductionRider.MFactor));
                                reductionRider.RiderPremium3 = Math.round((($scope.Quotes_Data[i].BasePremium + $scope.Quotes_Data[i].BasePremium + $scope.Quotes_Data[i].BasePremium + rider.RiderPremium3) * reductionRider.Rates / reductionRider.MFactor));
                                reducDesable.IsDisabled = false;
                                $scope.mdrider[reducDesable.PlanId + ',' + reducDesable.RiderId] = false;
                            }

                        }
                    }
                    else {
                        if ((rider.RiderId == 1) && rider.InsurerId == $scope.Quotes_Data[i].InsurerId) {
                            var reductionRider = $filter('filter')($scope.Quotes_Data[i].AvailableRiders, function (d) { return d.InsurerId == 46 && d.PlanId == rider.PlanId && d.RiderId == 13 })[0];
                            var reducDesable = $filter('filter')($scope.Quotes_Data[i].AvailableRiders, function (d) { return d.InsurerId == 46 && d.PlanId == rider.PlanId && d.RiderId == 15 })[0];

                            if (rider.RiderId == 1 && reductionRider) {
                                reductionRider.RiderPremium = Math.round((($scope.Quotes_Data[i].BasePremium) * reductionRider.Rates / reductionRider.MFactor));
                                reductionRider.RiderPremium2 = Math.round((($scope.Quotes_Data[i].BasePremium + $scope.Quotes_Data[i].BasePremium) * reductionRider.Rates / reductionRider.MFactor));
                                reductionRider.RiderPremium3 = Math.round((($scope.Quotes_Data[i].BasePremium + $scope.Quotes_Data[i].BasePremium + $scope.Quotes_Data[i].BasePremium) * reductionRider.Rates / reductionRider.MFactor));
                                reducDesable.IsDisabled = true;
                                if ($scope.mdrider[reducDesable.PlanId + ',' + reducDesable.RiderId]) {
                                    $scope.mdrider[reducDesable.PlanId + ',' + reducDesable.RiderId] = false;
                                    var idx = $scope.Quotes_Data[i].Riderlistforbuy.indexOf(reducDesable);
                                    if (idx > -1) {
                                        $scope.Quotes_Data[i].Riderlistforbuy.splice(idx, 1);
                                    }
                                }
                            }

                        }


                        $scope.healtheditmdrider[item.PlanId + ',' + rider.RiderId] = false;
                        for (var j = 0; j < $scope.Quotes_Data[i].Riderlistforbuy.length; j++) {
                            if ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderId == rider.RiderId) {
                                $scope.Quotes_Data[i].Riderlistforbuy.splice(j, 1);
                            }

                        }
                    }
                    if ($rootScope.healthdata.Requests[0].IsCovid) {
                        $scope.Quotes_Data[i].FinalPremium = angular.copy($scope.Quotes_Data[i].TempPremium1);
                    }
                    else {
                        $scope.Quotes_Data[i].FinalPremium1 = angular.copy($scope.Quotes_Data[i].TempPremium1);
                    }
                    $scope.Quotes_Data[i].FinalPremium2 = angular.copy($scope.Quotes_Data[i].TempPremium2);
                    $scope.Quotes_Data[i].DiscountedFinalPremium2 = angular.copy($scope.Quotes_Data[i].TempDiscountedPremium2);
                    $scope.Quotes_Data[i].FinalPremium3 = angular.copy($scope.Quotes_Data[i].TempFinalPremium3);
                    $scope.Quotes_Data[i].DiscountedFinalPremium3 = angular.copy($scope.Quotes_Data[i].TempDiscountedPremium3);

                    for (var j = 0; j < $scope.Quotes_Data[i].Riderlistforbuy.length; j++) {
                        if ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium == 0 && $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 == 0 && $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium3 == 0) {
                            smartFlag = 1;
                            $scope.Quotes_Data[i].SmartDiscount1 = 0;
                            $scope.Quotes_Data[i].SmartDiscount2 = 0;
                            $scope.Quotes_Data[i].SmartDiscount3 = 0;
                            var smartDis = $scope.Quotes_Data[i].Riderlistforbuy[j].Discount;

                        }
                        else {

                            var premium1 = ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium + ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium * ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderServiceTax - 1)));
                            if ($scope.Quotes_Data[i].DiscountType == 2) {
                                var premium2 = ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 + ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 * ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderServiceTax - 1)));
                            }
                            else {
                                premium2 = (($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 - ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 * item.DiscountPercentforPolicyTerm2 / 100)) + (($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 - ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 * item.DiscountPercentforPolicyTerm2 / 100)) * ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderServiceTax - 1)));
                            }

                            var premium3 = ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium3 + ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium3 * ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderServiceTax - 1)));
                            if (item.DiscountPercentforPolicyTerm2 > 0 && $scope.Quotes_Data[i].DiscountType != 2) {
                                premium2 = (($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 - ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 * item.DiscountPercentforPolicyTerm2 / 100)) + (($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 - ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2 * item.DiscountPercentforPolicyTerm2 / 100)) * ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderServiceTax - 1)));
                            }
                            if (item.DiscountPercentforPolicyTerm3 > 0) {
                                premium3 = (($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium3 - ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium3 * item.DiscountPercentforPolicyTerm3 / 100)) + (($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium3 - ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium3 * item.DiscountPercentforPolicyTerm3 / 100)) * ($scope.Quotes_Data[i].Riderlistforbuy[j].RiderServiceTax - 1)));
                            }
                            $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremiumWithGST = angular.copy(Math.round(premium1));
                            $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium2WithGST = angular.copy(Math.round(premium2));
                            $scope.Quotes_Data[i].Riderlistforbuy[j].RiderPremium3WithGST = angular.copy(Math.round(premium3));
                            if ($scope.Quotes_Data[i].Riderlistforbuy[j].NoDiscount != true) {
                                if ($rootScope.healthdata.Requests[0].IsCovid) {
                                    $scope.Quotes_Data[i].FinalPremium = Math.round($scope.Quotes_Data[i].FinalPremium + premium1);
                                }
                                else {
                                    $scope.Quotes_Data[i].FinalPremium1 = Math.round($scope.Quotes_Data[i].FinalPremium1 + premium1);
                                    $scope.Quotes_Data[i].FinalPremium2 = Math.round($scope.Quotes_Data[i].FinalPremium2 + premium2);
                                    $scope.Quotes_Data[i].DiscountedFinalPremium2 = Math.round($scope.Quotes_Data[i].DiscountedFinalPremium2 + premium2);
                                    if ($scope.Quotes_Data[i].FinalPremium3 && $scope.Quotes_Data[i].DiscountedFinalPremium3) {
                                        $scope.Quotes_Data[i].FinalPremium3 = Math.round($scope.Quotes_Data[i].FinalPremium3 + premium3);
                                        $scope.Quotes_Data[i].DiscountedFinalPremium3 = Math.round($scope.Quotes_Data[i].DiscountedFinalPremium3 + premium3);
                                    }
                                }
                            }
                            else if ($scope.Quotes_Data[i].Riderlistforbuy[j].NoDiscount == true) {
                                $scope.tempriderpremium = [];
                                var selectedriderId = j;
                                $scope.tempriderpremium.premium1 = angular.copy(premium1);
                                $scope.tempriderpremium.premium2 = angular.copy(premium2);
                                $scope.tempriderpremium.premium3 = angular.copy(premium3);
                            }
                        }

                    }
                }

                if ($scope.Quotes_Data[i].PlanId == 531 && rider.InsurerId == 46) {
                    if (rider.RiderId == 1 && $scope.healtheditmdrider[item.PlanId + ',' + rider.RiderId]) {
                        $scope.Quotes_Data[i].PlanName = "Care with NCB Plan";
                    }
                    else if (rider.RiderId == 1 && !$scope.healtheditmdrider[item.PlanId + ',' + rider.RiderId]) {
                        $scope.Quotes_Data[i].PlanName = "Care";
                    }
                }
            }
            if (smartFlag == 1) {
                var rd1 = 0, rd2 = 0, rd3 = 0;
                for (var i = 0; i < $scope.Quotes_Data[selectedID].Riderlistforbuy.length; i++) {
                    var rd = $scope.Quotes_Data[selectedID].Riderlistforbuy[i];
                    if ((rd.RiderId == 11 || rd.RiderId == 12) && rider.InsurerId == 46) {
                        rd1 = rd1 + rd.RiderPremiumWithGST;
                        rd2 = rd2 + rd.RiderPremium2WithGST;
                        rd3 = rd3 + rd.RiderPremium3WithGST;
                    }
                }

                if ($rootScope.healthdata.Requests[0].IsCovid) {
                    $scope.Quotes_Data[selectedID].FinalPremium = Math.round($scope.Quotes_Data[selectedID].FinalPremium - ($scope.Quotes_Data[selectedID].FinalPremium * (smartDis / 100)));
                }
                else {
                    $scope.Quotes_Data[selectedID].FinalPremium1 = Math.round($scope.Quotes_Data[selectedID].FinalPremium1 - (($scope.Quotes_Data[selectedID].FinalPremium1 - rd1) * (smartDis / 100)));
                }
                $scope.Quotes_Data[selectedID].FinalPremium2 = Math.round($scope.Quotes_Data[selectedID].FinalPremium2 - (($scope.Quotes_Data[selectedID].FinalPremium2 - rd2) * (smartDis / 100)));
                $scope.Quotes_Data[selectedID].DiscountedFinalPremium2 = Math.round($scope.Quotes_Data[selectedID].DiscountedFinalPremium2 - (($scope.Quotes_Data[selectedID].DiscountedFinalPremium2 - rd2) * (smartDis / 100)));
                $scope.Quotes_Data[selectedID].FinalPremium3 = Math.round($scope.Quotes_Data[selectedID].FinalPremium3 - (($scope.Quotes_Data[selectedID].FinalPremium3 - rd3) * (smartDis / 100)));
                $scope.Quotes_Data[selectedID].DiscountedFinalPremium3 = Math.round($scope.Quotes_Data[selectedID].DiscountedFinalPremium3 - (($scope.Quotes_Data[selectedID].DiscountedFinalPremium3 - rd3) * (smartDis / 100)));

            }
            if (selectedriderId != undefined) {
                if ($scope.Quotes_Data[selectedID].Riderlistforbuy[selectedriderId].NoDiscount == true) {

                    if ($rootScope.healthdata.Requests[0].IsCovid) {
                        $scope.Quotes_Data[selectedID].FinalPremium = Math.round($scope.Quotes_Data[selectedID].FinalPremium + $scope.tempriderpremium.premium1);;
                    }
                    else {
                        $scope.Quotes_Data[selectedID].FinalPremium1 = Math.round($scope.Quotes_Data[selectedID].FinalPremium1 + $scope.tempriderpremium.premium1);;
                    }
                    $scope.Quotes_Data[selectedID].FinalPremium2 = Math.round($scope.Quotes_Data[selectedID].FinalPremium2 + $scope.tempriderpremium.premium2);;
                    $scope.Quotes_Data[selectedID].DiscountedFinalPremium2 = Math.round($scope.Quotes_Data[selectedID].DiscountedFinalPremium2 + $scope.tempriderpremium.premium2);
                    $scope.Quotes_Data[selectedID].FinalPremium3 = Math.round($scope.Quotes_Data[selectedID].FinalPremium3 + $scope.tempriderpremium.premium3);;
                    $scope.Quotes_Data[selectedID].DiscountedFinalPremium3 = Math.round($scope.Quotes_Data[selectedID].DiscountedFinalPremium3 + $scope.tempriderpremium.premium3);
                }
            }
        }


        function quotefilteronplantype(plantype1, flag) {
            //$scope.cardLoader = true;
            $window.scrollTo(0, 0);
            $scope.payingtermdissable = false;
            plantype = plantype1;
            if (plantype == null || plantype == undefined) {
                for (var i = 0; i < $scope.planType.length; i++) {
                    if ($scope.planType[i].Filter == "true") {
                        plantype = $scope.planType[i];
                    }
                }
            }
            if (flag != 'getquote') {
                $scope.plantypemodel = plantype;
            }
            if (plantype.Id == 22) {
                $scope.fliterareaclass = "filterarea1";
                $scope.featureareast = "featureareastyle1";
                if ($scope.incomeMonthlypayout != null && $scope.incomeMonthlypayout != undefined) {
                    if ($scope.incomeMonthlypayout.incometext == undefined) {
                        $scope.selectedIncomeMonthly = $scope.incomeMonthlypayout;
                    }
                    else {
                        $scope.selectedIncomeMonthly = $scope.incomeMonthlypayout.incometext;
                    }
                }
                else {
                    $scope.incomeMonthlypayout = [];
                    $scope.incomeMonthlypayout.incometext = $scope.selectedIncomeMonthly;
                    $scope.incomeMonthlypayout.incomevalue = $scope.quotesrequest.Requests[0].MonthlyIncome;
                }
                $scope.IncomereplacementMonthlyPayout = true;

                $scope.commonclass = "CoverCss1";
                $scope.plantypemodel = 1;

            }
            else {
                $scope.fliterareaclass = "filterarea";
                $scope.featureareast = "featureareastyle";
                $scope.IncomereplacementMonthlyPayout = false;
                $scope.commonclass = "CoverCss";
            }
            $scope.Showtroptooltip = false;
            $scope.ShowPureLifetooltip = false;
            $scope.ShowholeLifetooltip = false;
            if (plantype.Id == 25) {
                $scope.ShowPureLifetooltip = true;
                $scope.plantypemodel = 0;
            }
            else if (plantype.Id == 24) {
                $scope.ShowholeLifetooltip = true;
                $scope.plantypemodel = 3;
            }
            else if (plantype.Id == 23) {
                $scope.Showtroptooltip = true;
                $scope.plantypemodel = 2;
            }



        }
        $scope.HealthAddonSelectionEdit = function (rider, item) {
            $scope.healthaddonrider = rider;
            $scope.healthItem1 = angular.copy(item);
            $scope.healthItem = item;
            HealthFactory.setslider(rider, item, $scope);
            $scope.HealthAddonPopupSrc = '../HomePage/Template/HealthAddonPopup.html';
            $scope.healthaddonslider = true;
            $rootScope.healthaddonslider = true;
            $rootScope.scrollhide = 'scollClass';
        }
        $scope.HealthAddonSelectionCalculation = function () {
            if ($scope.HealthAddonSA != undefined && $scope.HealthAddonSA != null) {
                $scope.healthaddonrider.SelectedSumAssured = $scope.HealthAddonSA.sumassuredvalue;
                $scope.healthItem.AvailableRiders.forEach(function (obj2) {
                    if (obj2.RiderId == $scope.healthaddonrider.RiderId) {
                        obj2.SelectedSumAssured = $scope.HealthAddonSA.sumassuredvalue;
                    }
                });
                $scope.showriderpremium = false;
                var apireq = FeatureService.HealthRidercalulation($scope.healthaddonrider, $scope.healthItem, $scope.quotesrequest.Requests[0]);
                apireq.then(function (data) {
                    var responseriderlist = data.data[0].AvailableRiders;
                    responseriderlist.forEach(function (obj1) {
                        if (obj1.RiderId == $scope.healthaddonrider.RiderId) {
                            $scope.healthaddonrider = obj1;
                        }
                    });
                    $scope.Quotes_Data.forEach(function (obj) {
                        if (obj.PlanId == $scope.healthItem.PlanId) {
                            obj.AvailableRiders = responseriderlist;
                            if (obj.Riderlistforbuy.length > 0) {
                                var idx = obj.Riderlistforbuy.indexOf(($filter('filter')(obj.Riderlistforbuy, function (d) { return d.RiderId == $scope.healthaddonrider.RiderId })[0]));
                                if (idx > -1) {
                                    obj.Riderlistforbuy.splice(idx, 1);
                                }
                            }
                            $scope.HealthAddonSelection($scope.healthaddonrider, obj, true);
                        }
                    });
                    $scope.showriderpremium = true;
                });
            }
        }
        $scope.TermleftpanelDissablefn = function () {
            if ($scope.sumassured == undefined || $scope.sumassured == null) {
                $scope.sumassured = [];
                $scope.sumassured.summassuredvalue = $scope.quotesrequest.Requests[0].SumAssured;
                for (i = 0; i < $scope.sumassuredlist.length; i++) {
                    if ($scope.sumassured.summassuredvalue == $scope.sumassuredlist[i].summassuredvalue) {
                        $scope.sumassured.sumassuredtext = $scope.sumassuredlist[i].sumassuredtext;
                    }
                }
            }
            for (var i = 0; i < $scope.termrider.length; i++) {
                if ($scope.termrider[i].tooltip1 == undefined) {
                    $scope.termrider[i].tooltip1 = angular.copy($scope.termrider[i].RiderDescription);
                }
                $scope.termrider[i].IsDisabled = true;
                $scope.termrider[i].RiderDescription = "This option is not available with already selected filters";
                //if ($scope.termrider[i].RiderCode == 19) {
                //    $scope.increasingTooltip = $scope.termrider[i].tooltip1;
                //}
            }
            if ($scope.Quotes_Data != null && $scope.Quotes_Data.length > 0) {
                $scope.Quotes_Data.forEach(function (obj) {
                    for (var i = 0; i < $scope.termrider.length; i++) {
                        var array = ($scope.termrider[i].RiderName).split(' ');
                        var text = '';
                        for (var q = 0; q < array.length; q++) {
                            text = text + array[q];
                        }
                        if ((obj[text.trim()] == 1 || obj[text.trim()] == 2 || obj[text.trim()] == 3) && $scope.termrider[i].IsDisabled != false) {
                            $scope.termrider[i].IsDisabled = false;
                            $scope.termrider[i].RiderDescription = $scope.termrider[i].tooltip1;
                        }
                    }
                });
            }
        }
        $scope.closeHealthAddonEdit = function (id) {
            if (id != 'Apply') {
                for (var a = 0; a < $scope.Quotes_Data.length; a++) {
                    if ($scope.Quotes_Data[a].PlanId == $scope.healthItem1.PlanId) {
                        $scope.Quotes_Data[a] = angular.copy($scope.healthItem1);
                    }
                }
            }
            setTimeout(() => {
                $rootScope.scrollhide = "";
            }, 500)
            $rootScope.scrollhide = "";
            $rootScope.healthaddonslider = false;
        }

        function Termlimitedoption() {
            $scope.LimitedPayTerm = [];
            var payterm = 99;
            if ($scope.quotesrequest.Requests[0].PolicyTerm == 0) {
                $scope.LimitedPayingTerm = 0;
                $scope.LimitedPayTerm.push({ text: 'Maximum', value: 0 });
                $scope.quotesrequest.Requests[0].PremiumPayingTerm = 0;
                $scope.quotesrequest.Requests[0].IsPremiumPayingTerm = false;
            }
            else {
                payterm = $scope.quotesrequest.Requests[0].PolicyTerm + $scope.AgeTerm;
                $scope.LimitedPayingTerm = payterm;
                $scope.quotesrequest.Requests[0].PremiumPayingTerm = $scope.quotesrequest.Requests[0].PolicyTerm;
                $scope.quotesrequest.Requests[0].IsPremiumPayingTerm = false;
            }
            for (var i = 5 + $scope.AgeTerm; i <= payterm; i++) {
                $scope.LimitedPayTerm.push({ text: i + ' Year', value: i });
            }
        }
        $scope.hhideedit = function () {
            if ($scope.product == "Term") {
                document.getElementById("tdobid").style.display = "none";
                document.getElementById("tgenderid").style.display = "none";
                document.getElementById("tincomeid").style.display = "none";
                document.getElementById("tsmokeid").style.display = "none";
                document.getElementById("tcityid").style.display = "none";
            }
            else if ($scope.product == "Health") {
                document.getElementById("hmemedit").style.display = "none";
                document.getElementById("hgendit").style.display = "none";
                document.getElementById("hageditid").style.display = "none";
                document.getElementById("hcityeditid").style.display = "none";
            }
        }
        $scope.closeall = function () {

            if ($scope.product == "Term") {
                if (document.getElementById("tdobid") != undefined && document.getElementById("tgenderid") != undefined &&
                    document.getElementById("tincomeid") != undefined && document.getElementById("tsmokeid") != undefined &&
                    document.getElementById("tcityid") != undefined) {
                    document.getElementById("tdobid").style.display = "none";
                    document.getElementById("tgenderid").style.display = "none";
                    document.getElementById("tincomeid").style.display = "none";
                    document.getElementById("tsmokeid").style.display = "none";
                    document.getElementById("tcityid").style.display = "none";
                }
                else if (document.getElementById("tiriderid") != undefined) {
                    document.getElementById("tiriderid").style.display = "none";

                }
            }
            else if ($scope.product == "Health") {
                if (document.getElementById("hmemedit") != undefined && document.getElementById("hgendit") != undefined &&
                    document.getElementById("hageditid") != undefined && document.getElementById("hcityeditid") != undefined) {
                    document.getElementById("hmemedit").style.display = "none";
                    document.getElementById("hgendit").style.display = "none";
                    document.getElementById("hageditid").style.display = "none";
                    document.getElementById("hcityeditid").style.display = "none";
                }
            }

            else if ($scope.product == "Investment" || $scope.product == "Pension" || $scope.product == "Child") {
                if (document.getElementById("tiriderid") != undefined) {
                    document.getElementById("tiriderid").style.display = "none";

                }
            }
        }

        $scope.hmemberedit = function () {
            if ($scope.product == "Health") {
                if (document.getElementById("hmemedit").style.display == "block") {
                    document.getElementById("hmemedit").style.display = "none";
                }
                else {
                    document.getElementById("hmemedit").style.display = "block";

                }
                document.getElementById("hgendit").style.display = "none";
                document.getElementById("hageditid").style.display = "none";
                document.getElementById("hcityeditid").style.display = "none";
            }

            var a = $scope.gaProduct + " Member Edit";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "Member Desktop Edit" });
        }

        $scope.hgenderedit = function () {
            if ($scope.product == "Term") {
                if (document.getElementById("tgenderid").style.display == "block") {
                    document.getElementById("tgenderid").style.display = "none";
                }
                else {
                    document.getElementById("tgenderid").style.display = "block";

                }
                document.getElementById("tcityid").style.display = "none";
                document.getElementById("tincomeid").style.display = "none";
                document.getElementById("tdobid").style.display = "none";
                document.getElementById("tsmokeid").style.display = "none";

            }
            else if ($scope.product == "Health") {
                if (document.getElementById("hgendit").style.display == "block") {
                    document.getElementById("hgendit").style.display = "none";
                }
                else {
                    document.getElementById("hgendit").style.display = "block";

                }
                document.getElementById("hmemedit").style.display = "none";
                document.getElementById("hageditid").style.display = "none";
                document.getElementById("hcityeditid").style.display = "none";
            }

            var a = $scope.gaProduct + " Gender Edit";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "Gender Desktop Edit" });
        }



        $scope.hincomeedit = function () {
            if ($scope.product == "Term") {
                if (document.getElementById("tincomeid").style.display == "block") {
                    document.getElementById("tincomeid").style.display = "none";
                }
                else {
                    document.getElementById("tincomeid").style.display = "block";

                }
                document.getElementById("tcityid").style.display = "none";
                document.getElementById("tgenderid").style.display = "none";
                document.getElementById("tdobid").style.display = "none";
                document.getElementById("tsmokeid").style.display = "none";

            }

            var a = $scope.gaProduct + " Income Edit";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "Gender Desktop Edit" });
        }

        $scope.hirideredit = function () {
            if ($scope.product == "Term" || $scope.product == "Child" || $scope.product == "Pension" || $scope.product == "Investment") {
                if (document.getElementById("tiriderid").style.display == "block") {
                    document.getElementById("tiriderid").style.display = "none";
                }
                else {
                    document.getElementById("tiriderid").style.display = "block";

                }
            }
        }
        $scope.closehirideredit = function () {
            if (document.getElementById("tiriderid") != undefined) {
                document.getElementById("tiriderid").style.display = "none";
            }
        }





        $scope.hsmokeredit = function () {
            if ($scope.product == "Term") {
                if (document.getElementById("tsmokeid").style.display == "block") {
                    document.getElementById("tsmokeid").style.display = "none";
                }
                else {
                    document.getElementById("tsmokeid").style.display = "block";

                }
                document.getElementById("tcityid").style.display = "none";
                document.getElementById("tgenderid").style.display = "none";
                document.getElementById("tdobid").style.display = "none";
                document.getElementById("tincomeid").style.display = "none";

            }
            var a = $scope.gaProduct + " Smoker Edit";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "Gender Desktop Edit" });
        }

        $scope.hageedit = function () {
            if ($scope.product == "Term") {
                if (document.getElementById("tdobid").style.display == "block") {
                    document.getElementById("tdobid").style.display = "none";
                }
                else {
                    document.getElementById("tdobid").style.display = "block";

                }
                document.getElementById("tcityid").style.display = "none";
                document.getElementById("tgenderid").style.display = "none";
                document.getElementById("tincomeid").style.display = "none";
                document.getElementById("tsmokeid").style.display = "none";

            }
            else if ($scope.product == "Health") {
                if (document.getElementById("hageditid").style.display == "block") {
                    document.getElementById("hageditid").style.display = "none";
                }
                else {
                    document.getElementById("hageditid").style.display = "block";

                }
                document.getElementById("hmemedit").style.display = "none";
                document.getElementById("hgendit").style.display = "none";
                document.getElementById("hcityeditid").style.display = "none";
            }
            var a = $scope.gaProduct + " Dob Edit";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "Age Desktop Edit" });

        }

        $scope.hcityedit = function () {


            if ($scope.product == "Term") {
                if (document.getElementById("tcityid").style.display == "block") {
                    document.getElementById("tcityid").style.display = "none";
                }
                else {
                    document.getElementById("tcityid").style.display = "block";

                }
                document.getElementById("tdobid").style.display = "none";
                document.getElementById("tgenderid").style.display = "none";
                document.getElementById("tincomeid").style.display = "none";
                document.getElementById("tsmokeid").style.display = "none";

            }
            else if ($scope.product == "Health") {
                if (document.getElementById("hcityeditid").style.display == "block") {
                    document.getElementById("hcityeditid").style.display = "none";
                }
                else {
                    document.getElementById("hcityeditid").style.display = "block";

                }
                document.getElementById("hmemedit").style.display = "none";
                document.getElementById("hgendit").style.display = "none";
                document.getElementById("hageditid").style.display = "none";
            }
            var a = $scope.gaProduct + " City Edit";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "City Desktop Edit" });
        }

        $scope.editincreasingSA = function (item) {
            $rootScope.scrollhide = 'scollClass';
            $scope.tempitem = item;
            $scope.showincreasindropdown = true;
            $scope.IncreasingSAarray = [];
            $scope.IncreasingSAmodel = item.IncreasingSAValue;
            $rootScope.silderpopupforterm = true;
            for (var i = 1; i <= $scope.totalcount1; i++) {
                $scope.IncreasingSAarray.push({ "value": i, "text": i + " %" });
            }
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Increasing sumassured edit", value: "Increasing sumassured Desktop Edit" });
        }
        $scope.ApplyincreasingSA = function (id) {
            if (id != 1) {
                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    if ($scope.tempitem.PlanId == $scope.Quotes_Data[i].PlanId) {
                        $scope.Quotes_Data[i].IncreasingSAValue = $scope.IncreasingSAmodel;
                        $scope.Quotes_Data[i].IncreasingSA = $scope.IncreasingSAmodel;
                    }
                }
            }
            $rootScope.scrollhide = '';
            $rootScope.silderpopupforterm = false;
            $scope.showincreasindropdown = false;
            var a = $scope.gaProduct + " Increasing SA";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "Apply Increasing SA" });
        }
        $scope.IncreasingSAFnbycard = function (item, flag) {
            if ($scope.increasingSADisablemodel[item.PlanId] != true) {
                if ($scope.mdrider[item.PlanId + ',' + "IncreasingSumAssured"] != true) {
                    for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                        if (item.PlanId == $scope.Quotes_Data[i].PlanId) {
                            $scope.Quotes_Data[i].IncreasingSA = $scope.IncreasingSAValue;
                            $scope.Quotes_Data[i].IsIncreasingSA = true;
                        }
                    }
                }
                else {
                    for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                        if (item.PlanId == $scope.Quotes_Data[i].PlanId) {
                            $scope.Quotes_Data[i].IsIncreasingSA = false;
                        }
                    }
                }
                if (item.PlanId == 890) {
                    if ($scope.mdrider[item.PlanId + ',' + "IncreasingSumAssured"] == true) {
                        $scope.ADDisablemodel[item.PlanId + ',1'] = false;
                    }
                    else {
                        $scope.ADDisablemodel[item.PlanId + ',1'] = true;
                    }
                }
                var a = $scope.gaProduct + " Increasing SA from Card";
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "Increasing SA by Card" });
            }
        }
        $scope.IncreasingSAbyleftpanel = function (flag, planitem) {
            if (planitem == undefined)
                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    if ($scope.Quotes_Data[i].IncreasingSumAssured == 3) {
                        if ($scope.increasingSADisablemodel[$scope.Quotes_Data[i].PlanId] != true) {
                            if (flag == true) {
                                $scope.mdrider[$scope.Quotes_Data[i].PlanId + ',' + "IncreasingSumAssured"] = true;
                                $scope.Quotes_Data[i].IncreasingSA = $scope.IncreasingSAValue;
                                $scope.Quotes_Data[i].IsIncreasingSA = true;
                                if ($scope.Quotes_Data[i].PlanId == 890) {
                                    $scope.ADDisablemodel[$scope.Quotes_Data[i].PlanId + ',1'] = true;
                                }
                            }
                            else {
                                if ($scope.Quotes_Data[i].PlanId == 890) {
                                    $scope.ADDisablemodel[$scope.Quotes_Data[i].PlanId + ',1'] = false;
                                }
                                $scope.mdrider[$scope.Quotes_Data[i].PlanId + ',' + "IncreasingSumAssured"] = false;
                                $scope.Quotes_Data[i].IncreasingSA = $scope.IncreasingSAValue;
                                $scope.Quotes_Data[i].IsIncreasingSA = false;
                            }
                        }
                    }
                }
            var a = $scope.gaProduct + " Increasing SA";
            $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "Increasing SA by leftpanel" });
        }
        $scope.HideIncreasingSA = function (flag, SA, riderSA) {

            var incvalue = 1;
            if (flag > 0) {
                for (var a = 1; a <= incvalue; a++) {
                    var savalue = SA + riderSA;
                    for (var b = 1; b <= 5; b++) {
                        savalue = savalue + ((SA + riderSA) * a / 100);
                    }
                    if (savalue < flag && incvalue < 10) {
                        incvalue++;
                    }
                    else {
                        incvalue--;
                    }
                }
            }
            $scope.totalcount1 = incvalue;
            $scope.IncreasingSAarray = [];
            for (var i = 1; i <= incvalue; i++) {
                $scope.IncreasingSAarray.push({ "value": i, "text": i + " %" });
            }
        }
        $scope.MaxWopCalculation = function (item, rider, q) {
            var val1 = $filter('filter')($scope.userselectionrider, function (d) { return d.InsurerId == 20 && d.PlanId == rider.PlanId && d.RiderId != 6 });
            var WopRider = $filter('filter')(item.AvailableRiders, function (d) { return d.RiderId == 6 })[0];
            var otherridervalue = 0;
            if (val1 != undefined) {
                for (var p = 0; p < val1.length; p++) {
                    otherridervalue = otherridervalue + (val1[p].AnnualPremium / WopRider.RiderServiceTax);
                }
            }
            if (WopRider != undefined) {
                WopRider.AnnualPremium = Math.round((((otherridervalue + ((item.OriginalannualPremium) / (1 + (item.ServiceTax / 100)))) * WopRider.Rates) / WopRider.MFactor) * WopRider.RiderServiceTax);
                WopRider.RiderMonthlyPremium = Math.round(((((otherridervalue + ((item.OriginalannualPremium) / (1 + (item.ServiceTax / 100)))) * WopRider.Rates) / WopRider.MFactor) * WopRider.RiderServiceTax) * WopRider.MonthlyFactor);
                if (item.PayingMode == "monthly" || item.PayingMode == "Monthly")
                    WopRider.RiderPremium = Math.round(WopRider.RiderMonthlyPremium);
                else
                    WopRider.RiderPremium = WopRider.AnnualPremium;
                for (var s = 0; s < item.AvailableRiders.length; s++) {
                    if (item.AvailableRiders[s].RiderId == 6) {
                        item.AvailableRiders[s] = WopRider;
                    }
                }
            }
            $scope.Quotes_Data_Plan[q] = item;
        }

        $scope.hdfcCriticalCalculation = function (item, rider, q) {
            if ($scope.userselectionrider.length > 0) {
                var rideridx = $filter('filter')($scope.userselectionrider, function (d1) { return d1.RiderId == rider.RiderId && d1.PlanId == item.PlanId })[0];
                var idx = $scope.userselectionrider.indexOf(rideridx);
            }
            if (item.AvailableRiders.length > 0) {
                var riderpremium = 0;
                var riderannualpremium = 0;
                if (idx > -1) {
                    riderpremium = rider.RiderPremium;
                    riderannualpremium = rider.AnnualPremium;
                }
                item.AvailableRiders.forEach(function (AvailableRiders) {
                    if (AvailableRiders.RiderId == 3 || AvailableRiders.RiderId == 2) {
                        var riderpecentage = 1;
                        var MaxSumassured = 5000000;
                        if (AvailableRiders.RiderId == 2) {
                            riderpecentage = 0.3;
                            MaxSumassured = 20000000;
                        }
                        if (item.SumAssured < MaxSumassured) {
                            MaxSumassured = item.SumAssured;
                        }
                        var val1 = $filter('filter')($scope.userselectionrider, function (d) { return d.InsurerId == 29 && d.PlanId == rider.PlanId && d.RiderId == 1 });
                        item.AccidentalDeathPremium = 0;
                        if (val1[0] != undefined) {
                            item.AccidentalDeathPremium = val1[0].RiderPremium;
                        }
                        if (item.PayingMode == "monthly" || item.PayingMode == "Monthly") {
                            AvailableRiders.MaxSumAssured = Math.floor((((((((((item.OriginalmonthlyPremium + riderpremium) / AvailableRiders.RiderServiceTax) * riderpecentage) * AvailableRiders.MFactor) / (AvailableRiders.Rates - AvailableRiders.Rates * AvailableRiders.Discount / 100))) / AvailableRiders.MonthlyFactor) / AvailableRiders.MFactor)) * AvailableRiders.MFactor / AvailableRiders.SliderRange) * AvailableRiders.SliderRange;
                        }
                        else {
                            AvailableRiders.MaxSumAssured = Math.floor(((((((((item.OriginalannualPremium + riderannualpremium) / AvailableRiders.RiderServiceTax) * riderpecentage) * AvailableRiders.MFactor) / (AvailableRiders.Rates - AvailableRiders.Rates * AvailableRiders.Discount / 100))) / AvailableRiders.MFactor)) * AvailableRiders.MFactor / AvailableRiders.SliderRange) * AvailableRiders.SliderRange;
                        }
                        if (MaxSumassured <= AvailableRiders.MaxSumAssured) {
                            AvailableRiders.MaxSumAssured = MaxSumassured;
                        }
                        if (idx == -1) {
                            if (AvailableRiders.SelectedSumAssured > AvailableRiders.MaxSumAssured) {
                                AvailableRiders.SelectedSumAssured = parseInt(AvailableRiders.MaxSumAssured);
                                AvailableRiders.AnnualPremium = Math.round((((AvailableRiders.MaxSumAssured * AvailableRiders.Rates) / AvailableRiders.MFactor) - (((AvailableRiders.MaxSumAssured * AvailableRiders.Rates) / AvailableRiders.MFactor) * AvailableRiders.Discount / 100)) * AvailableRiders.RiderServiceTax, 0);
                                AvailableRiders.RiderMonthlyPremium = Math.round(AvailableRiders.AnnualPremium * AvailableRiders.MonthlyFactor);

                            }
                            if ($scope.mdrider[item.PlanId + ',' + AvailableRiders.RiderId] != true) {
                                AvailableRiders.AnnualPremium = Math.round((((AvailableRiders.MaxSumAssured * AvailableRiders.Rates) / AvailableRiders.MFactor) - (((AvailableRiders.MaxSumAssured * AvailableRiders.Rates) / AvailableRiders.MFactor) * AvailableRiders.Discount / 100)) * AvailableRiders.RiderServiceTax, 0);
                                AvailableRiders.RiderMonthlyPremium = Math.round(AvailableRiders.AnnualPremium * AvailableRiders.MonthlyFactor);
                            }
                        }
                        else {
                            if ($scope.mdrider[item.PlanId + ',' + AvailableRiders.RiderId] != true || AvailableRiders.SelectedSumAssured == AvailableRiders.MaxSumAssured || AvailableRiders.SelectedSumAssured > AvailableRiders.MaxSumAssured) {
                                AvailableRiders.SelectedSumAssured = AvailableRiders.MaxSumAssured;
                                AvailableRiders.AnnualPremium = Math.round((((AvailableRiders.MaxSumAssured * AvailableRiders.Rates) / AvailableRiders.MFactor) - (((AvailableRiders.MaxSumAssured * AvailableRiders.Rates) / AvailableRiders.MFactor) * AvailableRiders.Discount / 100)) * AvailableRiders.RiderServiceTax, 0);
                                AvailableRiders.RiderMonthlyPremium = Math.round(AvailableRiders.AnnualPremium * AvailableRiders.MonthlyFactor);

                            }
                        }

                        if (item.PayingMode == "monthly" || item.PayingMode == "Monthly")
                            AvailableRiders.RiderPremium = Math.round(AvailableRiders.RiderMonthlyPremium);
                        else
                            AvailableRiders.RiderPremium = AvailableRiders.AnnualPremium;
                    }
                });
            }
            $scope.Quotes_Data_Plan[q] = item;
        }
        $scope.openkotakpopup = function (item, flag, flag1) {
            $scope.KotakDiscountUrl = '../HomePage/Template/kotakDiscountpopup.html';
            $scope.submitKotabuykbtn = false;
            $scope.KotakQuotes_Data = item;
            $scope.KotakPREVpremium = item.BasicODPremium;
            $scope.Kotakflag = flag;
            $scope.Kotakflag1 = flag1;
            $scope.OpenKotakDiscountPopup = true;
            $scope.prePolicydetails = false;
            $scope.showloadtemplate = false;
        }
        $scope.closekotakdiscountpop = function () {
            $scope.OpenKotakDiscountPopup = false;
            $rootScope.scrollhide = '';
        }
        $scope.proceedkotakdiscountpop = function () {
            $scope.OpenKotakDiscountPopup = false;
            $scope.submitKotabuykbtnldr = true;
            $rootScope.scrollhide = '';
            $scope.getleadcall($scope.KotakQuotes_Data, $scope.Kotakflag, $scope.Kotakflag1);
        }
        $scope.IsCorporatefn = function (id) {
            $scope.quotesrequest.Requests[0].IsCorporate = id;
            if ($scope.Paownermodel == true && id == true) {
                $scope.Paownermodel = false;
                for (var i = 0; i < $scope.quotesrequest.Requests[0].Features.length; i++) {
                    if ($scope.quotesrequest.Requests[0].Features[i].Name == "PAOwnerDriver") {
                        $scope.quotesrequest.Requests[0].Features[i].IsSelected = $scope.Paownermodel;
                    }
                }
            }
            $scope.lazyloadcycle = 0;
            $scope.Initialzedata();
        }
        $scope.submitKotakGetquotes = function () {
            var flag = 1;
            if ($scope.Kotakuserfname == undefined || $scope.Kotakuserfname == null || $scope.Kotakuserfname == "") {
                flag = 0;
                $scope.KotakuserfnameError = true;
            }
            else {
                $scope.KotakuserfnameError = false;
            }
            if ($scope.KotakuserLname == undefined || $scope.KotakuserLname == null || $scope.KotakuserLname == "") {
                flag = 0;
                $scope.KotakuserLnameError = true;
            }
            else {
                $scope.KotakuserLnameError = false;
            }
            if ($scope.kotakuserPAN == undefined || $scope.kotakuserPAN == null || $scope.kotakuserPAN == "") {
                flag = 0;
                $scope.kotakuserPANError = true;
            }
            else {
                $scope.kotakuserPANError = false;
            }
            if ($scope.kotakusermobile == undefined || $scope.kotakusermobile == null || $scope.kotakusermobile == "") {
                flag = 0;
                $scope.kotakusermobileError = true;
            }
            else {
                $scope.kotakusermobileError = false;
            }
            if ($scope.kotakdate == undefined || $scope.kotakdate == null || $scope.kotakdate == "" || $scope.kotakmonth == undefined || $scope.kotakmonth == null || $scope.kotakmonth == "" || $scope.kotakyear == undefined || $scope.kotakyear == null || $scope.kotakyear == "") {
                flag = 0;
                $scope.kotakdateError = true;
            }
            else {
                $scope.kotakdateError = false;
            }
            if (flag == 1) {
                if ($scope.product == "Twowheeler") {
                    $scope.quotesrequest.Requests[0].PolicyTerm = 0;
                }
                $scope.submitKotakbtnldr = true;
                $scope.quotesrequest.Requests[0].QuoteCycle = 0;
                $scope.quotesrequest.Requests[0].InsurerIds = [61];
                $scope.quotesrequest.Requests[0].PanCardNumber = $scope.kotakuserPAN;
                $scope.quotesrequest.Requests[0].CustomerFirstName = $scope.Kotakuserfname;
                $scope.quotesrequest.Requests[0].CustomerLastName = $scope.KotakuserLname;
                $scope.quotesrequest.Requests[0].CustomerMiddleName = $scope.KotakuserMname;
                $scope.quotesrequest.Requests[0].CustomerDOB = $scope.kotakdate + "/" + $scope.kotakmonth + "/" + $scope.kotakyear;
                $scope.quotesrequest.Requests[0].MobileNumber = $scope.kotakusermobile;
                var kotakreq = QuoteService.Quotes_Service1($scope.quotesrequest, 1, $scope);
                kotakreq.then(function (result) {
                    result.data = angular.fromJson(result.data);
                    $scope.submitKotakbtnldr = false;
                    $scope.submitKotabuykbtn = true;
                    var responsedata = CarFactory.addonlists(result.data.Quotes, 1, $scope);
                    $scope.KotakQuotes_Data = responsedata[0][0];
                    for (var p = 0; p < $scope.Quotes_Data.length; p++) {
                        if ($scope.Quotes_Data[p].InsurerId == $scope.KotakQuotes_Data.InsurerId) {
                            $scope.Quotes_Data[p] == $scope.KotakQuotes_Data;
                        }
                    }
                });
            }
        }
        function termriderselection() {
            if ($scope.Quotes_Data_Plan.length > 0) {
                for (var i = 0; i < $scope.HealthRefineChips.length; i++) {
                    var item = { RiderCode: $scope.HealthRefineChips[i].id, RiderName: $scope.HealthRefineChips[i].value };
                    //if ($scope.HealthRefineChips[i].id != 14) {
                    //    var data = $scope.HealthRefineChips[i];
                    //    $scope.termfeature[item.RiderCode] = true;
                    //    if (data.check == "rider" && data.id != 28) {
                    //        var data1 = ($filter('filter')($scope.termrider, function (d) { return d.RiderCode == data.id }));
                    //        if (data1[0].RiderCode == 19) {
                    //            $scope.IncreasingSAbyleftpanel($scope.termfeature[data1[0].RiderCode]);
                    //        }
                    //        else {
                    //            TermFactory.updatepriceonridersidebarselection($scope, data1[0]);
                    //        }     
                    //    }
                    //}
                    if ($scope.HealthRefineChips[i].id != 28) {
                        $scope = TermFactory.FiltersByFeatures($scope, item, false)
                    }
                }
            }
            //else {
            //    $scope.termfeature = [];
            //    $scope.HealthRefineChips = [];

            //}
        }
        $scope.openTermPercentagePremium = function (item, id) {
            $rootScope.scrollhide = 'scollClass';
            $scope.TermSliderpopupSrc = '../HomePage/Template/TermSliderpopup.html';
            $scope.incomechangepopupterm = false;
            if (id == 'income') {
                $scope.IncomeModelarray = [];
                var i = 1;
                while (i <= 20) {
                    $scope.IncomeModelarray.push({ "value": i, "text": i + "Yrs" });
                    i = i + 1;
                }
                $scope.MonthlyModelarray = [];
                var j = 0;
                while (j <= 100) {
                    $scope.MonthlyModelarray.push({ "value": j, "text": j + "%" });
                    j = j + 1;
                }
                $scope.incomechangepopupterm = true;
            }
            else {
                $scope.Lumpsummodelarray = [];
                var i = 5;
                while (i < 100) {
                    $scope.Lumpsummodelarray.push({ "value": i, "text": i + "%" });
                    i = i + 5;
                }
                $scope.lumpsumchangepopupterm1 = true;
            }
            $scope.lumpsumchangepopupterm = true;
        }
        $scope.lumpsumchangepopupClose = function () {
            $rootScope.scrollhide = '';
            $scope.ADSALimitErrormsg = false;
            $scope.lumpsumchangepopupterm = false;
            $scope.lumpsumchangepopupterm1 = false;
            $scope.RiderSApercentagepop = false;;
            $scope.monthlychangepopupterm = false;;
            $scope.incomechangepopupterm = false;
        }
        $scope.TermPercentagePremium = function () {
            if ($scope.Lumpsummodel != undefined && $scope.Lumpsummodel != null && $scope.Lumpsummodel != '') {
                $scope.termslumpsumerror = false;
                $scope.termslumpsumLoader = true;
                var response = CommonService.TermPercentagePremium($scope);
                response.then(function (result) {
                    var data = angular.fromJson(result.data)[0];
                    var Mpremium = data.MonthlyPremium;
                    var Apremium = data.Premium;
                    for (var ik = 0; ik < $scope.Quotes_Data_Plan.length; ik++) {
                        if ($scope.Quotes_Data_Plan[ik].TermPercentagePremium == 1) {
                            for (var p = 0; p < $scope.Quotes_Data_Plan[ik].AvailableRiders.length; p++) {
                                if ($scope.mdrider[$scope.Quotes_Data_Plan[ik].PlanId + ',' + $scope.Quotes_Data_Plan[ik].AvailableRiders[p].RiderId] == true) {
                                    Mpremium = Mpremium + $scope.Quotes_Data_Plan[ik].AvailableRiders[p].RiderMonthlyPremium;
                                    Apremium = Apremium + $scope.Quotes_Data_Plan[ik].AvailableRiders[p].AnnualPremium;
                                }
                            }
                            $scope.Quotes_Data_Plan[ik].Lump_Sum = data.LumpSum;
                            $scope.Quotes_Data_Plan[ik].LumSumPercent = $scope.Lumpsummodel;
                            $scope.Quotes_Data_Plan[ik].TotalBenefit = data.TotalBenefit;
                            $scope.Quotes_Data_Plan[ik].TotalMonthlyIncome = parseInt(data.MonthlyIncome);
                            $scope.Quotes_Data_Plan[ik].AnnualPremium = parseInt(Apremium);
                            $scope.Quotes_Data_Plan[ik].OriginalannualPremium = parseInt(data.Premium);
                            $scope.Quotes_Data_Plan[ik].OriginalmonthlyPremium = parseInt(data.MonthlyPremium);
                            $scope.Quotes_Data_Plan[ik].MonthlyPremium = parseInt(Mpremium);
                            if ($scope.Quotes_Data_Plan[ik].PayingMode.toLowerCase() == "monthly") {
                                $scope.Quotes_Data_Plan[ik].Premium = parseInt(Mpremium);
                                $scope.Quotes_Data_Plan[ik].OriginalPremium = parseInt(data.MonthlyPremium);
                            }
                            else {
                                $scope.Quotes_Data_Plan[ik].Premium = parseInt(Apremium);
                                $scope.Quotes_Data_Plan[ik].OriginalPremium = parseInt(data.Premium);
                            }
                            $rootScope.scrollhide = '';
                            $scope.lumpsumchangepopupterm = false;
                            $scope.termslumpsumLoader = false;
                        }
                    }
                });
            }
            else {
                $scope.termslumpsumerror = true;
            }
        }
        function caraddonncb() {
            for (var p = 0; p < $scope.Quotes_Data.length; p++) {
                if ($scope.Quotes_Data[p].InsurerId == 15 && Object.keys($scope.addonsmodels).length != 0 && $scope.quotesrequest.Requests[0].InsuranceType != "TP") {
                    var addoncount = 0;
                    for (var j = 0; j < $scope.Quotes_Data[p].addonavl.length; j++) {
                        if ($scope.addonsmodels[$scope.Quotes_Data[p].InsurerNameWithPlan + $scope.Quotes_Data[p].PolicyTerm + $scope.Quotes_Data[p].InsurerName + $scope.Quotes_Data[p].addonavl[j].Name] == true) {
                            if ($scope.Quotes_Data[p].addonavl[j].Type.toLowerCase() != "free") {
                                addoncount++;
                                var ncbdiscount = CarFactory.UnitedFn($scope.Quotes_Data[p], $scope, $scope.Quotes_Data[p].objectid);
                                for (var d = 0; d < $scope.Quotes_Data[p].Discounts.length; d++) {
                                    if ($scope.Quotes_Data[p].Discounts[d].Name == "NCBPremium") {
                                        $scope.Quotes_Data[p].BasicODPremium = $scope.Quotes_Data[p].BasicODPremium + ($scope.Quotes_Data[p].Discounts[d].Value + ($scope.Quotes_Data[p].Discounts[d].Value * $scope.servicetaxrate * 100) / 100);
                                        $scope.Quotes_Data[p].Discounts[d].Value = ncbdiscount;
                                        $scope.Quotes_Data[p].BasicODPremium = $scope.Quotes_Data[p].BasicODPremium - ($scope.Quotes_Data[p].Discounts[d].Value + ($scope.Quotes_Data[p].Discounts[d].Value * $scope.servicetaxrate * 100) / 100);
                                    }
                                }
                            }
                        }
                    }
                    if (addoncount == 0) {
                        var ncbdiscount = CarFactory.UnitedFn($scope.Quotes_Data[p], $scope);
                        for (var d = 0; d < $scope.Quotes_Data[p].Discounts.length; d++) {
                            if ($scope.Quotes_Data[p].Discounts[d].Name == "NCBPremium") {
                                $scope.Quotes_Data[p].BasicODPremium = $scope.Quotes_Data[p].BasicODPremium + ($scope.Quotes_Data[p].Discounts[d].Value + ($scope.Quotes_Data[p].Discounts[d].Value * $scope.servicetaxrate * 100) / 100);
                                $scope.Quotes_Data[p].Discounts[d].Value = ncbdiscount;
                                $scope.Quotes_Data[p].BasicODPremium = $scope.Quotes_Data[p].BasicODPremium - ($scope.Quotes_Data[p].Discounts[d].Value + ($scope.Quotes_Data[p].Discounts[d].Value * $scope.servicetaxrate * 100) / 100);
                            }
                        }
                    }
                }
            }
        }
        $scope.openMaxdiseaseList = function (id) {
            $scope.maxdiseaselisttemplate = '../HomePage/Template/MaxDiseaseList.html';
            $scope.opendiseaseList = true;
            $rootScope.scrollhide = 'scollClass';
            if (id == 6) {
                $scope.riderdiseasename = 'Waiver Of Premium';
                $scope.criticalList = false;
                $scope.waiverList = true;
            }
            else if (id == 11 || id == 15 || id == 16 || id == 17) {
                $scope.CriticalDiseaseCovered = [{ text: 'Cancer of Specified Severity' }, { text: 'Myocardial Infraction (First heart attack of Specific Severity)' }, { text: 'Open Chest CABG' }, { text: 'Open Heart Replacement or Repair of Heart Valves' }, { text: 'Coma of Specified Severity' }, { text: 'Kidney Failure Requiring Regular Dialysis' }, { text: 'Stroke Resulting in Permanent Symptoms' }, { text: 'Major Organ /Bone Marrow Transplant' }, { text: 'Permanent Paralysis of Limbs' }, { text: 'Motor Neuron Disease with Permanent Symptoms' }, { text: 'Sclerosis with Persisting Symptoms' }, { text: 'Benign Brain Tumor' }, { text: 'Blindness' }, { text: 'Deafness' }, { text: 'End Stage Lung Failure' }, { text: 'End Stage Liver Failure' }, { text: 'Loss of Speech' }, { text: 'Loss of Limbs' }, { text: 'Major Head Trauma' }, { text: 'Primary (Idiopathic) Pulmonary Hypertension' }, { text: 'Third Degree Burns' }, { text: 'Angioplasty(Minor CI)' }];
                $scope.riderdiseasename = 'Critical Illness';
                $scope.diseasename = '';
                $scope.criticalListCovered = true;
                $scope.criticalList = false;
                $scope.waiverList = false;
            }
            else {
                $scope.riderdiseasename = 'Critical Illness';
                $scope.criticalList = true;
                $scope.waiverList = false;
            }
        }
        $scope.CloseopendiseaseList = function () {
            $rootScope.scrollhide = '';
            $scope.opendiseaseList = false;
            $scope.criticalList = false;
            $scope.waiverList = false;
        }

        $scope.WholelifeCoverandPayage = function (plantype1, id) {
            if (plantype != null) {
                plantype = plantype1;
                for (var i = 0; i < $scope.planType.length; i++) {
                    if (id == "newterm" && $scope.planType[i].Id == plantype1) {
                        plantype = $scope.planType[i];
                    }
                }
                $scope.quotesrequest.Requests[0].PlanTypeId = plantype.Id;
                $scope.LimitedPayTerm = [];

                if (plantype.Id == 24) {
                    $scope.PolicyTermPeriod = 100;
                    var index = $scope.policytermlist.length - 1;
                    $scope.policytermlist.splice(index, 1);
                    var payagetem = 5 + $scope.AgeTerm;
                    if (payagetem != 60 && payagetem != 65 && payagetem != 75 && payagetem != 100) {
                        $scope.LimitedPayTerm.push({ text: payagetem + ' Year', value: payagetem });
                    }
                    var payagetem = 10 + $scope.AgeTerm;
                    if (payagetem != 60 && payagetem != 65 && payagetem != 75 && payagetem != 100) {
                        $scope.LimitedPayTerm.push({ text: payagetem + ' Year', value: payagetem });
                    }
                    $scope.LimitedPayTerm.push({ text: '60 Year', value: 60 });
                    $scope.LimitedPayTerm.push({ text: '65 Year', value: 65 });
                    $scope.LimitedPayTerm.push({ text: '75 Year', value: 75 });
                    $scope.LimitedPayTerm.push({ text: '100 Year', value: 100 });
                    $scope.LimitedPayingTerm = 100;
                    $scope.quotesrequest.Requests[0].PolicyTerm = 100 - $scope.AgeTerm;
                    $scope.quotesrequest.Requests[0].PremiumPayingTerm = 100 - $scope.AgeTerm;
                    $scope.DIYPPT1 = $scope.AgeTerm + 5;
                    $scope.DIYPPT2 = 75;
                    $scope.DIYPPT3 = 100;
                }
                else if (plantype.Id == 23) {
                    if ($scope.policytermlist[$scope.policytermlist.length - 1].value != 0) {
                        $scope.policytermlist.push({ Name: 'Maximum', value: 0 });
                    }
                    $scope.PolicyTermPeriod = 60;
                    $scope.LimitedPayingTerm = 60;
                    if ($scope.AgeTerm > 55) {
                        $scope.PolicyTermPeriod = $scope.AgeTerm + 5;
                        $scope.LimitedPayingTerm = $scope.AgeTerm + 5;
                    }
                    $scope.quotesrequest.Requests[0].PolicyTerm = $scope.PolicyTermPeriod - $scope.AgeTerm;
                    $scope.quotesrequest.Requests[0].PremiumPayingTerm = $scope.LimitedPayingTerm - $scope.AgeTerm;
                    Termlimitedoption();
                    TermPTandPPTDiy();
                }
                else {
                    if ($scope.policytermlist[$scope.policytermlist.length - 1].value != 0) {
                        $scope.policytermlist.push({ Name: 'Maximum', value: 0 });
                    }
                    $scope.PolicyTermPeriod = 75;
                    $scope.LimitedPayingTerm = 75;
                    $scope.quotesrequest.Requests[0].PolicyTerm = 75 - $scope.AgeTerm;
                    $scope.quotesrequest.Requests[0].PremiumPayingTerm = 75 - $scope.AgeTerm;
                    Termlimitedoption();
                    TermPTandPPTDiy();
                }
                if (id != 'edit') {
                    $scope.Initialzedata();
                    $scope.ToastText = "Cover upto age and Pay Premium upto age have been reset to default. You can change the values to see plans specific to your criteria.";
                    $scope.showSimpleToast();
                    $scope.quotes_userdata.PolicyTerm = $scope.quotesrequest.Requests[0].PolicyTerm;
                    var a = $scope.gaProduct + " plan type selection";
                    $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: a, value: "plan type selection for mobile" });
                }
            }
        }
        $scope.diabeticproceed = function (id) {
            $rootScope.scrollhide = "";
            if (id == "yes") {
                $scope.diabeticpopques = false;
                $scope.diabeticsuffermsg = false;
                $scope.showdiabeticpop = false;
                $scope.ADDisablemodel[Termritem.PlanId + ',' + 3] = true;
                $scope.ADDisablemodel[Termritem.PlanId + ',' + 6] = true;
                $scope.ADDisablemodel[Termritem.PlanId + ',' + 11] = true;
                $scope.ADDisablemodel[Termritem.PlanId + ',' + 15] = true;
                $scope.ADDisablemodel[Termritem.PlanId + ',' + 16] = true;
                $scope.ADDisablemodel[Termritem.PlanId + ',' + 17] = true;
                $scope.mdrider[Termritem.PlanId + ',' + Termrideritem.RiderId] = false;
            }
            else {
                $scope.showdiabeticpop = false;
                $scope.ridercalulationfrterm(Termrideritem, Termflag, Termritem, undefined, false);
            }
        }
        function ConnectAgent(leadid, agentid) {
            var response = CommonService.ConnectAgent(leadid, agentid);
            response.then(function (result) {
                $scope.showeasylinkpopup = true;
            });
        }
        $scope.TermPincodeSearchClose = function () {
            $scope.Termplansearchbypincode = false;
            $rootScope.scrollhide = "";
        }
        $scope.TermPincodeSearch = function () {
            if ($scope.pincode != undefined && $scope.pincode != '' && $scope.pincode != 0) {
                $scope.Termplansearchbypincode = false;
                $rootScope.scrollhide = "";
                $scope.termpinerror = false;
                $analytics.eventTrack('Click', { category: $scope.gaProduct + ' Quotes Page Event', label: "Pincode Search", value: $scope.productID });
                $scope.quotesrequest.Requests[0].Pincode = $scope.pincode.PinCode;
                $scope.Initialzedata();
            }
            else {
                $scope.termpinerror = true;
            }
        }
        $scope.policytestdate = function (id, datevalue, monthvalue, yearvalue, flag) {
            $scope.testdatespecific(id, datevalue, monthvalue, yearvalue);
            if (flag == 1) {
                $scope.datespecificmsgreg = $scope.datespecificmsg;
            }
            else {
                $scope.datespecificmsgexp = $scope.datespecificmsg;
            }
        }
        $scope.testdatespecific = function (id, datevalue, monthvalue, yearvalue) {
            if (yearvalue == undefined || yearvalue == '') {
                yearvalue = '1000';
            }
            if (id == 1) {
                $scope.datespecificmsg = '';
                if (datevalue < 1 || datevalue > 31) {
                    if (yearvalue < 1 || yearvalue.length < 4) {
                        if (monthvalue < 1 || monthvalue > 12) {
                            $scope.datespecificmsg = 'please enter valid date, month and year';
                        }
                        else {
                            $scope.datespecificmsg = 'please enter valid date and year';
                        }
                    }
                    else if (monthvalue < 1 || monthvalue > 12) {
                        $scope.datespecificmsg = 'please enter valid date and month';
                    }
                    else {
                        $scope.datespecificmsg = 'please enter valid date';
                    }
                }
                else if (yearvalue < 1 || yearvalue.length < 4) {
                    if (monthvalue < 1 || monthvalue > 12) {
                        $scope.datespecificmsg = 'please enter valid month and year';
                    }
                    else {
                        $scope.datespecificmsg = 'please enter valid year';
                    }
                }
                else if (monthvalue < 1 || monthvalue > 12) {
                    $scope.datespecificmsg = 'please enter valid month';
                }
            }
            else if (id == 2) {
                $scope.datespecificmsg = '';
                if (monthvalue < 1 || monthvalue > 12) {
                    if (yearvalue < 1 || yearvalue.length < 4) {
                        if (datevalue < 1 || datevalue > 31) {
                            $scope.datespecificmsg = 'please enter valid date, month and year';
                        }
                        else {
                            $scope.datespecificmsg = 'please enter valid month and year';
                        }
                    }
                    else if (datevalue < 1 || datevalue > 31) {
                        $scope.datespecificmsg = 'please enter valid date and month';
                    }
                    else {
                        $scope.datespecificmsg = 'please enter valid month';
                    }
                }
                else if (yearvalue < 1 || yearvalue.length < 4) {
                    if (datevalue < 1 || datevalue > 31) {
                        $scope.datespecificmsg = 'please enter valid date and year';
                    }
                    else {
                        $scope.datespecificmsg = 'please enter valid year';
                    }
                }
                else if (datevalue < 1 || datevalue > 31) {
                    $scope.datespecificmsg = 'please enter valid date';
                }
            }
            else if (id == 3) {
                $scope.datespecificmsg = '';
                if (yearvalue < 1 || yearvalue.length < 4) {
                    if (monthvalue < 1 || monthvalue > 12) {
                        if (datevalue < 1 || datevalue > 31) {
                            $scope.datespecificmsg = 'please enter valid date, month and year';
                        }
                        else {
                            $scope.datespecificmsg = 'please enter valid month and year';
                        }
                    }
                    else if (datevalue < 1 || datevalue > 31) {
                        $scope.datespecificmsg = 'please enter valid date and year';
                    }
                    else {
                        $scope.datespecificmsg = 'please enter valid year';
                    }
                }
                else if (monthvalue < 1 || monthvalue > 12) {
                    if (datevalue < 1 || datevalue > 31) {
                        $scope.datespecificmsg = 'please enter valid date and month';
                    }
                    else {
                        $scope.datespecificmsg = 'please enter valid month';
                    }
                }
                else if (datevalue < 1 || datevalue > 31) {
                    $scope.datespecificmsg = 'please enter valid date';
                }
            }
            if (monthvalue == 2 && (datevalue > 29 || datevalue < 1)) {
                $scope.datespecificmsg = 'please enter valid date';
            }
            if (datevalue > 30 && (monthvalue == 4 || monthvalue == 6 || monthvalue == 9 || monthvalue == 11)) {
                $scope.datespecificmsg = 'please enter valid date';
            }
        }
        $scope.Groupredirect = function () {
            $window.location.href = $rootScope.groupdata.LandingURL;
        }
        $scope.compareplanchargefn = function () {
            $scope.NonTermChargesUrl = '../HomePage/Template/NonTermCharges.html';
            $scope.openchargepop = true;
            $analytics.eventTrack('Click', { category: $scope.gaProduct, label: "Compare Plan charges click", value: $scope.productID });
            $rootScope.scrollhide = "scollClass";
        }
        $scope.compareplanchargefnclose = function () {
            $scope.openchargepop = false;
            $rootScope.scrollhide = "";
        }
        $scope.changetermpercentage = function () {
            if ($scope.monthlycheckbox == true) {
                $scope.IncreasingMonthlyIncome = 0;
            }
            $scope.quotesrequest.Requests[0].IncomePeriod = $scope.IncomePeriod;
            $scope.quotesrequest.Requests[0].IncreasingMonthlyIncome = $scope.IncreasingMonthlyIncome;
        }
        $scope.gethdfcquotes = function () {
            $scope.gethdfcquotesloader = true;
            $scope.quotesrequest.Requests[0].IncomePeriod = $scope.IncomePeriod;
            $scope.quotesrequest.Requests[0].IncreasingMonthlyIncome = $scope.IncreasingMonthlyIncome;
            $scope.quotesrequest.Requests[0].PlanID = [890];
            var hdfcData = QuoteService.Quotes_Service($scope.quotesrequest, $scope);
            hdfcData.then(function (hdfcData1) {
                $scope.quotesrequest.Requests[0].PlanID = undefined;
                hdfcDataincomeplan = angular.copy(hdfcData1.data.Quotes[0]);
                hdfcDataincomeplan.IncludedRiderlist = [];
                var count = hdfcDataincomeplan.AvailableRiders.length;
                if (hdfcDataincomeplan.IncreasingSumAssured == 3) {
                    count++;
                }
                hdfcDataincomeplan.showtoprider = [];
                if (count > 1) {
                    hdfcDataincomeplan.showtoprider.push(hdfcDataincomeplan.AvailableRiders[0]);
                    hdfcDataincomeplan.showtoprider.push(hdfcDataincomeplan.AvailableRiders[1]);
                }
                else if (count == 1 && hdfcDataincomeplan.ToolTipWaiveOff.length > 0) {
                    hdfcDataincomeplan.showtoprider.push(hdfcDataincomeplan.AvailableRiders[0]);
                    hdfcDataincomeplan.showtoprider.push(hdfcDataincomeplan.ToolTipWaiveOff[0]);
                }
                else if (count == 1 && hdfcDataincomeplan.ToolTipWaiveOff.length == 0) {
                    hdfcDataincomeplan.showtoprider.push(hdfcDataincomeplan.AvailableRiders[0]);
                }
                else if (count == 0 && hdfcDataincomeplan.ToolTipWaiveOff.length == 1) {
                    hdfcDataincomeplan.showtoprider.push(hdfcDataincomeplan.ToolTipWaiveOff[0]);
                }
                else if (count == 0 && hdfcDataincomeplan.ToolTipWaiveOff.length > 1) {
                    hdfcDataincomeplan.showtoprider.push(hdfcDataincomeplan.ToolTipWaiveOff[0]);
                    hdfcDataincomeplan.showtoprider.push(hdfcDataincomeplan.ToolTipWaiveOff[1]);
                }
                hdfcDataincomeplan.RiderlengthForMobile = count + hdfcDataincomeplan.ToolTipWaiveOff.length;
                hdfcDataincomeplan.showtopriderlength = hdfcDataincomeplan.RiderlengthForMobile - hdfcDataincomeplan.showtoprider.length;
                hdfcDataincomeplan.ids = i;
                hdfcDataincomeplan.OriginalannualPremium = hdfcDataincomeplan.AnnualPremium;
                hdfcDataincomeplan.OriginalmonthlyPremium = hdfcDataincomeplan.MonthlyPremium;
                hdfcDataincomeplan.MonthlyPremiumPercent = 0;
                hdfcDataincomeplan.AnnualPremiumPercent = 0;
                if (hdfcDataincomeplan.NonDiscountedPremium > 0) {
                    hdfcDataincomeplan.AnnualPremiumPercent = ((hdfcDataincomeplan.NonDiscountedPremium - hdfcDataincomeplan.AnnualPremium) * 100 / hdfcDataincomeplan.NonDiscountedPremium).toFixed(1);
                }
                if (hdfcDataincomeplan.NonDiscountedPremiumMonthly > 0) {
                    hdfcDataincomeplan.MonthlyPremiumPercent = ((hdfcDataincomeplan.NonDiscountedPremiumMonthly - hdfcDataincomeplan.MonthlyPremium) * 100 / hdfcDataincomeplan.NonDiscountedPremiumMonthly).toFixed(1);
                }
                if (hdfcDataincomeplan.MonthlyPremium > 0) {
                    $scope.payemodepremium = "month";
                    $scope.showMonthlyPremium = false;
                    $scope.showAnnualPremium = true;
                    $scope.monthlypaymodeCss = "";
                    $scope.yearlypaymodeCss = "yearctive";
                    $scope.term1monthlypaymodeCss = "activeclass";
                    $scope.term1yearlypaymodeCss = "";
                    hdfcDataincomeplan.Premium = hdfcDataincomeplan.MonthlyPremium;
                    hdfcDataincomeplan.OriginalPremium = hdfcDataincomeplan.MonthlyPremium;
                    hdfcDataincomeplan.PayingMode = "Monthly";
                    if (hdfcDataincomeplan.AvailableRiders.length > 0) {
                        for (var q = 0; q < hdfcDataincomeplan.AvailableRiders.length; q++) {
                            hdfcDataincomeplan.AvailableRiders[q].RiderPremium = Math.round(hdfcDataincomeplan.AvailableRiders[q].RiderMonthlyPremium);
                        }
                    }
                }
                var data = [];
                data = $filter('filter')($scope.userselectionrider, function (d) { return d.PlanId == 890 });
                for (var l = 0; l <= data.length; l++) {
                    var idx = $scope.userselectionrider.indexOf((data[l]));
                    if (idx > -1) {
                        $scope.userselectionrider.splice(idx, 1);
                    }
                }
                hdfcDataincomeplan.AvailableRiders.forEach(function (riderdata1) {
                    //$scope.editmdrider[riderdata1.PlanId + ',' + riderdata1.RiderId] = false;
                    //$scope.mdrider[riderdata1.PlanId + ',' + riderdata1.RiderId] = false;
                    if (riderdata1.IsIncluded) {
                        hdfcDataincomeplan.Premium = hdfcDataincomeplan.OriginalPremium + riderdata1.RiderPremium;
                        hdfcDataincomeplan.AnnualPremium = hdfcDataincomeplan.OriginalannualPremium + riderdata1.AnnualPremium;
                        hdfcDataincomeplan.MonthlyPremium = hdfcDataincomeplan.OriginalmonthlyPremium + riderdata1.RiderMonthlyPremium;
                        hdfcDataincomeplan.OriginalPremium = hdfcDataincomeplan.Premium;
                        hdfcDataincomeplan.OriginalannualPremium = hdfcDataincomeplan.AnnualPremium;
                        hdfcDataincomeplan.OriginalmonthlyPremium = hdfcDataincomeplan.MonthlyPremium;
                        hdfcDataincomeplan.IncludedRiderlist.push({ "RiderName": riderdata1.RiderName + ' (Included)' });
                    }
                });

                hdfcDataincomeplan.compareshow = false;
                if (hdfcDataincomeplan.IncreasingSumAssured == 3) {
                    hdfcDataincomeplan.IncreasingSAValue = $scope.totalcount1;
                }
                var p = 0;
                for (var n = 0; n < $scope.Quotes_Data.length; n++) {
                    if ($scope.Quotes_Data[n].PlanId == 890) {
                        p = angular.copy(n);
                        $scope.Quotes_Data[n] = hdfcDataincomeplan;
                        $scope.Quotes_Data[n].AvailableRiders.forEach(function (riderdata1) {
                            if (riderdata1.RiderId == 1) {
                                $scope.TermIncomeOptionPlan(riderdata1, $scope.Quotes_Data[n]);
                            }
                            else {
                                if ($scope.mdrider[riderdata1.PlanId + ',' + riderdata1.RiderId] == true) {
                                    $scope.ridercalulationfrterm(riderdata1, 1, $scope.Quotes_Data[p], 'getquote');
                                    $scope.Quotes_Data[p] = $scope.PlanItem;
                                }
                            }

                        });
                        $scope.TermPremium(1);
                        $scope.gethdfcquotesloader = false;
                        $scope.lumpsumchangepopupClose();
                    }
                }
            });
        }
        $scope.SumassuredPercentChangefn = function () {
            if ($scope.riderslider[0].PlanId == 890 && $scope.riderslider[0].RiderId == 1) {
                var age = $scope.AgeTerm * 12;

                var policyterm = $scope.riderslider[0].PolicyTermYear;
                if (policyterm == null) {
                    policyterm = $scope.item1.PolicyTerm;
                }
                var monthlyincome = parseInt($scope.item1.TotalMonthlyIncome * ($scope.SelectedPercentage / 100));
                var TempSa = ($scope.SelectedPercentage / 100) * $scope.item1.SumAssured;
                var hdfcData = CommonService.TermADRiderMonthlyPremium(policyterm, $scope.riderslider[0], age, monthlyincome, $scope.quotesrequest.Requests[0].IncomePeriod, $scope.quotesrequest.Requests[0].IncreasingMonthlyIncome, TempSa);
                hdfcData.then(function (result) {
                    var data = result.data[0];
                    if (data.InitialriskCovers <= $scope.riderslider[0].RiderMaxSumAssured) {
                        $scope.TermAddonSA = [];
                        var value = ($scope.SelectedPercentage / 100) * $scope.item1.SumAssured;
                        var length = value.toString().length;
                        if (length > 7) {
                            var text = (value / 10000000).toFixed(2) + ' Cr';
                        }
                        else if (length > 5 && length < 8) {
                            var text = (value / 100000).toFixed(2) + ' lacs';
                        }
                        else if (length > 3 && length < 6) {
                            var text = (value / 1000).toFixed(2) + ' K';
                        }
                        $scope.TermAddonSA.AddonsSumAssuredText = text;
                        $scope.TermAddonSA.AddonsSumAssuredvalue = value;
                        $scope.ADSALimitErrormsg = false;
                        $scope.riderslider[0].SelectedSAPercentage = $scope.SelectedPercentage;
                        $scope.termaddonssumassured();
                    }
                    else {
                        $scope.ADSALimitErrormsg = true;
                    }
                });
            }
            else {
                $scope.TermAddonSA = [];
                var value = ($scope.SelectedPercentage / 100) * $scope.item1.SumAssured;
                var length = value.toString().length;
                if (length > 7) {
                    var text = (value / 10000000).toFixed(2) + ' Cr';
                }
                else if (length > 5 && length < 8) {
                    var text = (value / 100000).toFixed(2) + ' lacs';
                }
                else if (length > 3 && length < 6) {
                    var text = (value / 1000).toFixed(2) + ' K';
                }
                $scope.TermAddonSA.AddonsSumAssuredText = text;
                $scope.TermAddonSA.AddonsSumAssuredvalue = value;
                $scope.riderslider[0].SelectedSAPercentage = $scope.SelectedPercentage;
                $scope.termaddonssumassured();
            }
        }

        $scope.TermRiderPTandPPTchangeFn = function (rider, item) {
            if (parseInt($scope.RiderPPT[rider.PlanId + ',' + rider.RiderId]) > parseInt($scope.RiderPT[rider.PlanId + ',' + rider.RiderId])) {
                $scope.RiderPPT[rider.PlanId + ',' + rider.RiderId] = $scope.RiderPT[rider.PlanId + ',' + rider.RiderId];
                $scope.RiderPPTlist[rider.PlanId] = [];
                var listdata = parseInt($scope.RiderPT[rider.PlanId + ',' + rider.RiderId]);
                if (listdata > 35) {
                    listdata = 35;
                }
                for (var s = 5; s <= listdata; s++) {
                    $scope.RiderPPTlist[rider.PlanId].push({ "value": s, "Name": s + ' yrs' })
                }
                if ($scope.RiderPPT[rider.PlanId + ',' + rider.RiderId] > 35) {
                    $scope.RiderPPTlist[rider.PlanId].push({ "value": $scope.RiderPPT[rider.PlanId + ',' + rider.RiderId], "Name": $scope.RiderPPT[rider.PlanId + ',' + rider.RiderId] + ' yrs' })
                }
            }
            else {
                $scope.RiderPPTlist[rider.PlanId] = [];
                var listdata = parseInt($scope.RiderPT[rider.PlanId + ',' + rider.RiderId]);
                if (listdata > $scope.TempriderPremiumPayingTerm) {
                    listdata = $scope.TempriderPremiumPayingTerm;
                }
                if ($scope.RiderPPT[rider.PlanId + ',' + rider.RiderId] > 35) {
                    $scope.RiderPPT[rider.PlanId + ',' + rider.RiderId] = listdata;
                }
                if (listdata > 35 && listdata <= $scope.TempriderPremiumPayingTerm) {
                    for (var s = 5; s <= 35; s++) {
                        $scope.RiderPPTlist[rider.PlanId].push({ "value": s, "Name": s + ' yrs' })
                    }
                    $scope.RiderPPTlist[rider.PlanId].push({ "value": listdata, "Name": listdata + ' yrs' });
                }
                else {
                    for (var s = 5; s <= listdata; s++) {
                        $scope.RiderPPTlist[rider.PlanId].push({ "value": s, "Name": s + ' yrs' })
                    }
                }
            }
            var tempriderdata = [];
            var sumassured = rider.MaxSumAssured;
            var age = $scope.AgeTerm * 12;
            rider.PremiumPayingTerm = parseInt($scope.RiderPPT[rider.PlanId + ',' + rider.RiderId]);
            rider.PolicyTermYear = parseInt($scope.RiderPT[rider.PlanId + ',' + rider.RiderId]);
            var riderpremium = 0;
            var riderannualpremium = 0;
            if ($scope.userselectionrider.length > 0) {
                var rideridx = $filter('filter')($scope.userselectionrider, function (d1) { return d1.RiderId == 1 && d1.PlanId == item.PlanId })[0];
                var idx = $scope.userselectionrider.indexOf(rideridx);
                if (idx > -1) {
                    riderpremium = rideridx.RiderMonthlyPremium;
                    riderannualpremium = rideridx.AnnualPremium;
                }
            }

            var hdfcData = CommonService.TermADBRiderRate(rider, sumassured, age);
            hdfcData.then(function (result) {
                var data = angular.fromJson(result.data)[0];
                rider.Rates = data.Rates;
                if (item.PayingMode == "monthly" || item.PayingMode == "Monthly") {
                    rider.MaxSumAssured = Math.floor((((((((((item.OriginalmonthlyPremium + riderpremium) / rider.RiderServiceTax) * 0.3) * rider.MFactor) / (rider.Rates - rider.Rates * rider.Discount / 100))) / rider.MonthlyFactor) / rider.MFactor)) * rider.MFactor / rider.SliderRange) * rider.SliderRange;
                }
                else {
                    rider.MaxSumAssured = Math.floor(((((((((item.OriginalannualPremium + riderannualpremium) / rider.RiderServiceTax) * 0.3) * rider.MFactor) / (rider.Rates - rider.Rates * rider.Discount / 100))) / rider.MFactor)) * rider.MFactor / rider.SliderRange) * rider.SliderRange;
                }
                var MaxSumassured = 20000000;
                if (item.SumAssured <= MaxSumassured) {
                    MaxSumassured = item.SumAssured;
                }
                if (MaxSumassured <= rider.MaxSumAssured) {
                    rider.MaxSumAssured = MaxSumassured;
                }
                rider.SelectedSumAssured = rider.MaxSumAssured;
                if (rider.SelectedSumAssured > 0) {
                    sumassured = rider.SelectedSumAssured;
                }
                var hdfcData = CommonService.TermADBRiderRate(rider, sumassured, age);
                hdfcData.then(function (result) {
                    var data = angular.fromJson(result.data)[0];
                    for (var n = 0; n < $scope.Quotes_Data.length; n++) {
                        if ($scope.Quotes_Data[n].PlanId == rider.PlanId) {
                            for (var m = 0; m < $scope.Quotes_Data[n].AvailableRiders.length; m++) {
                                if ($scope.Quotes_Data[n].AvailableRiders[m].RiderId == rider.RiderId) {
                                    $scope.Quotes_Data[n].AvailableRiders[m].AnnualPremium = data.Premium;
                                    $scope.Quotes_Data[n].AvailableRiders[m].RiderMonthlyPremium = data.MothlyPremium;
                                    $scope.Quotes_Data[n].AvailableRiders[m].SelectedSumAssured = rider.SelectedSumAssured;
                                    $scope.Quotes_Data[n].AvailableRiders[m].MaxSumAssured = rider.MaxSumAssured;
                                    $scope.Quotes_Data[n].AvailableRiders[m].Rates = data.Rates;
                                    $scope.Quotes_Data[n].AvailableRiders[m].PremiumPayingTerm = $scope.RiderPPT[rider.PlanId + ',' + rider.RiderId];
                                    $scope.Quotes_Data[n].AvailableRiders[m].PolicyTermYear = $scope.RiderPT[rider.PlanId + ',' + rider.RiderId];
                                    $scope.Quotes_Data[n].AvailableRiders[m].RiderPremium = data.Premium;
                                    if ($scope.Quotes_Data[n].PayingMode == "monthly" || $scope.Quotes_Data[n].PayingMode == "Monthly") {
                                        $scope.Quotes_Data[n].AvailableRiders[m].RiderPremium = data.MothlyPremium;
                                    }
                                    tempriderdata = $scope.Quotes_Data[n].AvailableRiders[m];
                                }
                            }
                            if ($scope.mdrider[$scope.Quotes_Data[n].PlanId + ',' + rider.RiderId] == true) {
                                var idx1 = $scope.userselectionrider.indexOf(($filter('filter')($scope.userselectionrider, function (d) { return (d.RiderId == rider.RiderId && d.PlanId == rider.PlanId) })[0]));
                                if (idx1 > -1) {
                                    $scope.userselectionrider.splice(idx1, 1);
                                }
                                $scope.userselectionrider.push(tempriderdata);
                                $scope.Quotes_Data[n].Premium = $scope.Quotes_Data[n].OriginalPremium;
                                $scope.Quotes_Data[n].AnnualPremium = $scope.Quotes_Data[n].OriginalannualPremium;
                                $scope.Quotes_Data[n].MonthlyPremium = $scope.Quotes_Data[n].OriginalmonthlyPremium;
                                for (var q = 0; q < $scope.userselectionrider.length; q++) {
                                    if ($scope.Quotes_Data[n].PlanId == $scope.userselectionrider[q].PlanId) {
                                        $scope.Quotes_Data[n].Premium = Math.round($scope.Quotes_Data[n].Premium + $scope.userselectionrider[q].RiderPremium);
                                        $scope.Quotes_Data[n].AnnualPremium = Math.round($scope.Quotes_Data[n].AnnualPremium + $scope.userselectionrider[q].AnnualPremium);
                                        $scope.Quotes_Data[n].MonthlyPremium = Math.round($scope.Quotes_Data[n].MonthlyPremium + $scope.userselectionrider[q].RiderMonthlyPremium);
                                    }
                                }
                            }

                        }
                    }
                });
            });
        }
        $scope.TermIncomeOptionPlan = function (rider, item, flag, p, i) {
            var age = $scope.AgeTerm * 12;
            var policyterm = rider.PolicyTermYear;
            if (policyterm == null) {
                policyterm = item.PolicyTerm;
            }
            var monthlyincome = parseInt(item.TotalMonthlyIncome * (rider.SelectedSAPercentage / 100));
            var hdfcData = CommonService.TermADRiderMonthlyPremium(policyterm, rider, age, monthlyincome, $scope.quotesrequest.Requests[0].IncomePeriod, $scope.quotesrequest.Requests[0].IncreasingMonthlyIncome);
            hdfcData.then(function (result) {
                var data = result.data[0];
                if (data.InitialriskCovers <= rider.RiderMaxSumAssured) {
                    $scope.InitialriskCovers = data.InitialriskCovers;
                    if (flag != undefined) {
                        if (item.AvailableRiders[p].RiderId == rider.RiderId) {
                            item.AvailableRiders[p].ADMonthlyIncome = (rider.SelectedSAPercentage * item.TotalMonthlyIncome) / 100;
                            item.AvailableRiders[p].AnnualPremium = data.Premium;
                            item.AvailableRiders[p].RiderMonthlyPremium = data.MothlyPremium;
                            item.AvailableRiders[p].RiderPremium = data.Premium;
                            if (item.PayingMode == "monthly" || item.PayingMode == "Monthly") {
                                item.AvailableRiders[p].RiderPremium = data.MothlyPremium;
                            }
                            if ($scope.mdrider[item.PlanId + ',' + item.AvailableRiders[p].RiderId] == true) {
                                var idx1 = $scope.userselectionrider.indexOf(($filter('filter')($scope.userselectionrider, function (d) { return (d.RiderId == rider.RiderId && d.PlanId == rider.PlanId) })[0]));
                                if (idx1 > -1) {
                                    $scope.userselectionrider.splice(idx1, 1);
                                }
                                $scope.userselectionrider.push(item.AvailableRiders[p]);
                                $scope.hdfcCriticalCalculation(item, item.AvailableRiders[p], i);

                                item.Premium = Math.round(item.OriginalPremium);
                                item.AnnualPremium = Math.round(item.OriginalannualPremium);
                                item.MonthlyPremium = Math.round(item.OriginalmonthlyPremium);
                                for (var q = 0; q < $scope.userselectionrider.length; q++) {
                                    if (item.PlanId == $scope.userselectionrider[q].PlanId) {
                                        item.Premium = Math.round(item.Premium + $scope.userselectionrider[q].RiderPremium);
                                        item.AnnualPremium = Math.round(item.AnnualPremium + $scope.userselectionrider[q].AnnualPremium);
                                        item.MonthlyPremium = Math.round(item.MonthlyPremium + $scope.userselectionrider[q].RiderMonthlyPremium);
                                    }
                                }
                            }
                        }
                    }
                    else {
                        for (var n = 0; n < $scope.Quotes_Data.length; n++) {
                            if ($scope.Quotes_Data[n].PlanId == rider.PlanId) {
                                for (var m = 0; m < $scope.Quotes_Data[n].AvailableRiders.length; m++) {
                                    if ($scope.Quotes_Data[n].AvailableRiders[m].RiderId == rider.RiderId) {
                                        $scope.Quotes_Data[n].AvailableRiders[m].ADMonthlyIncome = (rider.SelectedSAPercentage * $scope.Quotes_Data[n].TotalMonthlyIncome) / 100;
                                        $scope.Quotes_Data[n].AvailableRiders[m].AnnualPremium = data.Premium;
                                        $scope.Quotes_Data[n].AvailableRiders[m].RiderMonthlyPremium = data.MothlyPremium;
                                        $scope.Quotes_Data[n].AvailableRiders[m].RiderPremium = data.Premium;
                                        if ($scope.Quotes_Data[n].PayingMode == "monthly" || $scope.Quotes_Data[n].PayingMode == "Monthly") {
                                            $scope.Quotes_Data[n].AvailableRiders[m].RiderPremium = data.MothlyPremium;
                                        }
                                        if ($scope.mdrider[$scope.Quotes_Data[n].PlanId + ',' + $scope.Quotes_Data[n].AvailableRiders[m].RiderId] == true) {
                                            var idx1 = $scope.userselectionrider.indexOf(($filter('filter')($scope.userselectionrider, function (d) { return (d.RiderId == rider.RiderId && d.PlanId == rider.PlanId) })[0]));
                                            if (idx1 > -1) {
                                                $scope.userselectionrider.splice(idx1, 1);
                                            }
                                            $scope.userselectionrider.push($scope.Quotes_Data[n].AvailableRiders[m]);
                                            $scope.hdfcCriticalCalculation($scope.Quotes_Data_Plan[n], $scope.Quotes_Data[n].AvailableRiders[m], n);

                                            $scope.Quotes_Data[n].Premium = Math.round($scope.Quotes_Data[n].OriginalPremium);
                                            $scope.Quotes_Data[n].AnnualPremium = Math.round($scope.Quotes_Data[n].OriginalannualPremium);
                                            $scope.Quotes_Data[n].MonthlyPremium = Math.round($scope.Quotes_Data[n].OriginalmonthlyPremium);
                                            for (var q = 0; q < $scope.userselectionrider.length; q++) {
                                                if ($scope.Quotes_Data[n].PlanId == $scope.userselectionrider[q].PlanId) {
                                                    $scope.Quotes_Data[n].Premium = Math.round($scope.Quotes_Data[n].Premium + $scope.userselectionrider[q].RiderPremium);
                                                    $scope.Quotes_Data[n].AnnualPremium = Math.round($scope.Quotes_Data[n].AnnualPremium + $scope.userselectionrider[q].AnnualPremium);
                                                    $scope.Quotes_Data[n].MonthlyPremium = Math.round($scope.Quotes_Data[n].MonthlyPremium + $scope.userselectionrider[q].RiderMonthlyPremium);
                                                }
                                            }
                                        }
                                    }
                                }

                                var rideridxlength = $filter('filter')($scope.userselectionrider, function (d1) { return d1.PlanId == $scope.Quotes_Data[n].PlanId });
                                $scope.Quotes_Data[n].FreeRiderlengthForMobile = rideridxlength.length;
                            }
                        }
                    }
                    $scope.showriderpremium = true;
                }
                else {
                    rider.SelectedSAPercentage = rider.SelectedSAPercentage - 1;
                    rider.SelectedSumAssured = parseInt($scope.quotesrequest.Requests[0].SumAssured * rider.SelectedSAPercentage / 100);
                    $scope.TermIncomeOptionPlan(rider, item, flag, p, i);
                }
            });
            return item;
        }
        $scope.InvestmentRiderFN = function (rider, value) {
            if (rider != undefined) {
                if (value == true) {
                    $scope.InvestmentRiderArray.push(rider);
                }
                else {
                    var idx = $scope.InvestmentRiderArray.indexOf(rider);
                    if (idx > -1) {
                        $scope.InvestmentRiderArray.splice(idx, 1);
                    }
                }
            }
            var filteredplan = $scope.Quotes_Data_Plan;
            for (var i = 0; i < $scope.InvestmentRiderArray.length; i++) {
                if ($scope.InvestmentRiderArray[i].Code == 3) {
                    filteredplan = $filter('filter')(filteredplan, function (d) { return d.AccidentalDisability == true });
                }
                else if ($scope.InvestmentRiderArray[i].Code == 4) {
                    filteredplan = $filter('filter')(filteredplan, function (d) { return d.AccidentalDeath == true });
                }
                else if ($scope.InvestmentRiderArray[i].Code == 6) {
                    filteredplan = $filter('filter')(filteredplan, function (d) { return d.CriticalIllness == true });
                }
                else if ($scope.InvestmentRiderArray[i].Code == 15) {
                    filteredplan = $filter('filter')(filteredplan, function (d) { return d.PartialWithdrawl == true });
                }
                else if ($scope.InvestmentRiderArray[i].Code == 12) {
                    filteredplan = $filter('filter')(filteredplan, function (d) { return d.FamilyIncomeBenefit == true });
                }
                else if ($scope.InvestmentRiderArray[i].Code == 7) {
                    filteredplan = $filter('filter')(filteredplan, function (d) { return d.WaiverOfPremium == true });
                }
                else if ($scope.InvestmentRiderArray[i].Code == 2) {
                    filteredplan = $filter('filter')(filteredplan, function (d) { return d.CancerCover == true });
                }
                else if ($scope.InvestmentRiderArray[i].Code == 5) {
                    filteredplan = $filter('filter')(filteredplan, function (d) { return d.PersonalAccidentCover == true });
                }
            }
            //$scope.Quotes_Data = [];
            $scope.ulipplan = false;
            $scope.guaranteedplan = false;
            var ulipplandata = [];
            var guaranteedplandata = [];
            for (var q = 0; q < filteredplan.length; q++) {
                if (filteredplan[q].IsUlip) {
                    $scope.ulipplan = true;
                    ulipplandata.push(filteredplan[q]);
                }
                else if (!filteredplan[q].IsUlip) {
                    $scope.guaranteedplan = true;
                    guaranteedplandata.push(filteredplan[q]);
                }
            }
            if ($scope.ulipplan == false) {
                $scope.activeMonTab = 2;
                $scope.plantypemodel = 2;
                $scope.term1monthlypaymodeCss = '';
                $scope.term1yearlypaymodeCss = 'activeclass1';
                $scope.Quotes_Data = guaranteedplandata;
            }
            else if ($scope.guaranteedplan == false) {
                $scope.activeMonTab = 1;
                $scope.plantypemodel = 1;
                $scope.term1monthlypaymodeCss = 'activeclass1';
                $scope.term1yearlypaymodeCss = '';
                $scope.Quotes_Data = ulipplandata;
            }
            else {
                if ($scope.plantypemodel == 1) {
                    $scope.Quotes_Data = ulipplandata;
                }
                else {
                    $scope.Quotes_Data = guaranteedplandata;
                }
            }
            if ($scope.Quotes_Data)
                $scope.totalplanlength = $scope.Quotes_Data.length;
        }

        $scope.AddonAvailableFn = function () {
            if ($scope.ShowleftpanelAddon != true) {
                $scope.ShowleftpanelAddon = true;
                if ($scope.termrider == undefined || $scope.termrider.length == 0) {
                    var riderdata = FeatureService.GetRiderData($scope.AgeInMonths);
                    riderdata.then(function (getRiderData) {
                        $scope.termrider = angular.fromJson(getRiderData.data);
                        for (var i = 0; i < $scope.termrider.length; i++) {
                            if ($scope.termrider[i].RiderCode == 19) {
                                $scope.increasingTooltip = $scope.termrider[i].RiderDescription;
                            }
                            $scope.TermleftpanelDissablefn();
                        }
                    });
                }
                else {
                    $scope.TermleftpanelDissablefn();
                }
            }
            else {
                $scope.ShowleftpanelAddon = false;
            }
        }

        //joint life function start
        $scope.openjointlifepopup = function (item) {
            if (!$rootScope.jointlifemodel[item.PlanId]) {
                $scope.termjointlifeUrl = '../HomePage/Template/TermJointLife.html';
                $scope.Spousenosmokeclass = "lmbutton activebt";
                $scope.Spousesmokeclass = "lmbutton";
                $rootScope.scrollhide = 'scollClass';
                $scope.Spousesmoker = "no";
                $scope.SpouseOccupation = 'HouseWife';
                $scope.SpouseEducationModel = 'Graduate';
                jointlifeparentplan = item;
                $scope.ShowTermJointLifePopup = true;
                $scope.ShowTermJointLifeform = true;
                $rootScope.jointlifemodel[item.PlanId] = true;
            }
            else {
                $scope.SpouseQuotesrequest.Requests[0].IsJointLifeEnable = false;
                var saveJointData = FeatureService.SaveRequirementsJointlife($scope);
                saveJointData.then(function (pl) {
                });
                $scope.ShoweditTermJointLifeform = false;
                $rootScope.jointlifemodel[item.PlanId] = false;
                $scope.JointLifeQuote = undefined;
            }
        }
        $scope.editjointlifeForm = function (item) {
            $scope.ShoweditTermJointLifeform = true;
            $scope.ShowTermJointLifePopup = true;
            $scope.ShowTermJointLifeform = true;
        }
        $scope.CloseJointLifePopup = function () {
            $scope.showjointlifeloader = false;
            $scope.ShowTermJointLifePopup = false;
            $rootScope.jointlifemodel[jointlifeparentplan.PlanId] = false;
            $rootScope.scrollhide = '';
            $scope.ShoweditTermJointLifeform = false;
        }
        $scope.spousedatetest = function (id) {
            $scope.spousedatespecificmsg = '';
            $scope.testdatespecific(id, $scope.SpouseIGdate, $scope.SpouseIGmonth, $scope.SpouseIGyear);
            $scope.spousedatespecificmsg = $scope.datespecificmsg;
            $scope.datespecificmsg = '';
            if ($scope.spousedatespecificmsg == '') {
                var yy = $scope.SpouseIGdate + '-' + $scope.SpouseIGmonth + '-' + $scope.SpouseIGyear;
                $scope.spouseage = $scope.getAge(yy);
                if ($scope.spouseage < 18 || $scope.spouseage > 65) {
                    $scope.spousedateerror = true;
                }
                else {
                    $scope.spousedateerror = false;
                }
                if ($scope.spouseage > $scope.AgeTerm) {
                    $scope.policytermMsg = true;
                }
            }
        }
        $scope.JointLifebacktoquotes = function () {
            $scope.SpouseQuotesrequest.Requests[0].IsJointLifeEnable = false;
            var saveJointData = FeatureService.SaveRequirementsJointlife($scope);
            saveJointData.then(function (pl) {
                if ($scope.device == "Mobile") {
                    if ($scope.gaProduct == "TermNew") {
                        $rootScope.loadcardtemplate = '../HomePage/Template/TermMobile.html';
                        $rootScope.hidedetails = false;
                    }
                    else {
                        $rootScope.loadcardtemplate = '../HomePage/Template/TermMobile.html';
                        $rootScope.hidedetails = false;
                    }
                }
            });

        }
        $scope.JointLifequotes = function () {
            if ($scope.SpouseIGdate != undefined && $scope.SpouseIGdate != null && $scope.SpouseIGmonth != undefined && $scope.SpouseIGmonth != null && $scope.SpouseIGyear != undefined && $scope.SpouseIGyear != null && $scope.spousedateerror != true && $scope.spousedatespecificmsg == '') {
                $scope.dateerror = false;
                $scope.SpouseQuotesrequest = angular.copy($scope.quotesrequest);
                if ($scope.quotesrequest.Requests[0].IsPremiumPayingTerm != true && $scope.quotesrequest.Requests[0].PlanTypeId != 24) {
                    var policyterm = angular.copy(99 - $scope.spouseage);
                    var payingterm = angular.copy(99 - $scope.spouseage);
                    if ($scope.quotesrequest.Requests[0].PolicyTerm > policyterm) {
                        $scope.quotesrequest.Requests[0].PolicyTerm = policyterm;
                        $scope.PolicyTermPeriod = $scope.quotesrequest.Requests[0].PolicyTerm + $scope.AgeTerm;
                    }
                    if ($scope.quotesrequest.Requests[0].PremiumPayingTerm > payingterm) {
                        $scope.quotesrequest.Requests[0].PremiumPayingTerm = payingterm;
                        $scope.LimitedPayingTerm = $scope.quotesrequest.Requests[0].PremiumPayingTerm + $scope.AgeTerm;
                    }
                    if ($scope.SpouseQuotesrequest.Requests[0].PolicyTerm != $scope.quotesrequest.Requests[0].PolicyTerm) {
                        $scope.SpouseQuotesrequest.Requests[0].PolicyTerm = policyterm;
                        $scope.SpouseQuotesrequest.Requests[0].PremiumPayingTerm = payingterm;
                        jointlifeparentplan.PayingMode = "Monthly";
                        var maindata = QuoteService.Quotes_Service($scope.quotesrequest, $scope);
                        maindata.then(function (maindata) {
                            termquotesdetails(maindata);
                            jointlifeparentplan = $filter('filter')($scope.Quotes_Data, function (d) { return d.PlanId == jointlifeparentplan.PlanId })[0];
                            Addjointlifeplan();
                        });
                    }
                }
                else if ($scope.quotesrequest.Requests[0].IsPremiumPayingTerm == true) {
                    if ($scope.quotesrequest.Requests[0].PlanTypeId != 24) {
                        $scope.SpouseQuotesrequest.Requests[0].PolicyTerm = angular.copy(75 - $scope.spouseage);
                    }
                    else {
                        $scope.SpouseQuotesrequest.Requests[0].PolicyTerm = angular.copy($scope.PolicyTermPeriod - $scope.spouseage);
                    }
                    if ((jointlifeparentplan.PremiumPayingTerm + $scope.AgeTerm) == 60) {
                        $scope.SpouseQuotesrequest.Requests[0].PremiumPayingTerm = angular.copy(60 - $scope.spouseage);
                    }
                    else if ((jointlifeparentplan.PolicyTerm - jointlifeparentplan.PremiumPayingTerm) == 5) {
                        $scope.SpouseQuotesrequest.Requests[0].PremiumPayingTerm = angular.copy($scope.SpouseQuotesrequest.Requests[0].PolicyTerm - 5);
                    }
                    else {
                        $scope.SpouseQuotesrequest.Requests[0].PremiumPayingTerm = jointlifeparentplan.PremiumPayingTerm;
                    }
                }
                $scope.showjointlifeloader = true;
                var yy = $scope.SpouseIGdate + '-' + $scope.SpouseIGmonth + '-' + $scope.SpouseIGyear;
                $scope.SpouseQuotesrequest.IGQuoteId = $scope.quotes_userdata.ChildCPID;
                $scope.SpouseQuotesrequest.Requests[0].ChildCPID = undefined;
                if ($scope.Spousesmoker == 'no') {
                    $scope.SpouseQuotesrequest.Requests[0].IsTobacco = false;
                }
                else {
                    $scope.SpouseQuotesrequest.Requests[0].IsTobacco = true;
                }
                $scope.SpouseQuotesrequest.Requests[0].ParentCPID = angular.copy($scope.quotesrequest.IGQuoteId);
                $scope.SpouseQuotesrequest.Requests[0].PlanID = [jointlifeparentplan.PlanId];
                $scope.SpouseQuotesrequest.Requests[0].DateOfBirth = JSON.parse(DataFactory.stringifyWcf(yy));
                $scope.SpouseQuotesrequest.Requests[0].Gender = 'F';
                var WifeSA = $scope.quotesrequest.Requests[0].SumAssured / 2;
                if (WifeSA < 2500000 || $scope.SpouseEducationModel == 'Undergraduate') {
                    WifeSA = 2500000;
                }
                else if (WifeSA > 5000000) {
                    WifeSA = 5000000;
                }
                WifeSA = parseInt(WifeSA / 100000) * 100000;
                $scope.SpouseQuotesrequest.Requests[0].SumAssured = WifeSA;
                if ($scope.SpouseQuotesrequest.IGQuoteId == 0) {
                    $scope.SpouseQuotesrequest.Requests[0].IsJointLifeEnable = true;
                    var saveJointData = FeatureService.SaveRequirementsJointlife($scope);
                    saveJointData.then(function (pl) {
                        $scope.SpouseQuotesrequest.IGQuoteId = JSON.parse(angular.toJson(pl.data.IGQuoteId));
                        $scope.quotes_userdata.ChildCPID = JSON.parse(angular.toJson(pl.data.IGQuoteId));
                        $scope.otpFn(1, 'spouse');
                    });
                }
                else {
                    JointLifedata();
                }
            }
            else {
                if ($scope.spousedatespecificmsg == undefined || $scope.spousedatespecificmsg == '' || $scope.spousedatespecificmsg == null) {
                    $scope.dateerror = true;
                }
                else {
                    $scope.dateerror = false;
                }
            }
        }
        $scope.JointLifequotesedit = function () {
            if ($scope.ShowTermJointPT == true) {
                $scope.SpouseQuotesrequest.Requests[0].PolicyTerm = $scope.Spousecoverage - $scope.spouseage;
            }
            else {
                $scope.SpouseQuotesrequest.Requests[0].SumAssured = $scope.SpouseCover;
            }
            $scope.showjointlifeloader = true;
            JointLifedata()
        }
        function JointLifedata() {
            $scope.SpouseQuotesrequest.Requests[0].IsJointLifeEnable = true;
            var jointlifeData1 = QuoteService.Quotes_Service($scope.SpouseQuotesrequest, $scope);
            jointlifeData1.then(function (jointlifeData1) {
                $scope.SpouseMdrider = [];
                spouseselectedrider = [];
                $scope.JointLifeQuote = jointlifeData1.data.Quotes;
                $scope.showjointlifeloader = false;
                if ($scope.JointLifeQuote.length > 0) {
                    if ($scope.device == "Mobile") {
                        $rootScope.loadcardtemplate = '../HomePage/Template/TermjointlifeMobile.html';
                        $rootScope.hidedetails = true;
                        $scope.Quotes_Data = [];
                        $scope.Quotes_Data.push(jointlifeparentplan);
                    }
                    $scope.JointLifeQuote[0].EPChildQuoteId = $scope.SpouseQuotesrequest.IGQuoteId;
                    for (var i = 0; i < $scope.JointLifeQuote.length; i++) {
                        $scope.JointLifeQuote[i].IncludedRiderlist = [];
                        var count = $scope.JointLifeQuote[i].AvailableRiders.length;
                        $scope.JointLifeQuote[i].RiderlengthForMobile = count + $scope.JointLifeQuote[i].ToolTipWaiveOff.length;
                        $scope.JointLifeQuote[i].OriginalannualPremium = $scope.JointLifeQuote[i].AnnualPremium;
                        $scope.JointLifeQuote[i].OriginalmonthlyPremium = $scope.JointLifeQuote[i].MonthlyPremium;
                        $scope.JointLifeQuote[i].OriginalPremium = $scope.JointLifeQuote[i].AnnualPremium;
                        $scope.JointLifeQuote[i].PayingMode = jointlifeparentplan.PayingMode;
                        if (jointlifeparentplan.PayingMode == "Monthly") {
                            $scope.JointLifeQuote[i].Premium = $scope.JointLifeQuote[i].MonthlyPremium;
                            $scope.JointLifeQuote[i].OriginalPremium = $scope.JointLifeQuote[i].MonthlyPremium;
                        }
                        if ($scope.JointLifeQuote[i].AvailableRiders.length > 0) {
                            for (var q = 0; q < $scope.JointLifeQuote[i].AvailableRiders.length; q++) {
                                if (jointlifeparentplan.PayingMode == "Monthly") {
                                    $scope.JointLifeQuote[i].AvailableRiders[q].RiderPremium = Math.round($scope.JointLifeQuote[i].AvailableRiders[q].RiderMonthlyPremium);
                                }
                                if ($scope.SpouseEducationModel == 'Undergraduate' && $scope.JointLifeQuote[i].AvailableRiders[q].RiderId == 3) {
                                    $scope.JointLifeQuote[i].Premium = $scope.JointLifeQuote[i].Premium + $scope.JointLifeQuote[i].AvailableRiders[q].RiderPremium;
                                    //$scope.JointLifeQuote[i].OriginalPremium = $scope.JointLifeQuote[i].Premium;
                                    spouseselectedrider.push($scope.JointLifeQuote[i].AvailableRiders[q]);
                                    $scope.SpouseMdrider[$scope.JointLifeQuote[i].PlanId + ',' + $scope.JointLifeQuote[i].AvailableRiders[q].RiderId] = true;
                                    $scope.JointLifeQuote[i].Riderlistforbuy = spouseselectedrider;
                                    //    $scope.JointLifeQuote[i].MonthlyPremium = $scope.JointLifeQuote[i].MonthlyPremium + $scope.JointLifeQuote[i].AvailableRiders[q].RiderMonthlyPremium;
                                    //    $scope.JointLifeQuote[i].AnnualPremium = $scope.JointLifeQuote[i].AnnualPremium + $scope.JointLifeQuote[i].AvailableRiders[q].AnnualPremium;
                                }
                            }
                        }
                    }
                    $scope.ShowTermJointLifeform = false;
                    $scope.ShoweditTermJointLifeform = false;
                    $scope.ShowTermJointLifequote = true;
                    for (var a = 0; a < $scope.Quotes_Data.length > 0; a++) {
                        if ($scope.Quotes_Data[a].PlanId == jointlifeparentplan.PlanId) {
                            $scope.Quotes_Data[a].joinlifeclass = 'jointlifecss';
                            $scope.Quotes_Data[a].marclass = 'maxmargtop jointlifecss';
                        }
                    }
                    Addjointlifeplan();
                }
                $scope.ShowTermJointLifePopup = false;
                $rootScope.scrollhide = '';
                $scope.ShowTermJointPTcover = false;
                $scope.ShowTermJointPT = false;
                $scope.ShowTermJointSA = false;
            });
        }
        $scope.SpouseRidercalulationfrterm = function (rider, flag) {
            if (flag == undefined) {
                if (rider.RiderId != 3 || $scope.SpouseEducationModel != 'Undergraduate') {
                    var id = spouseselectedrider.indexOf($filter('filter')(spouseselectedrider, function (d) { return d.RiderId == rider.RiderId })[0]);
                    if (id > -1) {
                        spouseselectedrider.splice(id, 1);
                    }
                    else {
                        spouseselectedrider.push(rider);
                    }
                    for (var i = 0; i < $scope.JointLifeQuote.length; i++) {
                        $scope.JointLifeQuote[i].Premium = $scope.JointLifeQuote[i].OriginalPremium;
                        $scope.JointLifeQuote[i].MonthlyPremium = $scope.JointLifeQuote[i].OriginalmonthlyPremium;
                        $scope.JointLifeQuote[i].AnnualPremium = $scope.JointLifeQuote[i].OriginalannualPremium;
                        for (var a = 0; a < spouseselectedrider.length; a++) {
                            if ($scope.JointLifeQuote[i].PlanId == spouseselectedrider[a].PlanId) {
                                $scope.JointLifeQuote[i].Premium = $scope.JointLifeQuote[i].Premium + spouseselectedrider[a].RiderPremium;
                                $scope.JointLifeQuote[i].MonthlyPremium = $scope.JointLifeQuote[i].MonthlyPremium + spouseselectedrider[a].RiderMonthlyPremium;
                                $scope.JointLifeQuote[i].AnnualPremium = $scope.JointLifeQuote[i].AnnualPremium + spouseselectedrider[a].AnnualPremium;
                            }
                        }
                    }
                    $scope.JointLifeQuote[0].Riderlistforbuy = spouseselectedrider;
                    Addjointlifeplan();
                }
            }
            if (flag == 'edit') {
                $scope.jointliferiderslider = rider;
                $scope.JointLifeAddonsArray = [];
                $rootScope.scrollhide = 'scollClass';
                $scope.TermSliderpopupSrc = '../HomePage/Template/TermSliderpopup.html';
                $scope.TERMJointlifeRider = true;
                $scope.showriderpremium = true;
                var i = rider.MinSumAssured;
                var customevalue = rider.SelectedSumAssured == 0 ? rider.MaxSumAssured : rider.SelectedSumAssured;
                if (rider.IsMinimumSA == 1) {
                    customevalue = rider.SelectedSumAssured == 0 ? rider.MinSumAssured : rider.SelectedSumAssured;
                }
                var riderrange = rider.SliderRange;
                while (i <= rider.MaxSumAssured) {
                    var text = TermFactory.ValueToText(i);
                    if (customevalue == i) {
                        $scope.TermjointAddonSA = [];
                        $scope.TermjointAddonSA.AddonsSumAssuredText = text;
                        $scope.TermjointAddonSA.AddonsSumAssuredvalue = i;
                    }
                    $scope.JointLifeAddonsArray.push({ 'AddonsSumAssuredText': text, 'AddonsSumAssuredvalue': i });
                    if (i > 9999999 && rider.SliderRange == 50000) {
                        riderrange = 100000;
                    }
                    i = i + riderrange;
                }
            }
        }
        $scope.TERMJointlifeRiderClose = function () {
            $scope.TERMJointlifeRider = false;
            $rootScope.scrollhide = '';
        }
        $scope.termjointlifeaddonchange = function () {
            if ($scope.TermjointAddonSA != undefined && $scope.TermjointAddonSA != null && $scope.TermjointAddonSA != '') {
                $scope.showriderpremium = false;
                $scope.jointliferiderslider.SelectedSumAssured = $scope.TermjointAddonSA.AddonsSumAssuredvalue;
                $scope.SpouseQuotesrequest.Requests[0].riderList = angular.copy(spouseselectedrider);
                var id = spouseselectedrider.indexOf($filter('filter')(spouseselectedrider, function (d) { return d.RiderId == $scope.jointliferiderslider.RiderId })[0]);
                if (id > -1) {
                    spouseselectedrider.splice(id, 1);
                }
                var riderdata = FeatureService.RiderPremiumCalculation($scope, $scope.jointliferiderslider, $scope.JointLifeQuote[0], $scope.SpouseQuotesrequest);
                riderdata.then(function (data) {
                    $scope.showriderpremium = true;
                    var responseriderlist = data.data[0].AvailableRiders;
                    if ($scope.JointLifeQuote[0].MonthlyPremium > 0 && $scope.JointLifeQuote[0].PayingMode.toLowerCase() == 'monthly') {
                        for (var q = 0; q < data.data[0].AvailableRiders.length; q++) {
                            data.data[0].AvailableRiders[q].RiderPremium = Math.round(data.data[0].AvailableRiders[q].RiderMonthlyPremium);
                        }
                    }
                    var ridertemp = $filter('filter')(data.data[0].AvailableRiders, function (d) { return d.RiderId == $scope.jointliferiderslider.RiderId })[0];
                    spouseselectedrider.push(ridertemp);
                    $scope.jointliferiderslider = ridertemp;
                    for (var i = 0; i < $scope.JointLifeQuote.length; i++) {
                        $scope.JointLifeQuote[i].Premium = $scope.JointLifeQuote[i].OriginalPremium;
                        $scope.JointLifeQuote[i].MonthlyPremium = $scope.JointLifeQuote[i].OriginalmonthlyPremium;
                        $scope.JointLifeQuote[i].AnnualPremium = $scope.JointLifeQuote[i].OriginalannualPremium;
                        for (var a = 0; a < spouseselectedrider.length; a++) {
                            if ($scope.JointLifeQuote[i].PlanId == spouseselectedrider[a].PlanId) {
                                $scope.JointLifeQuote[i].Premium = $scope.JointLifeQuote[i].Premium + spouseselectedrider[a].RiderPremium;
                                $scope.JointLifeQuote[i].MonthlyPremium = $scope.JointLifeQuote[i].MonthlyPremium + spouseselectedrider[a].RiderMonthlyPremium;
                                $scope.JointLifeQuote[i].AnnualPremium = $scope.JointLifeQuote[i].AnnualPremium + spouseselectedrider[a].AnnualPremium;
                                for (var q = 0; q < $scope.JointLifeQuote[i].AvailableRiders.length; q++) {
                                    if ($scope.JointLifeQuote[i].AvailableRiders[q].RiderId == spouseselectedrider[a].RiderId) {
                                        $scope.JointLifeQuote[i].AvailableRiders[q] = spouseselectedrider[a];
                                    }
                                }
                            }
                        }
                    }
                    $scope.JointLifeQuote[0].Riderlistforbuy = spouseselectedrider;
                    Addjointlifeplan();
                });
            }
        }
        function Addjointlifeplan(item) {
            if (item != undefined) {
                jointlifeparentplan = item;
            }
            $scope.ShowTotalJointLifePremium = jointlifeparentplan.Premium + $scope.JointLifeQuote[0].Premium;
            $scope.ShowTotalJointLifeMPremium = jointlifeparentplan.MonthlyPremium + $scope.JointLifeQuote[0].MonthlyPremium;
            $scope.ShowTotalJointLifeYPremium = jointlifeparentplan.AnnualPremium + $scope.JointLifeQuote[0].AnnualPremium;
        }
        $scope.spousedateKey = function (flag, event) {
            if (flag == 1 && $scope.SpouseIGdate != undefined && $scope.SpouseIGdate != null && $scope.SpouseIGdate != "" && $scope.SpouseIGdate.length == 2) {
                $scope.dd2 = true;
                $scope.userdd01 = 0;
            }
            else if (flag == 2 && $scope.SpouseIGmonth != undefined && $scope.SpouseIGmonth != null && $scope.SpouseIGmonth != "" && $scope.SpouseIGmonth.length == 2) {
                $scope.dd3 = true;
                $scope.userdd11 = 0;
            }
            else if (flag == 3 && $scope.SpouseIGyear != undefined && $scope.SpouseIGyear != null && $scope.SpouseIGyear != "" && $scope.SpouseIGyear.length == 4) {
                $scope.userdd21 = 0;
            }
            else if (flag == 2 && event.keyCode === 8 && $scope.SpouseIGmonth == undefined) {
                if ($scope.userdd11 == 1) {
                    $scope.userdd11 = 0;
                    $scope.dd1 = true;
                }
                else {
                    $scope.userdd11 = 1;
                }
            }
            else if (flag == 3 && event.keyCode === 8 && $scope.SpouseIGyear == undefined) {
                if ($scope.userdd21 == 1) {
                    $scope.userdd21 = 0;
                    $scope.dd2 = true;
                }
                else {
                    $scope.userdd21 = 1;
                }
            }
        }
        $scope.Closejointlifevalue = function () {
            $scope.ShowTermJointPTcover = false;
            $scope.ShowTermJointPT = false;
            $scope.ShowTermJointSA = false;
            $rootScope.scrollhide = '';
        }
        $scope.jointlifevaluechange = function (id) {
            $scope.Spousecoveragelist = [];
            var age = $scope.spouseage + 10;
            if ($scope.SpouseQuotesrequest.Requests[0].PremiumPayingTerm == 10) {
                var age = $scope.spouseage + 15;
            }
            $scope.Spousecoverage = $scope.SpouseQuotesrequest.Requests[0].PolicyTerm + $scope.spouseage;
            if ($scope.quotesrequest.Requests[0].PlanTypeId != 24) {
                for (j = age; j <= 99; j++) {
                    $scope.Spousecoveragelist.push({ Name: j + ' Year', value: j })
                }
            }
            if (id == 'PT') {
                $scope.ShowTermJointPT = true;
            }
            else {
                $scope.SpouseCover = $scope.SpouseQuotesrequest.Requests[0].SumAssured;
                $scope.SpouseCoverlist = [];
                $scope.ShowTermJointSA = true;
                var WifeSA = $scope.quotesrequest.Requests[0].SumAssured / 2;
                if ($scope.SpouseEducationModel == 'Undergraduate') {
                    WifeSA = 2500000;
                }
                else if (WifeSA > 5000000) {
                    WifeSA = 5000000;
                }
                WifeSA = parseInt(WifeSA / 100000) * 100000;
                for (i = 2500000; i <= WifeSA;) {
                    var sumassuredvalue = i / 100000 + ' Lacs';
                    $scope.SpouseCoverlist.push({ value: i, text: sumassuredvalue });
                    i = i + 100000;
                }
            }
            $scope.ShowTermJointPTcover = true;
            $rootScope.scrollhide = 'scollClass';

        }
        function TermPTandPPTDiy() {
            if ($scope.AgeTerm <= 45) {
                $scope.DIYPPT1 = 50;
                $scope.DIYPPT3 = 70;
                $scope.DIYPPT2 = 60;
            }
            else if ($scope.AgeTerm > 45 && $scope.AgeTerm <= 55) {
                $scope.DIYPPT3 = 70;
                $scope.DIYPPT1 = 60;
                $scope.DIYPPT2 = 65;
            }
            else if ($scope.AgeTerm > 55 && $scope.AgeTerm <= 65) {
                $scope.DIYPPT1 = 70;
                $scope.DIYPPT2 = 75;
                $scope.DIYPPT3 = 80;
            }
            if ($scope.AgeTerm <= 55) {
                $scope.DIYPT1 = 60;
                $scope.DIYPT2 = 80;
                $scope.DIYPT3 = 100;
            }
            else if ($scope.AgeTerm > 55 && $scope.AgeTerm <= 65) {
                $scope.DIYPT1 = 70;
                $scope.DIYPT2 = 85;
                $scope.DIYPT3 = 100;
            }
        }
        //joint life function end
        $scope.GetPincodeFn = function (cityid, flag) {
            $scope.PincodeArray = [];
            if (cityid != undefined && cityid != null) {
                if (flag == 'edit') {
                    cityid = cityid.cityid.split(',')[0].toString();
                }
                if (cityid != undefined) {
                    var pincode = CommonService.GetPincodeList(cityid);
                    pincode.then(function (result) {
                        $scope.PincodeArray = angular.fromJson(result.data);
                        $scope.pincode = undefined;
                        $scope.PincodeText = undefined;
                        if ($scope.quotesrequest != undefined && $scope.quotesrequest != null) {
                            $scope.quotesrequest.Requests[0].Pincode = undefined;
                        }
                    });
                }
            }
        }
        function Investmentquotesdetail() {
            var maxpol = 0;
            var polarray = [];
            var sortarray = [];
            var mixarr = [];
            $scope.chargeArray = [];
            $scope.ulipplan = false;
            $scope.guaranteedplan = false;
            var income = $scope.quotes_userdata.Requests[0].Amount.toString().split(",");
            $scope.txtActualIncomeInv = income[0];

            if ($scope.Quotes_Data != undefined) {

                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    if (mixarr.indexOf($scope.Quotes_Data[i].PlanId) == -1) {
                        mixarr.push($scope.Quotes_Data[i].PlanId);
                        var jso = {
                            Insurer: $scope.Quotes_Data[i].InsurerName, InsurerLogo: $scope.Quotes_Data[i].InsurerLogo, Planname: $scope.Quotes_Data[i].Bundles[0].Name, PremiumAllocationCharge: $scope.Quotes_Data[i].PremiumAllocationCharge,
                            PolicyAdministrationCharge: $scope.Quotes_Data[i].PolicyAdministrationCharge, FundManagementCharge: $scope.Quotes_Data[i].FundManagementCharge,
                            BenefitTopUp: $scope.Quotes_Data[i].BenefitTopUp, MortalityCharge: $scope.Quotes_Data[i].MortalityCharge,
                            BenefitLoyaltyAdditions: $scope.Quotes_Data[i].BenefitLoyaltyAdditions, SwitchingCharge: $scope.Quotes_Data[i].SwitchingCharge,
                            BenefitInvestmentStrategies: $scope.Quotes_Data[i].BenefitInvestmentStrategies, PremiumRedirectioncharges: $scope.Quotes_Data[i].PremiumRedirectioncharges, Isulip: $scope.Quotes_Data[i].IsUlip
                        };
                        $scope.chargeArray.push(jso);
                    }
                    if ($scope.Quotes_Data[i].IsUlip == true) {
                        $scope.ulipplan = true;
                    }
                    if ($scope.Quotes_Data[i].IsUlip == false) {
                        $scope.guaranteedplan = true;
                    }
                    $scope.Quotes_Data[i].ids = i;
                    $scope.Quotes_Data[i].compareshow = false;
                    if (polarray.indexOf($scope.Quotes_Data[i].PremiumPayingTerm) == -1) {
                        polarray.push($scope.Quotes_Data[i].PremiumPayingTerm);
                    }
                    if ($scope.Quotes_Data[i].PremiumPayingTerm > maxpol) {
                        maxpol = $scope.Quotes_Data[i].PremiumPayingTerm;
                    }

                    if ($scope.Quotes_Data[i].PlanBenefits != undefined) {
                        var x = $scope.Quotes_Data[i].PlanBenefits.split("</br>");

                    }
                    $scope.Quotes_Data[i].PlanBenefitstext = x;
                }
                polarray.sort(function (a, b) { return b - a });


                for (var j = 0; j < polarray.length; j++) {
                    var sortarray1 = [];
                    for (var i = 0; i < $scope.Quotes_Data.length; i++) {

                        if ($scope.Quotes_Data[i].PremiumPayingTerm == polarray[j]) {
                            sortarray1.push($scope.Quotes_Data[i]);
                        }
                    }
                    sortarray1.sort(function (a, b) {
                        return parseFloat(a.HistoricalMaturityBenefit) - parseFloat(b.HistoricalMaturityBenefit);
                    });
                    for (var k = sortarray1.length - 1; k >= 0; k--) {
                        sortarray.push(sortarray1[k]);
                    }

                }
                $scope.Quotes_Data = sortarray;

                for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                    $scope.Quotes_Data[i].EPRank = i;
                    $scope.Quotes_Data[i].OriginalPremium = $scope.Quotes_Data[i].Premium;
                    $scope.Quotes_Data[i].OriginalannualPremium = $scope.Quotes_Data[i].Premium;
                    $scope.Quotes_Data[i].OriginalmonthlyPremium = $scope.Quotes_Data[i].Premium;
                }
            }
            $scope.orderByField = "Rank";
            $scope.sortkey = "Rank";


            $scope.Quotes_Data_Plan = angular.copy($scope.Quotes_Data);
            DataFactory.GetTotalPlan($scope);
            $scope.Quotes_Data = [];
            if ($scope.activeMonTab == 1) {
                for (var q = 0; q < $scope.Quotes_Data_Plan.length; q++) {
                    if ($scope.Quotes_Data_Plan[q].IsUlip) {
                        $scope.Quotes_Data.push($scope.Quotes_Data_Plan[q]);
                    }
                }
            }
            else {
                for (var q = 0; q < $scope.Quotes_Data_Plan.length; q++) {
                    if (!$scope.Quotes_Data_Plan[q].IsUlip) {
                        $scope.Quotes_Data.push($scope.Quotes_Data_Plan[q]);
                    }
                }
            }

            $scope.InvestmentRefineChips = [];
            $scope.InvestmentRiderArray = [];
            if ($scope.nontermfeature.length == 0 || $scope.nontermfeature == undefined) {
                $scope.InvestmentRiderFN();
            }
            for (var i = 0; i < $scope.nonTermRiderDetails.length; i++) {
                if ($scope.nontermfeature[$scope.nonTermRiderDetails[i].Code] == true) {
                    $scope.InvestmentRefineChips.push($scope.nonTermRiderDetails[i]);
                    $scope.InvestmentRiderFN($scope.nonTermRiderDetails[i], true)
                }
            }
            $scope.nontermgetValue = CommonFactory.nontermriskLevel($scope);
            if ($scope.IsGuaranteed == true || $rootScope.investmentdata.LandingURL.indexOf("investment-plans/guaranteed") != -1 || $rootScope.investmentdata.LandingURL.indexOf("/investment-trd") != -1) {
                $scope.guaranteedplan = true;

                $scope.nonTermTab(2);
            }
            $scope.setPixel($scope.IGquoteId, $scope.productID);
            for (var i = 0; i < $scope.Quotes_Data.length; i++) {
                if ($scope.Quotes_Data[i].InsurerId == 19 && $scope.userMobileNumber != undefined && $scope.userMobileNumber != null && $scope.userMobileNumber != "") {
                    var mbl = angular.copy($scope.userMobileNumber);
                    var mblnum = mbl.toString();
                    if (mblnum.length == 10) {
                        $scope.iciciassociatenum = $scope.DOB.split("-")[2] + mblnum[5] + mblnum[6] + mblnum[7] + mblnum[8] + mblnum[9];

                       // icicicookiefn();
                    }
                }
            }
            if ($scope.Quotes_Data)
                $scope.totalplanlength = $scope.Quotes_Data.length;
        }
        $scope.PincodevalidationFn = function () {
            if ($scope.PincodeText == undefined || $scope.PincodeText == null || $scope.PincodeText == '') {
                $scope.pincodeError = false;
            }
        }
        $scope.opendiabeticpopup = function (item) {
            $scope.MaxItem = item;
            $scope.showdiabeticpopleftpanel = true;
        }
        $scope.DiabeticEditFn = function (id) {
            $scope.showdiabeticpopleftpanel = false;
            if (id == 'yes') {
                if ($scope.mdrider[$scope.MaxItem.PlanId + ',' + 3] == true) {
                    $scope.mdrider[$scope.MaxItem.PlanId + ',' + 3] = false;
                    Termrideritem = $filter('filter')($scope.MaxItem.AvailableRiders, function (d) { return d.RiderId == 3 });
                    $scope.ridercalulationfrterm(Termrideritem[0], 3, $scope.MaxItem, undefined, false);
                }
                if ($scope.mdrider[$scope.MaxItem.PlanId + ',' + 6] == true) {
                    $scope.mdrider[$scope.MaxItem.PlanId + ',' + 6] = false;
                    Termrideritem = $filter('filter')($scope.MaxItem.AvailableRiders, function (d) { return d.RiderId == 6 });
                    $scope.ridercalulationfrterm(Termrideritem[0], 3, $scope.MaxItem, undefined, false);
                }
                if ($scope.mdrider[$scope.MaxItem.PlanId + ',' + 11] == true) {
                    $scope.mdrider[$scope.MaxItem.PlanId + ',' + 11] = false;
                    Termrideritem = $filter('filter')($scope.MaxItem.AvailableRiders, function (d) { return d.RiderId == 11 });
                    $scope.ridercalulationfrterm(Termrideritem[0], 3, $scope.MaxItem, undefined, false);
                }
                if ($scope.mdrider[$scope.MaxItem.PlanId + ',' + 15] == true) {
                    $scope.mdrider[$scope.MaxItem.PlanId + ',' + 15] = false;
                    Termrideritem = $filter('filter')($scope.MaxItem.AvailableRiders, function (d) { return d.RiderId == 15 });
                    $scope.ridercalulationfrterm(Termrideritem[0], 3, $scope.MaxItem, undefined, false);
                }
                if ($scope.mdrider[$scope.MaxItem.PlanId + ',' + 16] == true) {
                    $scope.mdrider[$scope.MaxItem.PlanId + ',' + 16] = false;
                    Termrideritem = $filter('filter')($scope.MaxItem.AvailableRiders, function (d) { return d.RiderId == 16 });
                    $scope.ridercalulationfrterm(Termrideritem[0], 3, $scope.MaxItem, undefined, false);
                }
                if ($scope.mdrider[$scope.MaxItem.PlanId + ',' + 17] == true) {
                    $scope.mdrider[$scope.MaxItem.PlanId + ',' + 17] = false;
                    Termrideritem = $filter('filter')($scope.MaxItem.AvailableRiders, function (d) { return d.RiderId == 17 });
                    $scope.ridercalulationfrterm(Termrideritem[0], 3, $scope.MaxItem, undefined, false);
                }
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 3] = true;
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 6] = true;
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 11] = true;
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 15] = true;
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 16] = true;
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 17] = true;
            }
            else {
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 3] = false;
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 6] = false;
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 11] = false;
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 15] = false;
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 16] = false;
                $scope.ADDisablemodel[$scope.MaxItem.PlanId + ',' + 17] = false;
            }
        }
        $scope.HealthTabFn = function (id, item1) {
            if (id == 2) {
                $scope.showhospcity = true;
                $scope.insurername = item1.InsurerName;
                $scope.hospitalcity = $scope.quotes_userdata.Citylist;
                $scope.cityname = $scope.quotes_userdata.Citylist.cityname.split(",")[0];
                HealthNetworkHospitals($scope.quotesrequest.Requests[0].CityId, item1.InsurerId, item1.PlanID);
            }
            $scope.HealthTab = id;
        }
        $scope.TermTabFn = function (id, item) {
            $scope.TermTab = id;
            if (id == 2 && Openfeaturedetails[item.PlanId] != true) {
                if (item.IncreasingSumAssured == 3) {
                    item.IncreasingSAValue = $scope.totalcount1;
                }
                if (item.TermPercentagePremium == 1) {
                    $scope.Iprocover = angular.copy(item.InitialRiskcover);
                    $scope.IPRO_Annaual = angular.copy(item.OriginalannualPremium);
                    $scope.IPRO_Month = angular.copy(item.OriginalmonthlyPremium);
                }
                $scope.increasingTooltip = "Sum assured chosen on plan commencement increases periodically by a specified amount. Sum assured reached at the time of payout is paid to the nominee.";
                if (item.InsurerId == 29) {
                    for (var q = 0; q < item.AvailableRiders.length; q++) {
                        if (item.AvailableRiders[q].RiderId == 2) {
                            $scope.RiderPT[item.PlanId + ',' + item.AvailableRiders[q].RiderId] = item.AvailableRiders[q].PolicyTermYear;
                            $scope.RiderPPT[item.PlanId + ',' + item.AvailableRiders[q].RiderId] = item.AvailableRiders[q].PremiumPayingTerm;
                            $scope.TempriderPremiumPayingTerm = item.AvailableRiders[q].PremiumPayingTerm;
                            $scope.RiderPPTlist[item.PlanId] = [];
                            $scope.RiderPTlist[item.PlanId] = [];
                            var ppt = item.AvailableRiders[q].PremiumPayingTerm;
                            if (ppt > 35) {
                                ppt = 35;
                            }
                            for (var s = 5; s <= ppt; s++) {
                                $scope.RiderPPTlist[item.PlanId].push({ "value": s, "Name": s + ' yrs' })
                            }
                            if (item.AvailableRiders[q].PremiumPayingTerm > 35) {
                                $scope.RiderPPTlist[item.PlanId].push({ "value": item.AvailableRiders[q].PremiumPayingTerm, "Name": item.AvailableRiders[q].PremiumPayingTerm + ' yrs' })
                            }
                            for (var s = 10; s <= item.AvailableRiders[q].PolicyTermYear; s++) {
                                $scope.RiderPTlist[item.PlanId].push({ "value": s, "Name": s + ' yrs' })
                            }
                        }
                        if (item.PlanId == 865) {
                            if (item.AvailableRiders[q].RiderId == 3) {
                                if (item.PayingMode == "monthly" || item.PayingMode == "Monthly") {
                                    item.AvailableRiders[q].MaxSumAssured = Math.floor(((((((((item.OriginalmonthlyPremium) / item.AvailableRiders[q].RiderServiceTax) * item.AvailableRiders[q].MFactor) / (item.AvailableRiders[q].Rates - item.AvailableRiders[q].Rates * item.AvailableRiders[q].Discount / 100))) / item.AvailableRiders[q].MonthlyFactor) / item.AvailableRiders[q].MFactor)) * item.AvailableRiders[q].MFactor / item.AvailableRiders[q].SliderRange) * item.AvailableRiders[q].SliderRange;
                                }
                                else {
                                    item.AvailableRiders[q].MaxSumAssured = Math.floor((((((((item.OriginalannualPremium) / item.AvailableRiders[q].RiderServiceTax) * item.AvailableRiders[q].MFactor) / (item.AvailableRiders[q].Rates - item.AvailableRiders[q].Rates * item.AvailableRiders[q].Discount / 100))) / item.AvailableRiders[q].MFactor)) * item.AvailableRiders[q].MFactor / item.AvailableRiders[q].SliderRange) * item.AvailableRiders[q].SliderRange;
                                }
                                var MaxSumassured = 5000000;
                                if (item.SumAssured < MaxSumassured) {
                                    MaxSumassured = item.SumAssured;
                                }
                                if (item.AvailableRiders[q].MaxSumAssured > MaxSumassured) {
                                    item.AvailableRiders[q].MaxSumAssured = MaxSumassured;
                                }
                            }
                        }
                    }
                }
                if (item.InsurerId == 20) {
                    if ($scope.diabeticsuffer == 'yes') {
                        $scope.ADDisablemodel[item.PlanId + ',' + 3] = true;
                        $scope.ADDisablemodel[item.PlanId + ',' + 6] = true;
                    }
                    else {
                        $scope.ADDisablemodel[item.PlanId + ',' + 3] = false;
                        $scope.ADDisablemodel[item.PlanId + ',' + 6] = false;
                    }
                }
            }
        }
        $scope.InvestTabFn = function (id) {
            $scope.InvestmentTab = id;
        }
        $scope.openFeatureTooltip = function (item) {
            if (item.Opentooltip == true) {
                item.Opentooltip = false;
            }
            else {
                item.Opentooltip = true;
            }
        }
        $scope.PensionIllustrationFn = function (item) {
            var data = CommonService.GetICICIIPruViewMore($scope, item);
            data.then(function (response) {
                var url = response.data;
                $window.open(url, '_blank');
            });
        }

        $scope.maxsmartSaveAmt = function (item) {
            if (item != undefined) {
                var saveAmt = 0;
                if (item.PayingMode == 'Monthly') {
                    var buyTodayAmt = item.OriginalmonthlyPremium * 12 * item.PremiumPayingTerm;
                    var buyLaterAmt = Math.round(item.OriginalmonthlyPremium + (item.OriginalmonthlyPremium * 10 / 100), 0);
                    saveAmt = (buyLaterAmt * 12 * item.PremiumPayingTerm) - buyTodayAmt;
                }
                else if (item.PayingMode == 'Yearly') {
                    var buyTodayAmt = item.OriginalannualPremium * item.PremiumPayingTerm;
                    var buyLaterAmt = Math.round(item.OriginalannualPremium + (item.OriginalannualPremium * 10 / 100), 0);
                    saveAmt = (buyLaterAmt * item.PremiumPayingTerm) - buyTodayAmt;
                }
                return saveAmt;
            }
        }

        $scope.buyLaterPop = function (item, idx) {
            $scope.maxsmartlatersrc = '../HomePage/Template/MaxSmartBuyLater.html';
            $scope.planDetails = item;
            console.log(item);
            $scope.maxsmartLaterpop = true;
            $scope.buyToday = { "MonthlyPremium": item.OriginalmonthlyPremium, "PaymentPeriod": item.PremiumPayingTerm, "TotalPremiumPaidMonthly": item.OriginalmonthlyPremium * 12 * item.PremiumPayingTerm, "TotalPremiumPaidYearly": item.OriginalannualPremium * item.PremiumPayingTerm, "YearlyPremium": item.OriginalannualPremium };
            $scope.buyLater = { "MonthlyPremium": 0, "PaymentPeriod": item.PremiumPayingTerm, "TotalPremiumPaidMonthly": 0, "TotalPremiumPaidYearly": 0, "YearlyPremium": 0 };
            if (item.PayingMode == 'Monthly') {
                $scope.buyLater.MonthyPremium = Math.round(item.OriginalmonthlyPremium + (item.OriginalmonthlyPremium * 10 / 100), 0);
                $scope.buyLater.TotalPremiumPaidMonthly = $scope.buyLater.MonthyPremium * 12 * item.PremiumPayingTerm;
            }
            else if (item.PayingMode == 'Yearly') {
                $scope.buyLater.YearlyPremium = Math.round(item.OriginalannualPremium + (item.OriginalannualPremium * 10 / 100), 0);
                $scope.buyLater.TotalPremiumPaidYearly = $scope.buyLater.YearlyPremium * item.PremiumPayingTerm;
            }
        }
        $rootScope.downloadPlansPDF = function (id) {

            const filename = $scope.product + 'Quotes.pdf';
            if ($scope.device == 'Mobile') {
                $scope.downloadLoader = true;
                html2canvas(document.querySelector('body'), {
                    scale: 0.8
                }).then(function (canvas) {
                    var a = document.createElement('a');
                    a.href = canvas.toDataURL("image/png");
                    a.download = $scope.product + 'Quotes.png';
                    a.click();
                    $scope.downloadLoader = false;
                }, function (reject) {
                    $scope.downloadLoader = false;
                });
            }
            else {
                $scope.downloadLoader = true;
                html2canvas(document.querySelector('body'),
                    { scale: 1 }
                ).then(canvas => {
                    var imgWidth = 208;
                    var pageHeight = 295;
                    var imgHeight = canvas.height * imgWidth / canvas.width;
                    var heightLeft = imgHeight;
                    let pdf = new jsPDF('p', 'mm', 'a4');
                    pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, 0, imgWidth, 298);
                    pdf.save(filename);
                    $scope.downloadLoader = false;
                });
            }
        }

        $scope.selectSumInsured = [];
        $scope.superTopSelectedSI = function (item) {
            for (var n = 0; n < $scope.PlanList[item.InsurerId].length; n++) {
                if ($scope.policyTermYearValue == 1) {
                    if ($scope.PlanList[item.InsurerId][n].SumInsured == $scope.selectSumInsured[item.PlanId] && $scope.PlanList[item.InsurerId][n].PremiumForPolicyYear1 > 0) {
                        $scope.PlanList[item.InsurerId][n].isShow = true;
                        $scope.PlanList[item.InsurerId][n].Premium1 = true;
                        $scope.PlanList[item.InsurerId][n].Premium2 = false;
                        $scope.PlanList[item.InsurerId][n].Premium3 = false;
                        //$scope.maxCoverageSt[item.PlanId] = parseInt($scope.selectSumInsured[item.PlanId]) + parseInt($rootScope.healthdata.Requests[0].DeductibleAmount);
                    }
                    else {
                        $scope.PlanList[item.InsurerId][n].isShow = false;
                    }
                }
                else if ($scope.policyTermYearValue == 2) {
                    if ($scope.PlanList[item.InsurerId][n].SumInsured == $scope.selectSumInsured[item.PlanId] && $scope.PlanList[item.InsurerId][n].PremiumForPolicyYear2 > 0) {
                        $scope.PlanList[item.InsurerId][n].isShow = true;
                        $scope.PlanList[item.InsurerId][n].Premium1 = false;
                        $scope.PlanList[item.InsurerId][n].Premium2 = true;
                        $scope.PlanList[item.InsurerId][n].Premium3 = false;
                        //$scope.maxCoverageSt[item.PlanId] = parseInt($scope.selectSumInsured[item.PlanId]) + parseInt($rootScope.healthdata.Requests[0].DeductibleAmount);
                    }
                    else {
                        $scope.PlanList[item.InsurerId][n].isShow = false;
                    }
                }
                else if ($scope.policyTermYearValue == 3) {
                    if ($scope.PlanList[item.InsurerId][n].SumInsured == $scope.selectSumInsured[item.PlanId] && $scope.PlanList[item.InsurerId][n].PremiumForPolicyYear3 > 0) {
                        $scope.PlanList[item.InsurerId][n].isShow = true;
                        $scope.PlanList[item.InsurerId][n].Premium1 = false;
                        $scope.PlanList[item.InsurerId][n].Premium2 = false;
                        $scope.PlanList[item.InsurerId][n].Premium3 = true;
                        //$scope.maxCoverageSt[item.PlanId] = parseInt($scope.selectSumInsured[item.PlanId]) + parseInt($rootScope.healthdata.Requests[0].DeductibleAmount);
                    }
                    else {
                        $scope.PlanList[item.InsurerId][n].isShow = false;
                    }
                }
            }
        }
        $scope.encryptedData = function (value) {
            if (value) {
                const encrypted = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(value + globals.staticKey), CryptoJS.enc.Utf8.parse(globals.encryptionKey),
                    {
                        keySize: 128 / 8,
                        iv: CryptoJS.enc.Utf8.parse(globals.encryptionIv),
                        mode: CryptoJS.mode.CBC,
                        padding: CryptoJS.pad.Pkcs7
                    });
                return encrypted.toString();
            }
        }

        $scope.setPixel = function (cpid, productid) {
            if (productid == 2 || productid == 3 || productid == 5) {
                $scope.isPixel = true;
                $scope.fbpixelSrc = "../HomePage/Template/fb-pixel.html";
            }
        }
        //$scope.runGTAG = function () {
        //    $.getScript('https://www.googletagmanager.com/gtag/js?id=AW-324672386', function () {
        //        window.dataLayer = window.dataLayer || [];
        //        function gtag() { dataLayer.push(arguments); }
        //        gtag('js', new Date()); 

        //        gtag('config', 'AW-324672386');
        //        gtag('event', 'conversion', { 'send_to': 'AW-324672386/wR2jCMW97eECEIK36JoB' });
        //    });
        //}
       
        $scope.payoutPeriodPop = function (item,flag) {
            if (flag == 1) {
                if ($scope.payoutValue) {
                    $scope.quotesrequest.Requests[0].PayoutPeriod = $scope.payoutValue;
                    $scope.isPayoutPop = false;
                    $scope.Initialzedata();
                }
            }
            else {
                if (item.PayoutPeriod) {
                    $scope.payoutList = item.PayoutPeriod;
                    $scope.payoutSrc = "../HomePage/Template/Payout-Popup.html";
                    $scope.payItem = item;
                    $scope.isPayoutPop = true;
                }
            }
        }
    }]);



app.service('anchorSmoothScroll', function () {

    this.scrollTo = function (eID) {

        // This scrolling function 
        // is from http://www.itnewb.com/tutorial/Creating-the-Smooth-Scroll-Effect-with-JavaScript

        var startY = currentYPosition();
        var stopY = elmYPosition(eID);
        var distance = stopY > startY ? stopY - startY : startY - stopY;
        if (distance < 100) {
            scrollTo(0, stopY); return;
        }
        var speed = Math.round(distance / 100);
        if (speed >= 20) speed = 20;
        var step = Math.round(distance / 25);
        var leapY = stopY > startY ? startY + step : startY - step;
        var timer = 0;
        if (stopY > startY) {
            for (var i = startY; i < stopY; i += step) {
                setTimeout("window.scrollTo(0, " + leapY + ")", timer * speed);
                leapY += step; if (leapY > stopY) leapY = stopY; timer++;
            } return;
        }
        for (var i = startY; i > stopY; i -= step) {
            setTimeout("window.scrollTo(0, " + leapY + ")", timer * speed);
            leapY -= step; if (leapY < stopY) leapY = stopY; timer++;
        }

        function currentYPosition() {
            // Firefox, Chrome, Opera, Safari
            if (self.pageYOffset) return self.pageYOffset;
            // Internet Explorer 6 - standards mode
            if (document.documentElement && document.documentElement.scrollTop)
                return document.documentElement.scrollTop;
            // Internet Explorer 6, 7 and 8
            if (document.body.scrollTop) return document.body.scrollTop;
            return 0;
        }

        function elmYPosition(eID) {
            var elm = document.getElementById(eID);
            var y = elm.offsetTop;
            var node = elm;
            while (node.offsetParent && node.offsetParent != document.body) {
                node = node.offsetParent;
                y += node.offsetTop;
            } return y;
        }

    };



});

app.directive("stickyNav", function stickyNav($window) {
    function stickyNavLink(scope, element) {
        var w = angular.element($window),
            size = element[0].clientHeight,
            top = 0;

        function toggleStickyNav() {
            if (!element.hasClass('controls-fixed') && $window.pageYOffset > top + size) {
                element.addClass('controls-fixed');
            } else if (element.hasClass('controls-fixed') && $window.pageYOffset <= top + size) {
                element.removeClass('controls-fixed');
            }
        }

        scope.$watch(function () {
            return element[0].getBoundingClientRect().top + $window.pageYOffset;
        }, function (newValue, oldValue) {
            if (newValue !== oldValue && !element.hasClass('controls-fixed')) {
                top = newValue;
            }
        });

        w.bind('resize', function stickyNavResize() {
            element.removeClass('controls-fixed');
            top = element[0].getBoundingClientRect().top + $window.pageYOffset;
            toggleStickyNav();
        });
        w.bind('scroll', toggleStickyNav);
    }

    return {
        scope: {},
        restrict: 'A',
        link: stickyNavLink
    };
});


app.directive('hideOnMouseUpElsewhere', function () {
    return {
        restrict: 'A',
        scope: { someCtrlFn: '&callbackFn' },
        link: function (scope, element, attr) {

            $(document).mouseup(function (e) {
                var container = $(element);

                if (!container.is(e.target)
                    && container.has(e.target).length === 0
                    && !(e.target.tagName === "LI" || e.target.tagName === "SPAN")) {

                    scope.someCtrlFn();
                }
            });
        }
    }
})